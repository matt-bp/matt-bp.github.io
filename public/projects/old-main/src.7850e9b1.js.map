{"version":3,"sources":["src/Engine/Renderers/CanvasRenderer.ts","src/Engine/Input/Mouse.ts","src/Engine/Audio/Audio.ts","src/Engine/Systems/AudioSystem.ts","src/Engine/BaseComponents/GameLoop.ts","src/Engine/Geometry/Rectangle.ts","src/Game/Renderers/ButtonRenderer.ts","src/Game/Screens/BaseScreen.ts","src/Engine/Renderers/TextRenderer.ts","src/Game/Screens/Credits.ts","src/Engine/Interfaces/IHighScore.ts","src/Engine/Managers/HighScoreManager.ts","src/Game/Screens/HighScores.ts","src/Game/Screens/Menu.ts","src/Engine/Events/Event.ts","src/Engine/Systems/EventSystem.ts","src/Engine/Graphics/Texture.ts","src/Game/Objects/Tile.ts","src/Game/Helpers/shuffle.ts","src/Engine/Math/Vec2.ts","src/Game/Objects/Path.ts","src/Engine/Graphics/Color.ts","src/Engine/Graphics/Particle.ts","src/Engine/Math/random.ts","src/Engine/Systems/ParticleSystem.ts","src/Engine/Renderers/ParticleSystemRenderer.ts","src/Game/GameModel.ts","src/Game/GamePlay.ts","src/index.ts"],"names":[],"mappings":";AAsBK,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAbQ,IAAA,EAAA,WAGG,SAAA,EAAA,GAAyB,EAAA,KAAA,GAFrC,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAYC,WAAA,IATQ,KAAA,QAAU,EAAO,WAAW,MASpC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAEW,MAAA,WACkB,IAAA,EAAA,KAAK,QAAQ,OAA/B,EAAA,EAAA,MAAO,EAAA,EAAA,OAEV,KAAA,QAAQ,UAAU,EAAG,EAAG,EAAO,KALvC,CAAA,IAAA,iBASG,MAAA,SAAA,EACA,EACA,EACA,EACA,GAEK,KAAA,QAAQ,YAAc,EACtB,KAAA,QAAQ,UAAY,EAEpB,KAAA,QAAQ,OAER,KAAA,QAAQ,WAAW,EAAG,EAAG,EAAG,GAE5B,KAAA,QAAQ,YAtBhB,CAAA,IAAA,gBA0BG,MAAA,SAAA,EACA,EACA,EACA,EACA,EACA,GAEK,KAAA,QAAQ,UAAY,EACpB,KAAA,QAAQ,UAAY,EAEpB,KAAA,QAAQ,OACR,KAAA,QAAQ,UAAU,EAAG,GACrB,KAAA,QAAQ,OAAO,GACf,KAAA,QAAQ,WAAW,GAAI,GAEvB,KAAA,QAAQ,SAAS,EAAG,EAAG,EAAO,GAE9B,KAAA,QAAQ,YA3ChB,CAAA,IAAA,WA+CG,MAAA,SAAA,EACA,GACA,IAAA,EAAmB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACnB,EAAkB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAClB,EAAoB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,OACpB,EAAe,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,aAEV,KAAA,QAAQ,OACR,KAAA,QAAQ,KAAO,EACd,IAAA,EAAQ,KAAK,QAAQ,YAAY,GAAM,MACxC,KAAA,QAAQ,UAER,KAAA,QAAQ,OACR,KAAA,QAAQ,KAAO,EAChB,IAAA,EAAS,KAAK,QAAQ,YAAY,KAAK,MACtC,KAAA,QAAQ,UAER,KAAA,QAAQ,OACR,KAAA,QAAQ,KAAO,EAEf,KAAA,QAAQ,UAAY,EAEnB,IAAA,EAAI,EAAS,EAAI,EAAI,EAAQ,EAAI,EAAI,EACrC,EAAI,EAAS,EAAI,EAAI,EAAQ,EAAI,EAAI,EAEtC,KAAA,QAAQ,aAAe,MACvB,KAAA,QAAQ,UAAU,EAAI,EAAQ,EAAG,EAAI,EAAS,GAC9C,KAAA,QAAQ,OAAO,GACf,KAAA,QAAQ,YAAY,EAAI,EAAQ,KAAM,EAAI,EAAS,IAEnD,KAAA,QAAQ,SAAS,EAAM,EAAG,EAAI,GAE9B,KAAA,QAAQ,YA/EhB,CAAA,IAAA,aAmFG,MAAA,SAAA,EACA,EACA,GACA,IAAA,EAAqB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAEhB,KAAA,QAAQ,YACR,KAAA,QAAQ,YAAc,EACtB,KAAA,QAAQ,UAAY,EACpB,KAAA,QAAQ,UAAY,EAEpB,KAAA,QAAQ,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GAEtC,IAAA,IAAI,EAAI,EAAG,EAAI,EAAO,OAAQ,IAC1B,KAAA,QAAQ,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GAG3C,GACK,KAAA,QAAQ,YAEZ,KAAA,QAAQ,OACR,KAAA,QAAQ,WAvGhB,CAAA,IAAA,eA0GmB,MAAA,SAAA,EAAc,GACzB,KAAA,QAAQ,OACR,KAAA,QAAQ,KAAO,EACd,IAAA,EAAQ,KAAK,QAAQ,YAAY,GAAM,MAEtC,OADF,KAAA,QAAQ,UACN,IA/GV,CAAA,IAAA,gBAkHoB,MAAA,SAAA,GACZ,KAAA,QAAQ,OACR,KAAA,QAAQ,KAAO,EACd,IAAA,EAAS,KAAK,QAAQ,YAAY,KAAK,MAEtC,OADF,KAAA,QAAQ,UACN,IAvHV,CAAA,IAAA,cA0HkB,MAAA,SAAA,GACX,EAAQ,QACH,KAAA,QAAQ,OACR,KAAA,QAAQ,UAAU,EAAQ,OAAO,EAAG,EAAQ,OAAO,GACnD,KAAA,QAAQ,OAAO,EAAQ,UACvB,KAAA,QAAQ,WAAW,EAAQ,OAAO,GAAI,EAAQ,OAAO,GACrD,KAAA,QAAQ,UACT,EAAQ,MACR,EAAQ,OAAO,EAAI,EAAQ,MAAQ,EACnC,EAAQ,OAAO,EAAI,EAAQ,OAAS,EACpC,EAAQ,MACR,EAAQ,QAEP,KAAA,QAAQ,aAvIpB,CAAA,IAAA,iBAoJG,MAAA,SAAA,EACA,EACA,EACA,EACA,GAEI,GAAA,EAAY,MAAO,CACb,IAAA,EAAS,EAAY,UAAU,GAEhC,KAAA,QAAQ,OACR,KAAA,QAAQ,UAAU,EAAO,EAAG,EAAO,GACnC,KAAA,QAAQ,OAAO,GACf,KAAA,QAAQ,WAAW,EAAO,GAAI,EAAO,GACrC,KAAA,QAAQ,UACT,EAAY,MACZ,EAAO,EACP,EAAO,EACP,EAAO,EACP,EAAO,EACP,EAAO,EAAI,EAAK,EAAI,EACpB,EAAO,EAAI,EAAK,EAAI,EACpB,EAAK,EACL,EAAK,GAEJ,KAAA,QAAQ,aA5KpB,CAAA,IAAA,iBAgLqB,MAAA,SAAA,EAAW,GACtB,OAAA,KAAK,QAAQ,qBAAqB,EAAI,EAAG,EAAI,EAAG,EAAI,EAAG,EAAI,KAjLrE,CAAA,IAAA,UANiB,IAAA,WACP,OAAA,KAAK,MAAQ,IAKvB,CAAA,IAAA,QAFe,IAAA,WACL,OAAA,KAAK,QAAQ,OAAO,UAC9B,EAbQ,GAaR,QAAA,eAAA;;AC4DA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxEgB,IAAA,EAAA,WAIG,SAAA,EAAA,GAAwB,IAAA,EAAA,KAAA,EAAA,KAAA,GAoE3C,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EApEmB,MAAA,IAHpB,OAAA,eAAA,KAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA2C,MAAA,KAC3C,OAAA,eAAA,KAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA+C,MAAA,KA2B/C,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACR,IAAA,IAAM,KAAO,EAAK,aACf,GAAA,EAAK,aAAa,eAAe,GAE7B,IAAA,IAAI,EAAI,EACR,EAAK,UAAU,IAAQ,EAAI,EAAK,UAAU,GAAK,OAC/C,IACF,CACQ,IAAA,EAAK,EAAK,aAAa,GAC7B,EAAK,UAAU,GAAK,GAAG,CACnB,GAAA,EACA,IAAK,EAAK,OAAO,KAMjC,EAAK,aAAe,MAGxB,OAAA,eAAA,KAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,WACzB,EAAK,YAAY,iBAAiB,QAAS,EAAK,cAChD,EAAK,YAAY,iBAAiB,YAAa,EAAK,iBAGxD,OAAA,eAAA,KAAA,wBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgC,MAAA,WAC5B,EAAK,YAAY,oBAAoB,QAAS,EAAK,cACnD,EAAK,YAAY,oBAAoB,YAAa,EAAK,iBAG3D,OAAA,eAAA,KAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuB,MAAA,SAAC,GACJ,UAAZ,EAAG,MAAgC,cAAZ,EAAG,OAC1B,EAAK,aAAa,EAAG,MAAQ,MAxD5B,KAAA,qBAmER,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAhEa,MAAA,WACL,KAAA,wBAEA,KAAA,UAAY,KA6DpB,CAAA,IAAA,gBA1DmB,MAAA,WACX,KAAA,UAAY,KAyDpB,CAAA,IAAA,mBAtDsB,MAAA,WACd,KAAA,aAAe,KAqDvB,CAAA,IAAA,WAlDe,MAAA,SAAA,EAAgC,GACvC,KAAK,UAAU,KACX,KAAA,UAAU,GAAa,IAE3B,KAAA,UAAU,GAAW,KAAK,KA8ClC,CAAA,IAAA,SAPc,MAAA,SAAA,GACL,IAAA,EAAO,KAAK,YAAY,wBACxB,EAAI,EAAM,QAAU,EAAK,KACzB,EAAI,EAAM,QAAU,EAAK,IAGxB,MAAA,CAAE,EAAG,GAFG,KAAO,EAAK,OAEH,EAAG,GADZ,KAAO,EAAK,aAE9B,EAxEgB,GAwEhB,QAAA,QAAA;;AC1CA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAxCQ,IAAA,EAAA,WAMG,SAAA,EAAA,GAIoB,IAAA,EAAA,KAHpB,EAAgB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAChB,EAAgB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAChB,EAAiB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACjB,EAAoB,UAAA,OAAA,EAAA,UAAA,QAAA,EAAA,EAAA,KAAA,GA8B/B,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAlCW,MAAA,IAkCX,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAjCW,MAAA,IAiCX,OAAA,eAAA,KAAA,OAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAhCW,MAAA,IAgCX,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA/BW,MAAA,IA+BX,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA9BW,MAAA,IATZ,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA8B,MAAA,IAE9B,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAqCC,WAAA,IA3BD,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GACT,EAAK,UAIT,EAAK,aAAe,EAChB,EAAK,aAAe,EAAK,QACzB,EAAK,QAAU,IAAI,MAAM,EAAK,QAC9B,EAAK,QAAQ,OAAS,EAAK,OAC3B,EAAK,QAAQ,OAAO,KAAK,EAAK,eAItC,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAe,MAAA,WACP,EAAK,SACL,EAAK,QAAQ,WAIrB,OAAA,eAAA,KAAA,OAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAc,MAAA,WACN,EAAK,SACL,EAAK,QAAQ,UAQrB,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACb,EAAK,QAAQ,WAHhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAFO,IAAA,WACG,OAAA,KAAK,SAAW,KAAK,QAAQ,SAAW,KAAK,SACvD,EAxCQ,GAwCR,QAAA,UAAA;;ACDJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAtCD,IAAA,EAAA,QAAA,kBAsCC,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCApCY,IAAA,EAAb,SAAA,IAAA,IAAA,EAAA,KAAA,EAAA,KAAA,GACI,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,KAC7B,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAkB,MAAA,SACd,GACA,IAAA,EAAgB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAChB,EAAgB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAChB,EAAiB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACjB,EACA,UAAA,OAAA,EAAA,UAAA,QAAA,EACA,EAAK,MAAM,KAAK,IAAI,EAAJ,UAAc,EAAQ,EAAO,EAAM,EAAQ,OAE/D,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GACR,IAAA,IAAI,EAAI,EAAK,MAAM,OAAS,EAAG,GAAK,EAAG,IACxC,EAAK,MAAM,GAAG,OAAO,GAEjB,EAAK,MAAM,GAAG,KACd,EAAK,MAAM,OAAO,EAAG,GAGzB,EAAK,MAAM,GAAG,OAAO,MAI7B,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAwB,MAAA,WACf,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IACnC,EAAK,MAAM,GAAG,QAElB,EAAK,MAAM,OAAS,KAGxB,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACR,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IACnC,EAAK,MAAM,GAAG,UAElB,EAAK,MAAM,OAAS,MAE3B,QAAA,YAAA;;ACbI,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvBgB,IAAA,EAkBjB,SACI,EAAA,EACA,GAAmD,IAAA,EAAA,KAAA,EAAA,KAAA,GAnBvD,OAAA,eAAA,KAAA,oBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoC,MAAA,IACpC,OAAA,eAAA,KAAA,KAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAqBC,WAAA,IApBD,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgC,OAAA,IAKhC,OAAA,eAAA,KAAA,uBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAeC,WAAA,IAXD,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAWC,WAAA,IAPD,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAOC,WAAA,IAKD,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAkB,MAAA,WACd,EAAK,kBAAoB,YAAY,MACrC,sBAAsB,EAAK,aAM/B,OAAA,eAAA,KAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA+B,MAAA,WAC3B,EAAK,qBAAuB,aAC5B,EAAK,eAAiB,aACtB,EAAK,eAAiB,gBAG1B,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAmB,MAAA,SAAC,GACV,IAAA,EAAc,EAAY,EAAK,kBACrC,EAAK,kBAAoB,EAEzB,EAAK,aAAa,GAClB,EAAK,OAAO,GACZ,EAAK,SAEA,EAAK,YACN,sBAAsB,EAAK,aAInC,OAAA,eAAA,KAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuB,MAAA,SAAC,GACpB,EAAK,qBAAqB,MAG9B,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,SAAC,GACd,EAAK,eAAe,MAGxB,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACb,EAAK,eAAe,EAAK,OA1CpB,KAAA,GAAK,IAAI,EAAc,IAC/B,QAAA,QAAA;;ACTA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAfgB,IAAA,EAAA,WAEN,SAAA,EAAA,EACA,EACA,EACA,GAAS,EAAA,KAAA,GAUnB,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAbU,MAAA,IAaV,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAZU,MAAA,IAYV,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAXU,MAAA,IAWV,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAVU,MAAA,IAUV,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WAPe,MAAA,SAAA,GAER,OAAA,EAAI,GAAK,KAAK,GACd,EAAI,GAAK,KAAK,EAAI,KAAK,GACvB,EAAI,GAAK,KAAK,GACd,EAAI,GAAK,KAAK,EAAI,KAAK,MAE9B,EAfgB,GAehB,QAAA,QAAA;;ACUU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxBf,IAAM,EAAiB,SAAC,GAAmB,OAAA,SAAC,GAAsB,IAAA,EAAA,EAAA,EACvC,EAAA,EAAO,OAAtB,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,EAEjB,EAAG,cAAc,EAAG,EAAG,EAAG,EAAG,EAAyB,QAAtB,EAAA,QAAA,EAAA,EAAO,aAAP,IAAA,OAAA,EAAA,EAAc,YAAQ,IAAA,EAAA,EAAA,QAE5B,IAAA,EAAA,EAAO,KAAzB,EAAA,EAAA,QAAS,EAAA,EAAA,KAMX,GAHY,EAAG,aAAa,EAAS,GAGb,GAAK,EAC7B,GAHa,EAAG,cAAc,GAGL,GAAK,EAEpC,EAAG,SACC,CAAE,EAAG,EAAI,EAAU,EAAG,EAAI,GAC1B,EACA,GACA,EACoB,QAApB,EAAA,EAAO,KAAK,YAAQ,IAAA,EAAA,EAAA,OACpB,KAIO,EAAA,EAAA,QAAA,QAAA;;ACLV,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApBL,IAAA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,oCAmBK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAhBgB,IAAA,EAajB,SAA4B,EAAA,GAAa,IAAA,EAAA,KAAA,EAAA,KAAA,GAGxC,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAH2B,MAAA,IAZ5B,OAAA,eAAA,KAAA,oBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAeC,WAAA,IAdD,OAAA,eAAA,KAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAcC,WAAA,IAbD,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAaC,WAAA,IAXD,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAWC,WAAA,IATD,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA8B,MAAA,KAC9B,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,MAC7B,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,OAAC,KAAO,KAAK,SAAW,IAErD,OAAA,eAAA,KAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAwD,MAAA,KAOxD,OAAA,eAAA,KAAA,6BAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuC,MAAA,WAC9B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,QAAQ,OAAQ,IACrC,EAAK,UAAU,MAAK,EAAe,EAAA,SAAA,EAAK,QAAQ,QAIxD,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA2B,MAAA,WACvB,QAAQ,IAAI,UACZ,EAAK,UAAY,MAGrB,OAAA,eAAA,KAAA,0BAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAkC,MAAA,SAAC,GAC1B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,QAAQ,OAAQ,IACjC,GAAA,EAAK,QAAQ,GAAG,OAAO,SAAS,EAAI,KAEpC,YADA,EAAK,QAAQ,GAAG,cAM5B,OAAA,eAAA,KAAA,kBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA4B,MAAA,WACxB,EAAK,mBAAqB,EAAK,2BAGnC,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoB,MAAA,SAAC,GACjB,EAAK,mBAAmB,MAG5B,OAAA,eAAA,KAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA0B,MAAA,SAAC,GACvB,EAAG,SAAS,CAAE,EAAG,EAAG,QAAS,EAAG,KAAO,EAAK,MAAO,GAAG,GACjD,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,UAAU,OAAQ,IACvC,EAAK,UAAU,GAAG,MAI1B,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GACb,EAAG,QACH,EAAK,eAAe,MAMxB,OAAA,eAAA,KAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAsB,MAAA,SAAC,GACZ,OAAC,KAAO,GAAK,KAGxB,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAqB,MAAA,SAAC,GACX,MAAA,CAAE,EAAG,EAAK,SAAS,GAAY,EAAG,MAG7C,OAAA,eAAA,KAAA,mBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,SAAC,EAAc,GAClC,IAAA,EAAQ,EAAK,QAAU,GACvB,EAAQ,EAAK,UAAU,GAE7B,EAAK,QAAQ,KAAK,CACd,OAAQ,IAAI,EAAJ,QAAc,EAAQ,GAAQ,IAAM,EAAO,KACnD,KAAM,CAAE,QAAS,eAAgB,KAAM,cACvC,SAAU,OA9DT,KAAA,mBAAqB,KAAK,wBAC1B,KAAA,eAAiB,KAAK,eAC9B,QAAA,QAAA;;ACRU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAXf,IAAM,EAAe,SAAC,GAAe,OAAA,SAAC,GAAsB,IAAA,EAAA,EAAA,EAAA,EACxD,EAAG,SACC,EAAK,IACL,EAAK,QACY,QAAjB,EAAA,EAAK,gBAAY,IAAA,EAAA,EAAA,EACA,QAAjB,EAAA,EAAK,gBAAY,IAAA,GAAA,EACJ,QAAb,EAAA,EAAK,YAAQ,IAAA,EAAA,EAAA,OACA,QAAb,EAAA,EAAK,YAAQ,IAAA,EAAA,EAAA,gBAIN,EAAA,EAAA,QAAA,QAAA;;ACXsB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAHrC,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,wCAEqC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAhB,IAAA,EAAA,SAAA,GAAgB,EAAA,EAAA,EAAA,SAAA,IAAA,EAAA,EAAA,GACrB,SAAA,EAAA,GAAkB,IAAA,EAAA,EAAA,KAAA,GACpB,EAAA,EAAA,KAAA,KAAA,WAcD,IAZD,IAAA,EAAO,IAEL,EAAc,CAChB,qCACA,wBACA,kDACA,wCACA,iCACA,4CACA,qDAGK,EAAI,EAAG,EAAI,EAAY,OAAQ,IAC/B,EAAA,UAAU,MACX,EAAa,EAAA,SAAA,CACT,QAAY,GAAA,OAAA,EAAY,IACxB,IAAK,CAAE,EAAG,IAAK,EAAG,GAAQ,IAC1B,KAAM,gBApBQ,OAyBrB,EAAA,iBAAiB,EAAM,GAEvB,EAAA,6BA3BqB,EADG,OAAA,EAAhB,GAAgB,QAAA,QAAA;;ACgB9B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAAA,IAAM,EAAa,SAAC,EAAe,GAClC,OAAA,EAAE,MAAQ,EAAE,OACJ,EACD,EAAE,QAAU,EAAE,MACd,EAEA,GANR,QAAA,WAAA;;ACaH,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhCJ,IAAA,EAAA,QAAA,4BAgCI,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAnBiB,IAAA,EAAA,SAAA,IAmBjB,EAAA,KAAA,IAAA,QAAA,QAAA,EAlBA,OAAA,eAAA,EAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoC,MAAA,2BAEpC,OAAA,eAAA,EAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAsB,MAAA,WAClB,aAAa,WAAW,EAAiB,eAG7C,OAAA,eAAA,EAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA8B,MAAA,WACpB,IAAA,EAAa,aAAa,EAAiB,YAC7C,OAAC,EAMM,KAAK,MAAM,GALX,CACH,KAAM,CAAE,KAAM,GAAI,SAAU,IAC5B,KAAM,CAAE,KAAM,GAAI,SAAU,QAOxC,OAAA,eAAA,EAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAyB,MAAA,SACrB,EACA,EACA,EACA,GAWiB,IATb,IAAA,EAAa,EAAiB,gBAE5B,EAAgB,EAAW,GAOhB,EAAA,EAAA,EALI,CACjB,CAAE,MAAO,EAAc,KAAM,MAAO,GACpC,CAAE,MAAO,EAAc,SAAU,MAAO,IAGb,EAAA,EAAA,OAAA,IAAA,CAAtB,IAAA,EAAJ,EAAA,GACO,EAAiB,EAAjB,MAAO,EAAU,EAAV,MACf,EAAM,KAAK,CAAE,SAAA,EAAU,MAAA,IACvB,EAAM,KAAK,EAAX,YACI,EAAM,OAAS,GACf,EAAM,OAAO,EAAG,GAIxB,aAAa,EAAiB,YAAc,KAAK,UAAU;;AC/C3B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EATxC,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,2CAGA,EAAA,EAAA,QAAA,wCAKwC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAnB,IAAA,EAAA,SAAA,GAAmB,EAAA,EAAA,EAAA,SAAA,IAAA,EAAA,EAAA,GAGhB,SAAA,EAAA,GAAkB,IAAA,EAAA,OAAA,EAAA,KAAA,GAC5B,EAAA,EAAA,KAAA,KAAA,eAJ0B,OAAA,eAAA,EAAA,GAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAGhB,MAAA,IAFpB,OAAA,eAAA,EAAA,GAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgE,MAAA,KAOhE,OAAA,eAAA,EAAA,GAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuB,MAAA,WACd,EAAA,UAAU,OAAS,EACnB,EAAA,QAAQ,OAAS,EAElB,IAEE,EAAa,EAAiB,QAAA,gBAE5B,EAAK,WAAW,OAAQ,EAAU,KAAU,CAAE,EAAG,IAAK,EAAG,MACzD,EAAK,WAAW,OAAQ,EAAU,KAAU,CAAE,EAAG,IAAK,EAAG,MAE5D,EAAA,iBAAiB,IAAK,EAAK,QAE3B,EAAA,gCAGT,OAAA,eAAA,EAAA,GAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAqB,MAAA,SACjB,EACA,EACA,GAEI,IAAA,EAAU,EAET,EAAA,UAAU,MACX,EAAa,EAAA,SAAA,CACT,QAAS,EACT,IAAK,CAAE,EAAG,EAAY,EAAG,EAAG,EAAY,GACxC,KAAM,gBAId,GAAW,GAEN,EAAA,UAAU,MACX,EAAa,EAAA,SAAA,CACT,QAAS,OACT,IAAK,CAAE,EAAG,EAAY,EAAG,EAAG,EAAY,EAAI,GAC5C,KAAM,gBA8CP,OAxCH,GACA,EAAe,MACf,EAAe,KAAK,OAAS,EAE7B,GAAW,EAAK,0BAA0B,EAAe,KAAM,CAC3D,EAAG,EAAY,EAPF,GAQb,EAAG,EAAY,EAAI,KAGvB,GAAW,GACX,GAAW,EAAK,iBAAiB,CAC7B,EAAG,EAAY,EAbF,GAcb,EAAG,EAAY,EAAI,KAItB,EAAA,UAAU,MACX,EAAa,EAAA,SAAA,CACT,QAAS,kBACT,IAAK,CAAE,EAAG,EAAY,EAAG,EAAG,EAAY,EAAI,GAC5C,KAAM,gBAIV,GACA,EAAe,UACf,EAAe,SAAS,OAAS,EAEjC,GAAW,EAAK,0BAA0B,EAAe,SAAU,CAC/D,EAAG,EAAY,EA/BF,GAgCb,EAAG,EAAY,EAAI,KAGvB,GAAW,GACX,GAAW,EAAK,iBAAiB,CAC7B,EAAG,EAAY,EArCF,GAsCb,EAAG,EAAY,EAAI,KAIpB,KAGX,OAAA,eAAA,EAAA,GAAA,4BAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoC,MAAA,SAChC,EACA,GAEI,IAAA,EAAU,EAEd,GAAW,GAEN,IAAA,IAAI,EAAI,EAAG,EAAI,EAAI,OAAQ,IAEvB,EAAA,UAAU,MACX,EAAa,EAAA,SAAA,CACT,QAAY,GAAA,OAAA,EAAI,EAAM,MAAA,OAAA,EAAI,GAAG,UAC7B,IAAK,CAAE,EAAG,EAAY,EAAG,EAAG,EAAY,EAAI,GAC5C,KAAM,gBAKT,EAAA,UAAU,MACX,EAAa,EAAA,SAAA,CACT,QAAS,EAAI,GAAG,MAAM,WACtB,IAAK,CAAE,EAAG,EAAY,EAAI,IAAK,EAAG,EAAY,EAAI,GAClD,KAAM,gBAId,GAAW,GAGR,OAAA,KAGX,OAAA,eAAA,EAAA,GAAA,mBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA2B,MAAA,SAAC,GAWjB,OAVF,EAAA,UAAU,MACX,EAAa,EAAA,SAAA,CACT,QAAS,cACT,IAAK,CACD,EAAG,EAAY,EACf,EAAG,EAAY,GAEnB,KAAM,gBAGP,MAGX,OAAA,eAAA,EAAA,GAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACR,EAAA,kBAzIA,EAAA,eAF6B,EAHF,OAAA,EAAnB,GAAmB,QAAA,QAAA;;ACHN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EANlC,IAAA,EAAA,EAAA,QAAA,oCACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,iBAGkC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAb,IAAA,EAAA,SAAA,GAAa,EAAA,EAAA,EAAA,SAAA,IAAA,EAAA,EAAA,GAGlB,SAAA,EAAA,GAAwD,IAAA,EAAA,EAAA,KAAA,GAC1D,EAAA,EAAA,KAAA,KAAA,uBAHV,OAAA,eAAA,EAAA,GAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgC,MAAA,KAyChC,OAAA,eAAA,EAAA,GAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,SAAC,GACtB,EAAK,QAAQ,GAAO,SACf,EAAA,QAAQ,GAAO,UAGnB,EAAA,eAAiB,EAAK,QAAQ,GAAO,OACrC,EAAA,mBAAqB,EAAK,QAAQ,GAAO,cAGlD,OAAA,eAAA,EAAA,GAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuB,MAAA,WACd,EAAA,eAAiB,EAAK,cACtB,EAAA,qBA/CD,IAAA,EAAO,IAEL,EAAW,EAAK,QAAU,IAC1B,EAAW,EAAK,UAAU,GAC3B,EAAA,QAAQ,KAAK,CACd,OAAQ,IAAI,EAAJ,QAAc,EAAU,EAAM,EAAU,KAChD,KAAM,CAAE,QAAS,kBAAmB,KAAM,cAC1C,SAAU,WAAM,OAAA,EAAU,WAGzB,EAAA,QAAQ,KAAK,CACd,OAAQ,IAAI,EAAJ,QAAc,EAAW,GAAQ,IAAM,EAAU,KACzD,KAAM,CAAE,QAAS,kBAAmB,KAAM,cAC1C,SAAU,WAAM,OAAA,EAAU,WAKzB,IAFC,IAAA,EAAc,CAAC,EAAD,QAAa,EAAb,SAEX,EAAA,SAAA,GACC,IAAA,EAAS,IAAI,EAAY,GAAG,EAAK,cAClC,EAAA,QAAQ,KAAK,GACb,EAAA,QAAQ,KAAK,CACd,OAAQ,IAAI,EAAJ,QACJ,EAAK,QACJ,GAAQ,IACT,EAAK,QACL,KAEJ,KAAM,CAAE,QAAS,EAAO,MAAO,KAAM,cACrC,SAAU,WAAM,OAAA,EAAK,mBAAmB,OAXvC,EAAI,EAAG,EAAI,EAAY,OAAQ,IAA/B,EAAA,GArBuD,OAoC3D,EAAA,6BApC2D,EAHtC,OAAA,EAAb,GAAa,QAAA,QAAA;;ACuB7B,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7BgB,IAAA,EAAA,WAUL,SAAA,EAAA,EACA,EACA,GAAqB,EAAA,KAAA,GAiBhC,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAnBW,MAAA,IAmBX,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAlBW,MAAA,IAkBX,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAjBW,MAAA,IAXZ,OAAA,eAAA,KAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAqC,MAAA,IA4BpC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAda,MAAA,SAAA,GACL,KAAA,oBAAsB,EAEvB,KAAK,mBAAqB,KAAK,WAC1B,KAAA,oBAAsB,KAAK,SAC3B,KAAA,WACD,KAAK,UACA,KAAA,cAOhB,CAAA,IAAA,YAFmB,IAAA,WACT,OAAA,KAAK,aACf,EA7BgB,GA6BhB,QAAA,QAAA;;ACHJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzBD,IAAA,EAAA,EAAA,QAAA,oBAyBC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAvBoB,IAAA,EAArB,SAAA,IAAA,IAAA,EAAA,KAAA,EAAA,KAAA,GACI,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA0B,MAAA,KAC1B,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAkB,MAAA,SACd,EACA,EACA,GAEA,EAAK,OAAO,KAAK,IAAI,EAAJ,QAAU,EAAU,EAAU,OAEnD,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GACR,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,OAAO,OAAQ,IAChC,EAAK,OAAO,GAAG,WAAa,GAC5B,EAAK,OAAO,OAAO,EAAG,GACtB,KAGJ,EAAK,OAAO,GAAG,OAAO,MAI9B,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACb,EAAK,OAAO,OAAS,MAE5B,QAAA,QAAA;;ACqBI,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7CQ,IAAA,EAAA,WAQG,SAAA,EAAA,EAAc,EAAqB,GAAqB,IAAA,EAAA,KAAA,EAAA,KAAA,GAPpE,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA4CC,WAAA,IA3CD,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA0B,OAAA,IAC1B,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAmC,MAAA,IAAI,QACvC,OAAA,eAAA,KAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA4B,MAAA,IAC5B,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAyB,MAAA,IACzB,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA0B,MAAA,IAGjB,KAAA,OAAO,OAAS,WACjB,EAAK,QAAS,EACV,IAAA,EAAK,EAAK,OAAO,MAAQ,EAAK,OAAO,OACzC,EAAK,OAAS,EAAgB,EAC9B,EAAK,QAAU,GAEd,KAAA,OAAO,IAAM,EACb,KAAA,QAAU,EA6BlB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QA1BQ,IAAA,WACE,OAAA,KAAK,SAyBf,CAAA,IAAA,SAtBS,IAAA,WACC,OAAA,KAAK,UAqBf,CAAA,IAAA,QAlBQ,IAAA,WACE,OAAA,KAAK,SAiBf,CAAA,IAAA,WAdW,IAAA,WACD,OAAA,KAAK,WAGH,IAAA,SAAA,GACJ,KAAA,UAAY,IASpB,CAAA,IAAA,QANQ,IAAA,WACE,OAAA,KAAK,SAKf,CAAA,IAAA,SAFS,IAAA,WACC,OAAA,KAAK,YACf,EA7CQ,GA6CR,QAAA,QAAA;;ACqCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApFL,IAAA,EAAA,QAAA,iCAGA,EAAA,EAAA,QAAA,oCAiFK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/EgB,IAAA,EAAA,WAeb,SAAA,EAAA,EACA,EACQ,EACA,GAA8C,EAAA,KAAA,GA6DzD,OAAA,eAAA,KAAA,KAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA9DW,MAAA,IA8DX,OAAA,eAAA,KAAA,mBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA7DW,MAAA,IAjBZ,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA8EC,WAAA,IA7ED,OAAA,eAAA,KAAA,mBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA6EC,WAAA,IA5ED,OAAA,eAAA,KAAA,mBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA4EC,WAAA,IA3ED,OAAA,eAAA,KAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA2EC,WAAA,IA1ED,OAAA,eAAA,KAAA,oBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA0EC,WAAA,IAzED,OAAA,eAAA,KAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA4B,OAAA,IAcnB,KAAA,iBAAmB,EACnB,KAAA,QAAU,IAAI,EAAJ,QAAY,KAAK,iBAAkB,EAAU,GAEvD,KAAA,iBAAmB,EACnB,KAAA,kBAAoB,CACrB,IAAK,EAAiB,IACtB,IAAK,EAAiB,KAqD7B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAjDa,MAAA,SAAA,GACV,EAAG,YAAY,KAAK,SACpB,EAAG,eACC,KAAK,iBAAiB,EAAI,KAAK,GAAK,EACpC,KAAK,iBAAiB,EAAI,KAAK,GAAK,EACpC,KAAK,GACL,KAAK,GACL,UA0CP,CAAA,IAAA,kBAtCyB,IAAA,WACf,OAAA,KAAK,mBAqCf,CAAA,IAAA,SAlCgB,IAAA,WACN,OAAA,KAAK,kBAGE,IAAA,SAAA,GACT,KAAA,iBAAmB,IA6B3B,CAAA,IAAA,SA1BgB,IAAA,WACN,OAAA,IAAI,EAAJ,QACH,KAAK,iBAAiB,EAAI,KAAK,GAAK,EACpC,KAAK,iBAAiB,EAAI,KAAK,GAAK,EACpC,KAAK,GACL,KAAK,MAqBZ,CAAA,IAAA,eAjBsB,IAAA,WACZ,OAAA,KAAK,eAGQ,IAAA,SAAA,GACf,KAAA,cAAgB,IAYxB,CAAA,IAAA,YATmB,IAAA,WACT,OAAA,KAAK,oBAQf,CAAA,IAAA,sBAL6B,IAAA,WAEtB,OAAA,KAAK,iBAAiB,MAAQ,KAAK,kBAAkB,KACrD,KAAK,iBAAiB,MAAQ,KAAK,kBAAkB,QAE5D,EA/EgB,GA+EhB,QAAA,QAAA;;ACxCJ,aAnCK,SAAU,EAAQ,GAEf,IADD,IAAA,EAAY,EACP,EAAI,EAAU,OAAS,EAAG,EAAI,EAAG,IAAK,CACrC,IAAA,EAAI,KAAK,MAAM,KAAK,SAAW,GAE/B,EAAa,CACf,EAAG,EAAU,GAAG,OAAO,EACvB,EAAG,EAAU,GAAG,OAAO,EACvB,IAAK,EAAU,GAAG,UAAU,IAC5B,IAAK,EAAU,GAAG,UAAU,KAE1B,EAAa,CACf,EAAG,EAAU,GAAG,OAAO,EACvB,EAAG,EAAU,GAAG,OAAO,EACvB,IAAK,EAAU,GAAG,UAAU,IAC5B,IAAK,EAAU,GAAG,UAAU,KAShC,EAAU,GAAG,OAAO,EAAI,EAAW,EACnC,EAAU,GAAG,OAAO,EAAI,EAAW,EACnC,EAAU,GAAG,UAAU,IAAM,EAAW,IACxC,EAAU,GAAG,UAAU,IAAM,EAAW,IAExC,EAAU,GAAG,OAAO,EAAI,EAAW,EACnC,EAAU,GAAG,OAAO,EAAI,EAAW,EACnC,EAAU,GAAG,UAAU,IAAM,EAAW,IACxC,EAAU,GAAG,UAAU,IAAM,EAAW,IAErC,OAAA,EACV,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC7BA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,KAAA,EAAA,QAAA,KAAA,EAAA,QAAA,aAAA,EAfoB,IAAA,EAArB,SAAA,IAAA,EAAA,KAAA,GACI,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAcH,WAAA,IAbG,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAaH,WAAA,KAVK,SAAU,EAAS,EAAS,GACvB,OAAA,KAAK,IAAI,EAAE,EAAI,EAAE,EAAG,GAAK,KAAK,IAAI,EAAE,EAAI,EAAE,EAAG,GAGlD,SAAU,EAAK,EAAS,GACnB,OAAA,KAAK,KAAK,EAAS,EAAG,IAG3B,SAAU,EAAK,EAAS,GACnB,MAAA,CAAE,EAAG,EAAE,EAAI,EAAE,EAAG,EAAG,EAAE,EAAI,EAAE,GACrC,QAAA,QAAA;;ACqGI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApHL,IAAA,EAAA,QAAA,0BAoHK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/GgB,IAAA,EAAA,WAciB,SAAA,IAAA,IAAA,EAAA,KADtB,EAAgB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAChB,EAAsB,UAAA,OAAA,EAAA,UAAA,QAAA,EAAA,EAAA,KAAA,GAiGjC,OAAA,eAAA,KAAA,OAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAlGW,MAAA,IAkGX,OAAA,eAAA,KAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAjGW,MAAA,IAbZ,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAyB,MAAA,KACzB,OAAA,eAAA,KAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgC,MAAA,IAChC,OAAA,eAAA,KAAA,sBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAsC,MAAA,IActC,OAAA,eAAA,KAAA,WAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAkB,MAAA,SAAC,GACf,EAAK,OAAO,KAAK,MA6FpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SArFa,MAAA,SAAA,GACN,IAAA,EAAY,KAAK,cAAgB,EAEjC,GAAA,KAAK,eAAiB,KAAK,OAAO,OAAS,EAAG,CAC1C,IAAA,KAAK,KAOE,OADF,KAAA,YACE,KAAK,OAAO,KAAK,OAAO,OAAS,GANnC,KAAA,cAAgB,KAAK,OAAO,OAAS,EAC1C,EAAY,EAShB,IAAA,GAAoB,EACpB,EAAA,MAAA,KAAK,OAAO,KAAK,eACjB,KAAK,OAAO,IAOT,IAJF,KAAA,qBAAuB,EAIrB,KAAK,qBAAuB,GAc3B,GAbC,KAAA,qBAAuB,EAExB,KAAK,MACA,KAAA,eACA,KAAK,cAAgB,GAAK,KAAK,OAAO,OAE3C,EAC2B,IAAvB,KAAK,cAAsB,EAAI,KAAK,cAAgB,IAEnD,KAAA,gBACL,EAAY,KAAK,cAAgB,GAGjC,KAAK,eAAiB,KAAK,OAAO,OAAS,EAAG,CAC1C,IAAA,KAAK,KAME,OADF,KAAA,YACE,KAAK,OAAO,KAAK,OAAO,OAAS,GALxC,EAAY,EAUlB,IAAA,EAAI,KAAK,OAAO,KAAK,eACrB,EAAI,KAAK,OAAO,GAEtB,GAAoB,EAAK,EAAA,MAAA,EAAG,GAEtB,IAAA,GAAoB,EAAK,EAAA,MAAA,EAAG,GAE5B,EAAgB,KAAK,oBAAsB,EAE1C,MAAA,CACH,EAAG,EAAE,EAAI,EAAkB,EAAI,EAC/B,EAAG,EAAE,EAAI,EAAkB,EAAI,KAwBtC,CAAA,IAAA,gBApBgB,IAAA,WAGR,IAFD,IAAA,EAAS,EAEJ,EAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IAAK,CACnC,IAAA,EAAY,EAAI,EAClB,GAAA,GAAa,KAAK,OAAO,OAClB,OAAA,EAEX,IAAU,EAAS,EAAA,UAAA,KAAK,OAAO,GAAI,KAAK,OAAO,IAG5C,OAAA,IASV,CAAA,IAAA,SANS,IAAA,WACC,OAAA,KAAK,KAAK,KAAK,iBAKzB,CAAA,IAAA,iBAFiB,IAAA,WACP,OAAA,KAAK,OAAO,WACtB,EA/GgB,GA+GhB,QAAA,QAAA;;AC7FD,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,EAAA,QAAA,OAAA,QAAA,WAAA,EAvBS,IAAA,EAAb,SAAA,IAAA,EAAA,KAAA,GACI,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAsBA,WAAA,IArBA,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAqBA,WAAA,IApBA,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAoBA,WAAA,IAnBA,OAAA,eAAA,KAAA,IAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAY,MAAA,KAGV,SAAU,EACZ,EACA,EACA,GAEO,MAAA,CACH,GAAI,EAAK,EAAI,EAAG,GAAK,EACrB,GAAI,EAAK,EAAI,EAAG,GAAK,EACrB,GAAI,EAAK,EAAI,EAAG,GAAK,EACrB,GAAI,EAAK,EAAI,EAAG,GAAK,GAOzB,QAAA,MAAA,EAHS,IAAA,EAAA,SAAA,IAGT,EAAA,KAAA,IAAA,QAAA,OAAA,EAFA,OAAA,eAAA,EAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,CAAE,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,KAC1D,OAAA,eAAA,EAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,CAAE,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,KAC1D,OAAA,eAAA,EAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG;;AC0CnD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAhEL,IAAA,EAAA,QAAA,WAgEK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAnCQ,IAAA,EAAA,WASW,SAAA,EAAA,GAAY,IAAA,EAAA,KAAA,EAAA,KAAA,GA0B/B,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA1BmB,MAAA,IALpB,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA8B,MAAA,IAC9B,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA8BC,WAAA,IA7BD,OAAA,eAAA,KAAA,kBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA6BC,WAAA,IA5BD,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA0B,OAAA,IA8B1B,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GACgB,IAAA,EAAA,EAAK,MAA1B,EAAA,EAAA,MAAO,EAAA,EAAA,UACf,EAAK,OAAO,GAAK,EAAQ,EAAU,EAAI,EACvC,EAAK,OAAO,GAAK,EAAQ,EAAU,EAAI,EACvC,EAAK,aAAe,EAEpB,EAAK,YAAY,GAEjB,EAAK,MAAM,UAAoB,GAAR,KAG3B,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAsB,MAAA,SAAC,IAEd,EAAK,QACN,EAAK,aAAe,EAAK,MAAM,SAAW,EAAK,MAAM,iBAErD,EAAK,QAAS,EACd,EAAK,iBAAkB,EACnB,EAAA,uBAAA,EAAK,MACL,CAAE,EAAG,EAAK,MAAM,EAAG,EAAG,EAAK,MAAM,EAAG,EAAG,EAAK,MAAM,EAAG,EAAG,GACxD,EAAK,MAAM,iBAInB,EAAK,MAAM,GAAK,EAAK,gBAAgB,EAAI,EACzC,EAAK,MAAM,GAAK,EAAK,gBAAgB,EAAI,EACzC,EAAK,MAAM,GAAK,EAAK,gBAAgB,EAAI,EACzC,EAAK,MAAM,GAAK,EAAK,gBAAgB,EAAI,KAtDpC,KAAA,MAAQ,EAAM,UACd,KAAA,iBAAkB,EACnB,EAAA,uBAAA,EAAM,UACN,EAAM,QACN,EAAM,UAqBb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAlBQ,IAAA,WACE,OAAA,KAAK,aAAe,KAAK,MAAM,WAiBzC,CAAA,IAAA,SAdS,IAAA,WACC,OAAA,KAAK,MAAM,SAarB,CAAA,IAAA,WAVW,IAAA,WACD,OAAA,KAAK,MAAM,WASrB,CAAA,IAAA,OANO,IAAA,WACU,MAAA,OAAA,OAAA,KAAK,MAAM,EAAK,KAAA,OAAA,KAAK,MAAM,EAAK,KAAA,OAAA,KAAK,MAAM,EAAzD,OAKH,CAAA,IAAA,OAFO,IAAA,WACG,OAAA,KAAK,MAAM,SACrB,EAnCQ,GAmCR,QAAA,SAAA;;ACzDL,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAHA,IAGiB,EAHb,GAAuB,EACvB,EAAa,EAEjB,QAAA,OAAA,EAAA,SAAiB,GACG,SAAA,EAAa,EAAc,GACnC,IAAA,EAAK,EACL,EAAK,EAEL,EAAI,EAEJ,GAAA,EAEO,OADP,GAAc,EACP,EAAO,EAAK,EAGvB,GAAc,EAEX,GAGC,GAFA,EAAK,EAAI,KAAK,SAAW,GAEhB,GADT,EAAK,EAAI,KAAK,SAAW,GACN,QACd,GAAK,GAMP,OAJP,EAAI,KAAK,MAAO,EAAI,KAAK,IAAI,GAAM,GAEnC,EAAK,EAAK,EAEH,EAHF,EAAK,EAGS,EAvBP,EAAA,aAAY,EA0BZ,EAAA,UAAA,SAAU,EAAa,GAC/B,IAAA,EAAQ,EAAM,EACX,OAAA,KAAK,MAAM,KAAK,SAAW,EAAQ,IAG9B,EAAA,iBAAA,WACR,IAAA,EAAwB,EAAhB,KAAK,SAAe,KAAK,GAC9B,MAAA,CACH,EAAG,KAAK,IAAI,GACZ,EAAG,KAAK,IAAI,KAIJ,EAAA,gBAAA,WAAgB,IAAA,EAAmB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAI,KAAK,GACpD,EAAQ,KAAK,SAAW,EACrB,MAAA,CACH,EAAG,KAAK,IAAI,GACZ,EAAG,KAAK,IAAI,KAIJ,EAAA,gBAAA,SACZ,GACA,IAAA,EAAsB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAAK,GAAK,EAE1B,EAAiB,EAAc,EAG/B,EAAQ,EAAc,GADxB,EAAa,EAAgB,EAAc,GAAK,GAE7C,MAAA,CACH,EAAG,KAAK,IAAI,GACZ,EAAG,KAAK,IAAI,KA1DxB,CAAiB,IAAA,QAAA,OAAA,EAAM;;ACiJlB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAzJL,IAAA,EAAA,QAAA,wBAEA,EAAA,QAAA,kBAuJK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA1IQ,IAAA,EAAA,WAAb,SAAA,IAAA,IAAA,EAAA,KAAA,EAAA,KAAA,GACI,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiC,MAAA,KAEjC,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GACR,IAAA,IAAI,EAAI,EAAK,WAAW,OAAS,EAAG,GAAK,EAAG,IAC7C,EAAK,WAAW,GAAG,OAAO,GAErB,EAAK,WAAW,GAAG,OACpB,EAAK,WAAW,OAAO,EAAG,MAyFtC,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,EAAc,EAAY,GAElC,IAAA,IAAI,EAAW,EAAG,EAAW,IAAM,IAAY,CAC1C,IAAA,EAAO,KAAK,IACd,EAAO,OAAA,aAAa,EAAM,KAAK,KAAM,EAAM,KAAK,QAG9C,EAAQ,KAAK,IACf,EAAO,OAAA,aAAa,EAAM,MAAM,KAAM,EAAM,MAAM,QAGhD,EAAI,IAAI,EAAJ,SAAa,CACnB,OAAQ,CAAE,EAAG,EAAO,EAAG,EAAG,EAAO,GACjC,KAAM,CAAE,EAAG,EAAM,EAAG,GACpB,SAAU,EACV,MAAA,EACA,UAAW,EAAO,OAAA,mBAClB,SAAU,EAAO,OAAA,aACb,EAAM,SAAS,KACf,EAAM,SAAS,OAEnB,UAAW,CACP,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,GAEvB,QAAS,CACL,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,GAErB,eAAgB,MAEpB,EAAK,WAAW,KAAK,OAM5B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAvHiB,MAAA,SAAA,EAAc,EAAmB,GAE1C,IAAA,IAAI,EAAW,EAAG,EAAW,EAAG,IAAY,CACvC,IAAA,EAAO,KAAK,IACd,EAAO,OAAA,aAAa,EAAM,KAAK,KAAM,EAAM,KAAK,QAG9C,EAAQ,KAAK,IACf,EAAO,OAAA,aAAa,EAAM,MAAM,KAAM,EAAM,MAAM,QAGhD,EAAI,IAAI,EAAJ,SAAa,CACnB,OAAQ,EACR,KAAM,CAAE,EAAG,EAAM,EAAG,GACpB,SAAU,EACV,MAAA,EACA,UAAW,EAAO,OAAA,gBAAgB,GAClC,SAAU,EAAO,OAAA,aACb,EAAM,SAAS,KACf,EAAM,SAAS,OAEnB,UAAW,CACP,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,GAEvB,QAAS,CACL,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,GAErB,eAAgB,KAEf,KAAA,WAAW,KAAK,MAoF5B,CAAA,IAAA,YAhFgB,MAAA,SAAA,EAAc,GAEtB,IAAA,IAAI,EAAW,EAAG,EAAW,IAAM,IAAY,CAC1C,IAAA,EAAO,KAAK,IACd,EAAO,OAAA,aAAa,EAAM,KAAK,KAAM,EAAM,KAAK,QAG9C,EAAQ,KAAK,IACf,EAAO,OAAA,aAAa,EAAM,MAAM,KAAM,EAAM,MAAM,QAGhD,EAAI,IAAI,EAAJ,SAAa,CACnB,OAAQ,CAAE,EAAG,EAAO,EAAG,EAAG,EAAO,GACjC,KAAM,CAAE,EAAG,EAAM,EAAG,GACpB,SAAU,EACV,MAAA,EACA,UAAW,EAAO,OAAA,mBAClB,SAAU,EAAO,OAAA,aACb,EAAM,SAAS,KACf,EAAM,SAAS,OAEnB,UAAW,CACP,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,EACnB,EAAG,EAAM,UAAU,GAEvB,QAAS,CACL,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,EACjB,EAAG,EAAM,QAAQ,GAErB,eAAgB,MAEf,KAAA,WAAW,KAAK,MA6C5B,CAAA,IAAA,YAFY,IAAA,WACF,OAAA,KAAK,eACf,EA1IQ,GA0IR,QAAA,eAAA;;ACtJE,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,4BAAA,EAAA,IAAM,EAAyB,SAAC,GAAmC,OAAA,SACtE,GAGK,IADG,IAAA,EAAc,EAAd,UACC,EAAI,EAAU,OAAS,EAAG,GAAK,EAAG,IAAK,CACH,IAAA,EAAA,EAAU,GAA3C,EAAA,EAAA,OAAQ,EAAA,EAAA,SAAU,EAAA,EAAA,KAAM,EAAA,EAAA,KAChC,EAAG,cAAc,EAAO,EAAG,EAAO,EAAG,EAAK,EAAG,EAAK,EAAG,EAAU,MANhE,QAAA,uBAAA;;ACwFF,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1FL,IAAA,EAAA,EAAA,QAAA,kCACA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,wCAGA,EAAA,EAAA,QAAA,mBACA,EAAA,QAAA,qBAGA,EAAA,EAAA,QAAA,mBACA,EAAA,QAAA,oCACA,EAAA,QAAA,8CA+EK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA7EL,IAAM,EAAc,KAEC,EAAA,WAqCY,SAAA,EAAA,GAAsB,IAAA,EAAA,KAAA,EAAA,KAAA,GAsClD,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAtC4B,MAAA,IApC7B,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA8B,MAAA,IAC9B,OAAA,eAAA,KAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgC,MAAA,IAChC,OAAA,eAAA,KAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA8C,MAAA,SAE9C,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA8B,OAAA,IAC9B,OAAA,eAAA,KAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAqEC,WAAA,IApED,OAAA,eAAA,KAAA,kBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAoEC,WAAA,IAnED,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAmEC,WAAA,IAlED,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAkEC,WAAA,IAhED,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAyB,MAAA,IAAI,EAAJ,iBACzB,OAAA,eAAA,KAAA,yBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA+DC,WAAA,IA7DD,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EA6DC,WAAA,IA5DD,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAkC,MAAA,MAClC,OAAA,eAAA,KAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAwC,MAAA,MACxC,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiC,MAAA,KAAK,OAAS,KAAK,eAEpD,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAwB,MAAA,KACxB,OAAA,eAAA,KAAA,oBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoC,OAAC,IACrC,OAAA,eAAA,KAAA,kBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgE,MAAA,KAEhE,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAoDC,WAAA,IAnDD,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAmDC,WAAA,IAjDD,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA4C,MAAA,IAAI,EAAJ,UAC5C,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAmC,MAAA,IAAI,EAAJ,cAEnC,OAAA,eAAA,KAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuB,MAAA,CACnB,KAAM,CAAE,KAAM,EAAG,MAAO,KACxB,MAAO,CAAE,KAAM,IAAM,MAAO,KAC5B,SAAU,CAAE,KAAM,IAAM,MAAO,KAC/B,UAAW,CAAE,EAAG,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,GACtC,QAAS,CAAE,EAAG,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,MAKxC,OAAA,eAAA,KAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAe,MAAA,WACX,EAAK,YAAY,iBAEjB,EAAK,cACL,EAAK,aAEL,EAAK,eAAiB,EAAK,WAC3B,EAAK,eAAiB,EAAK,WAE3B,EAAK,eAAiB,IAAI,EAAJ,eAEtB,EAAK,wBAAyB,EAC1B,EAAA,wBAAA,EAAK,mBAYb,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GACb,EAAK,eAAe,MAGxB,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACb,EAAK,YAAY,UACjB,EAAK,YAAY,aAQrB,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAqB,MAAA,SAAC,GAClB,EAAG,QAGH,EAAK,gBAAgB,GACrB,EAAK,UAAU,GACf,EAAK,aAAa,GAClB,EAAK,uBAAuB,MAGhC,OAAA,eAAA,KAAA,iBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAyB,MAAA,SAAC,GAGtB,EAAG,cAAc,EAAG,EAAG,KAAM,KAAM,EAAG,WAG1C,OAAA,eAAA,KAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoB,MAAA,SAAC,GACZ,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IACnC,EAAK,MAAM,GAAG,OAAO,MAI7B,OAAA,eAAA,KAAA,kBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA0B,MAAA,SAAC,GACvB,EAAG,SAAS,CAAE,EAAG,IAAK,EAAG,KAAgB,SAAA,OAAA,EAAK,iBAGlD,OAAA,eAAA,KAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuB,MAAA,SAAC,GACpB,EAAG,SAAS,CAAE,EAAG,IAAK,EAAG,KAAqB,cAAA,OAAA,EAAK,mBAGvD,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAqB,MAAA,SAAC,GAElB,EAAK,YAAY,OAAO,MAG5B,OAAA,eAAA,KAAA,SAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAgB,MAAA,SAAC,GAKT,GAJJ,EAAK,eAAe,GAEpB,EAAK,eAAe,OAAO,GAEtB,EAAK,WAKH,CACG,IAAA,EAAS,EAAK,MAAQ,EACtB,EAAS,EAAK,WAAW,OAAO,GACtC,EAAK,MAAM,EAAK,iBAAiB,OAAO,EAAI,EAAO,EACnD,EAAK,MAAM,EAAK,iBAAiB,OAAO,EAAI,EAAO,OARnD,EAAK,mBAAmB,MAYhC,OAAA,eAAA,KAAA,aAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoB,MAAA,SAAC,GAEjB,EAAK,kBAAkB,EAAI,QAG/B,OAAA,eAAA,KAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,SAAC,GACtB,EAAK,mBAAqB,IAC1B,EAAK,mBAAmB,EAAK,mBAC7B,EAAK,mBAAqB,MAIlC,OAAA,eAAA,KAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA6B,MAAA,SAAC,GAEL,IAAA,EAAA,EAAK,MAAM,GAAW,UAAnC,EAAA,EAAA,IAAK,EAAA,EAAA,IAEP,EAAe,EAAK,oBAGtB,GAAA,EAAM,GAAK,IAAM,EAAK,gBAAgB,GAAK,EAAM,GAAG,OAAQ,CAE3C,IAAA,EAAA,EAAK,gBAAgB,GAAK,EAAM,GAAG,MAA5C,EAAA,EAAA,EAAG,EAAA,EAAA,EAoBX,OAjBA,EAAK,cACD,EACA,EACA,EACA,EAAK,MAAM,GAAW,OAAO,EAC7B,EAAK,MAAM,GAAW,OAAO,GAEjC,EAAK,MAAM,GAAW,UAAU,KAAO,EAEvC,EAAK,gBAAgB,GAAK,GAAK,QAAS,EACxC,EAAK,gBAAgB,GAAK,EAAM,GAAG,QAAS,EAE5C,EAAK,MAAM,GAAW,WAAY,OAClC,EAAK,eAAiB,GAQtB,GAAA,EAAM,EAAI,IACT,EAAK,gBAAgB,EAAM,GAAG,GAAK,OACtC,CAEmB,IAAA,EAAA,EAAK,gBAAgB,EAAM,GAAG,GAAK,MAA5C,EAAA,EAAA,EAAG,EAAA,EAAA,EAkBX,OAfA,EAAK,cACD,EACA,EACA,EACA,EAAK,MAAM,GAAW,OAAO,EAC7B,EAAK,MAAM,GAAW,OAAO,GAEjC,EAAK,MAAM,GAAW,UAAU,KAAO,EAEvC,EAAK,gBAAgB,GAAK,GAAK,QAAS,EACxC,EAAK,gBAAgB,EAAM,GAAG,GAAK,QAAS,EAE5C,EAAK,MAAM,GAAW,WAAY,OAClC,EAAK,eAAiB,GAMtB,GAAA,EAAM,EAAI,IACT,EAAK,gBAAgB,GAAK,EAAM,GAAG,OACtC,CAEmB,IAAA,EAAA,EAAK,gBAAgB,GAAK,EAAM,GAAG,MAA5C,EAAA,EAAA,EAAG,EAAA,EAAA,EAkBX,OAfA,EAAK,cACD,EACA,EACA,EACA,EAAK,MAAM,GAAW,OAAO,EAC7B,EAAK,MAAM,GAAW,OAAO,GAEjC,EAAK,MAAM,GAAW,UAAU,KAAO,EAEvC,EAAK,gBAAgB,GAAK,GAAK,QAAS,EACxC,EAAK,gBAAgB,GAAK,EAAM,GAAG,QAAS,EAE5C,EAAK,MAAM,GAAW,WAAY,OAClC,EAAK,eAAiB,GAKtB,GAAA,EAAM,GAAK,IAAM,EAAK,gBAAgB,EAAM,GAAG,GAAK,OAAQ,CAE3C,IAAA,EAAA,EAAK,gBAAgB,EAAM,GAAG,GAAK,MAA5C,EAAA,EAAA,EAAG,EAAA,EAAA,EAmBX,OAhBA,EAAK,cACD,EACA,EACA,EACA,EAAK,MAAM,GAAW,OAAO,EAC7B,EAAK,MAAM,GAAW,OAAO,GAGjC,EAAK,MAAM,GAAW,UAAU,KAAO,EAEvC,EAAK,gBAAgB,GAAK,GAAK,QAAS,EACxC,EAAK,gBAAgB,EAAM,GAAG,GAAK,QAAS,EAE5C,EAAK,MAAM,GAAW,WAAY,OAClC,EAAK,eAAiB,GAK1B,QAAQ,IAAI,kBAGhB,OAAA,eAAA,KAAA,gBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAwB,MAAA,SACpB,EACA,EACA,EACA,EACA,GAEA,EAAK,YAAa,EAElB,EAAK,gBAAkB,EACvB,EAAK,WAAa,IAAI,EAAJ,SAAS,EAAO,WAC9B,EAAK,YAAa,EAEd,EAAK,MAAM,EAAK,iBAAiB,qBACjC,EAAK,MAAM,EAAK,iBAAiB,YAEjC,EAAK,MAAM,EAAK,iBAAiB,WAAY,EAE7C,QAAQ,IAAI,oBACZ,EAAK,eAAe,OAChB,EAAK,MAAM,EAAK,iBAAiB,OACjC,IACA,EAAK,eAIT,EAAK,MAAM,MAAM,SAAA,GAAK,OAAA,EAAE,uBAExB,EAAK,YAAY,SAAS,IAAM,EAAG,WAC/B,EAAK,cAKjB,EAAK,WAAW,SAAS,CAAE,EAAG,EAAQ,EAAG,IACzC,EAAK,WAAW,SAAS,CAAE,EAAG,EAAK,EAAG,OAO1C,OAAA,eAAA,KAAA,oBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA4B,MAAA,SAAC,GACpB,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IAC/B,GAAA,EAAK,MAAM,GAAG,OAAO,SAAS,GAAM,CACpC,EAAK,kBAAoB,EACzB,UAKZ,OAAA,eAAA,KAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAkB,MAAA,WACd,EAAK,YAAY,iBAIb,IAAA,EAAW,OAAO,gBAAiB,WAElC,IACD,EAAW,WAEf,EAAW,EAAS,OAAO,EAAG,IAGb,EAAA,QAAA,SACb,EACA,EAAK,YACL,EAAK,cACL,EAAK,eAGT,EAAK,gBAGT,OAAA,eAAA,KAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAsB,MAAA,WAClB,EAAK,MAAM,OAAS,EACpB,EAAK,gBAAgB,OAAS,EAazB,IAXC,IAAA,EAA0C,SAAvB,EAAK,cAA2B,IAAM,GACzD,EAAoB,EACpB,EAAe,EAAK,oBACpB,GACD,KAAO,EAAoB,GAAgB,EAC5C,EAAoB,EAClB,EACC,EADD,EAEC,EAGE,EAAM,EAAG,EAAM,EAAc,IAAO,CACzC,EAAK,gBAAgB,KAAK,IACrB,IAAA,IAAI,EAAM,EAAG,EAAM,EAAc,IAClC,EAAK,gBAAgB,GAAK,KAAK,CAC3B,QAAQ,EACR,MAAO,CACH,EAAG,EAAkB,EAAM,EAC3B,EAAG,EAAkB,EAAM,KAM3C,EAAK,gBAAgB,EAAe,GAAG,EAAe,GAAG,QAAS,EAM7D,IAHD,IAAA,EAAO,GAEP,EAAe,EACV,EAAM,EAAG,EAAM,EAAc,IAC7B,IAAA,IAAI,EAAM,EAAG,EAAM,GAChB,IAAiB,EAAe,EAAe,EADjB,IAIlC,EAAK,KACD,IAAI,EAAJ,QACI,CACI,EAAG,EAAkB,EAAM,EAC3B,EAAG,EAAkB,EAAM,GAEf,gBAAA,OAAA,EAAoB,KAAA,OAAA,EACpC,QAAA,EACA,CAAE,IAAA,EAAK,IAAA,KAGf,IAIR,EAAK,OAAQ,EAAQ,EAAA,SAAA,MAUzB,OAAA,eAAA,KAAA,gCAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAwC,MAAA,WAC/B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IAC/B,EAAK,MAAM,GAAG,qBAAuB,EAAK,MAAM,GAAG,YACnD,EAAK,MAAM,GAAG,WAAY,EAE1B,QAAQ,IAAI,oBACZ,EAAK,eAAe,OAChB,EAAK,MAAM,GAAG,OACd,IACA,EAAK,kBArUpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,oBAwNwB,MAAA,WACd,MAAuB,SAAvB,KAAK,cAA2B,EAAI,IAzN9C,CAAA,IAAA,aAqTiB,MAAA,WAAA,IAAA,EAAA,KACT,KAAA,YAAc,EACd,KAAA,YAAY,SAAS,IAAM,EAAA,EAAU,WACtC,EAAK,aAAe,MAxT3B,CAAA,IAAA,aAHqB,IAAA,SAAA,GACb,KAAA,cAAgB,EACrB,QAAQ,IAAI,gCAAiC,OAChD,EA3EgB,GA2EhB,QAAA,QAAA;;ACnFiC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EARtC,IAAA,EAAA,QAAA,sCACA,EAAA,EAAA,QAAA,0BACA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,sCACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,gBAGsC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAjB,IAAA,EAAA,SAAA,GAAiB,EAAA,EAAA,EAAA,SAAA,IAAA,EAAA,EAAA,GAUtB,SAAA,EAAA,GAAyB,IAAA,EAAA,OAAA,EAAA,KAAA,GAC3B,EAAA,EAAA,KAAA,KAAA,EAAQ,EAAd,gBAVJ,OAAA,eAAA,EAAA,GAAA,QAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EADkC,WAAA,IAElC,OAAA,eAAA,EAAA,GAAA,qBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAFkC,WAAA,IAGlC,OAAA,eAAA,EAAA,GAAA,oBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAHkC,WAAA,IAKlC,OAAA,eAAA,EAAA,GAAA,OAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EALkC,WAAA,IAMlC,OAAA,eAAA,EAAA,GAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EANkC,WAAA,IAQlC,OAAA,eAAA,EAAA,GAAA,cAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA4C,MAAA,IAAI,EAAJ,cAiB5C,OAAA,eAAA,EAAA,GAAA,YAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAoB,MAAA,WACX,EAAA,MAAM,mBACN,EAAA,oBAEA,EAAA,qBAAuB,WACnB,EAAA,MAAM,WAGV,EAAA,mBAAqB,EAAK,KAAK,WAC/B,EAAA,eAAiB,EAAK,KAAK,UAGpC,OAAA,eAAA,EAAA,GAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAuB,MAAA,SAAC,GACf,EAAA,MAAM,mBACN,EAAA,oBAEA,EAAA,qBAAuB,WACnB,EAAA,MAAM,WAGV,EAAA,eAAiB,EAAK,UAAU,OAChC,EAAA,eAAiB,EAAK,UAAU,OAChC,EAAA,mBAAqB,EAAK,UAAU,WAEpC,EAAA,UAAU,WAAa,EAGvB,EAAA,UAAU,WAGnB,OAAA,eAAA,EAAA,GAAA,oBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA4B,MAAA,WACnB,EAAA,qBACA,EAAA,mBAAqB,aACrB,EAAA,kBAAoB,gBAG7B,OAAA,eAAA,EAAA,GAAA,mBAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAA2B,MAAA,WAClB,EAAA,MAAM,SAAS,QAAS,SAAC,GACrB,EAAA,mBAAmB,KAGvB,EAAA,MAAM,SAAS,YAAa,SAAC,GACzB,EAAA,kBAAkB,QAI/B,OAAA,eAAA,EAAA,GAAA,UAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAiB,MAAA,WACR,EAAA,MAAM,UACN,EAAA,YAAY,aA5DZ,EAAA,KAAO,IAAI,EAAJ,QAAS,EAAK,cACrB,EAAA,UAAY,IAAI,EAAJ,QAAc,EAAK,WAE/B,EAAA,MAAQ,IAAI,EAAJ,QAAU,GAClB,EAAA,mBAP4B,EAVH,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAoBvB,MAAA,WACF,KAAA,YACA,KAAA,YAtByB,EAAjB,GAAiB,QAAA,QAAA;;ACQtC,aAhBA,IAAA,EAAA,EAAA,QAAA,oBAgBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAdA,IAAM,EAAS,SAAS,eAAe,eAEjC,EAAW,IAAI,EAAJ,QAAa,GAC9B,EAAS,OAET,IAAM,EAAe,SAAC,GACkB,IAAA,EAAA,EAAG,OAA/B,EAAA,EAAA,WAAY,EAAA,EAAA,YAEd,GAAW,KAAK,IAAI,EAAY,GAAe,IAAI,WACzD,EAAO,MAAM,MAAQ,EACrB,EAAO,MAAM,OAAS,GAG1B,OAAO,iBAAiB,SAAU,GAClC,EAAa,CAAE,OAAQ","file":"src.7850e9b1.js","sourceRoot":"..","sourcesContent":["import Vec2 from '../Math/Vec2';\r\nimport { Texture } from '../Graphics/Texture';\r\nimport { SpriteSheet } from '../Graphics/SpriteSheet';\r\n\r\ntype Point = { x: number; y: number };\r\n\r\n/**\r\n * Renders things to a 2D HTML Canvas\r\n */\r\nexport class CanvasRenderer {\r\n    private context: CanvasRenderingContext2D;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.context = canvas.getContext('2d');\r\n    }\r\n\r\n    public get middleX() {\r\n        return this.width / 2;\r\n    }\r\n\r\n    public get width() {\r\n        return this.context.canvas.width;\r\n    }\r\n\r\n    public clear() {\r\n        const { width, height } = this.context.canvas;\r\n\r\n        this.context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    public drawStrokeRect(\r\n        x: number,\r\n        y: number,\r\n        w: number,\r\n        h: number,\r\n        style: string,\r\n    ) {\r\n        this.context.strokeStyle = style;\r\n        this.context.lineWidth = 3;\r\n\r\n        this.context.save();\r\n\r\n        this.context.strokeRect(x, y, w, h);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawRectangle(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        rotation: number,\r\n        fillStyle?: string | CanvasGradient,\r\n    ) {\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.lineWidth = 5;\r\n\r\n        this.context.save();\r\n        this.context.translate(x, y);\r\n        this.context.rotate(rotation);\r\n        this.context.translate(-x, -y);\r\n\r\n        this.context.fillRect(x, y, width, height);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawText(\r\n        pos: Vec2,\r\n        text: string,\r\n        rotation: number = 0,\r\n        center: boolean = false,\r\n        fillStyle: string = '#000',\r\n        font: string = '64px arial',\r\n    ) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const width = this.context.measureText(text).width;\r\n        this.context.restore();\r\n\r\n        this.context.save();\r\n        this.context.font = font;\r\n        let height = this.context.measureText('m').width;\r\n        this.context.restore();\r\n\r\n        this.context.save();\r\n        this.context.font = font;\r\n\r\n        this.context.fillStyle = fillStyle;\r\n\r\n        const x = center ? pos.x - width / 2 : pos.x;\r\n        const y = center ? pos.y - width / 2 : pos.y;\r\n\r\n        this.context.textBaseline = 'top';\r\n        this.context.translate(x + width / 2, y + height / 2);\r\n        this.context.rotate(rotation);\r\n        this.context.translate(-(x + width / 2), -(y + height / 2));\r\n\r\n        this.context.fillText(text, x, pos.y);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawPoints(\r\n        points: Point[],\r\n        strokeStyle: string,\r\n        fillStyle: string,\r\n        closePath: boolean = false,\r\n    ) {\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = strokeStyle;\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.lineWidth = 3;\r\n\r\n        this.context.moveTo(points[0].x, points[0].y);\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n            this.context.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        if (closePath) {\r\n            this.context.closePath();\r\n        }\r\n        this.context.fill();\r\n        this.context.stroke();\r\n    }\r\n\r\n    public getTextWidth(text: string, font: string) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const width = this.context.measureText(text).width;\r\n        this.context.restore();\r\n        return width;\r\n    }\r\n\r\n    public getFontHeight(font: string) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const height = this.context.measureText('m').width;\r\n        this.context.restore();\r\n        return height;\r\n    }\r\n\r\n    public drawTexture(texture: Texture) {\r\n        if (texture.ready) {\r\n            this.context.save();\r\n            this.context.translate(texture.center.x, texture.center.y);\r\n            this.context.rotate(texture.rotation);\r\n            this.context.translate(-texture.center.x, -texture.center.y);\r\n            this.context.drawImage(\r\n                texture.image,\r\n                texture.center.x - texture.width / 2,\r\n                texture.center.y - texture.height / 2,\r\n                texture.width,\r\n                texture.height,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the texure from the bounds stored in the key.\r\n     * @param spriteSheet Sprite sheet to pull dat from\r\n     * @param key Key to get bounds\r\n     * @param center Center of the texture\r\n     * @param rotation Angle of the texture in radians\r\n     * @param size Size of one side of the texture\r\n     */\r\n    public drawSubTexture(\r\n        spriteSheet: SpriteSheet,\r\n        key: string,\r\n        center: Vec2,\r\n        rotation: number,\r\n        dims: { w: number; h: number },\r\n    ) {\r\n        if (spriteSheet.ready) {\r\n            const bounds = spriteSheet.getBounds(key);\r\n\r\n            this.context.save();\r\n            this.context.translate(center.x, center.y);\r\n            this.context.rotate(rotation);\r\n            this.context.translate(-center.x, -center.y);\r\n            this.context.drawImage(\r\n                spriteSheet.image,\r\n                bounds.x,\r\n                bounds.y,\r\n                bounds.w,\r\n                bounds.h,\r\n                center.x - dims.w / 2,\r\n                center.y - dims.h / 2,\r\n                dims.w,\r\n                dims.h,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    public createGradient(pt1: Vec2, pt2: Vec2) {\r\n        return this.context.createLinearGradient(pt1.x, pt1.y, pt2.x, pt2.y);\r\n    }\r\n}\r\n","import Dictionary from '../Interfaces/Dictionary';\r\n\r\n/**\r\n * Mouse event for the game. Holds the native event, along with the positing of it in the HTML element.\r\n */\r\nexport type GameMouseEvent = { ev: MouseEvent; pos: Vec2 };\r\ntype Command = (gameMouseEvent: GameMouseEvent) => void;\r\ntype Vec2 = { x: number; y: number };\r\ntype SupportedEventTypes = 'click' | 'mousemove';\r\n\r\nexport default class Mouse {\r\n    private _handlers: Dictionary<Command[]> = {};\r\n    private _inputBuffer: Dictionary<MouseEvent> = {};\r\n\r\n    constructor(private htmlElement: HTMLElement) {\r\n        this._addEventListeners();\r\n    }\r\n\r\n    public destroy(): void {\r\n        this._removeEventListeners();\r\n\r\n        this._handlers = {};\r\n    }\r\n\r\n    public resetHandlers(): void {\r\n        this._handlers = {};\r\n    }\r\n\r\n    public clearInputBuffer(): void {\r\n        this._inputBuffer = {};\r\n    }\r\n\r\n    public register(eventName: SupportedEventTypes, handler: Command) {\r\n        if (!this._handlers[eventName]) {\r\n            this._handlers[eventName] = [];\r\n        }\r\n        this._handlers[eventName].push(handler);\r\n    }\r\n\r\n    public process = () => {\r\n        for (const key in this._inputBuffer) {\r\n            if (this._inputBuffer.hasOwnProperty(key)) {\r\n                for (\r\n                    let i = 0;\r\n                    this._handlers[key] && i < this._handlers[key].length;\r\n                    i++\r\n                ) {\r\n                    const ev = this._inputBuffer[key];\r\n                    this._handlers[key][i]({\r\n                        ev,\r\n                        pos: this.getPos(ev),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this._inputBuffer = {};\r\n    };\r\n\r\n    private _addEventListeners = () => {\r\n        this.htmlElement.addEventListener('click', this._handleInput);\r\n        this.htmlElement.addEventListener('mousemove', this._handleInput);\r\n    };\r\n\r\n    private _removeEventListeners = () => {\r\n        this.htmlElement.removeEventListener('click', this._handleInput);\r\n        this.htmlElement.removeEventListener('mousemove', this._handleInput);\r\n    };\r\n\r\n    private _handleInput = (ev: MouseEvent) => {\r\n        if (ev.type === 'click' || ev.type === 'mousemove') {\r\n            this._inputBuffer[ev.type] = ev;\r\n        }\r\n    };\r\n\r\n    private getPos(event: MouseEvent): Vec2 {\r\n        const rect = this.htmlElement.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        const ratioX = 1024 / rect.width;\r\n        const ratioY = 1024 / rect.height;\r\n        return { x: x * ratioX, y: y * ratioY };\r\n    }\r\n}\r\n","export class GameAudio {\r\n    private elapsedTime: number = 0;\r\n\r\n    private audioEl: HTMLAudioElement;\r\n\r\n    constructor(\r\n        private source: string,\r\n        private delay: number = 0,\r\n        private loop: boolean = false,\r\n        private volume: number = 1,\r\n        private callback: () => void,\r\n    ) {}\r\n\r\n    public update = (elapsedTime: number) => {\r\n        if (this.audioEl) {\r\n            return;\r\n        }\r\n\r\n        this.elapsedTime += elapsedTime;\r\n        if (this.elapsedTime >= this.delay) {\r\n            this.audioEl = new Audio(this.source);\r\n            this.audioEl.volume = this.volume;\r\n            this.audioEl.play().then(this.callback);\r\n        }\r\n    };\r\n\r\n    public pause = () => {\r\n        if (this.audioEl) {\r\n            this.audioEl.pause();\r\n        }\r\n    };\r\n\r\n    public play = () => {\r\n        if (this.audioEl) {\r\n            this.audioEl.play();\r\n        }\r\n    };\r\n\r\n    get done() {\r\n        return this.audioEl && this.audioEl.played && !this.loop;\r\n    }\r\n\r\n    public destory = () => {\r\n        this.audioEl.pause();\r\n    };\r\n}\r\n","import { IUpdateable } from '../Interfaces/IUpdateable';\r\nimport { GameAudio } from '../Audio/Audio';\r\n\r\nexport class AudioSystem implements IUpdateable {\r\n    private audio: GameAudio[] = [];\r\n    public addAudio = (\r\n        source: string,\r\n        delay: number = 0,\r\n        loop: boolean = false,\r\n        volume: number = 1,\r\n        callback?: () => void,\r\n    ) => {\r\n        this.audio.push(new GameAudio(source, delay, loop, volume, callback));\r\n    };\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = this.audio.length - 1; i >= 0; i--) {\r\n            this.audio[i].update(elapsedTime);\r\n\r\n            if (this.audio[i].done) {\r\n                this.audio.splice(i, 1);\r\n                continue;\r\n            }\r\n            this.audio[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public clearAllSounds = () => {\r\n        for (let i = 0; i < this.audio.length; i++) {\r\n            this.audio[i].pause();\r\n        }\r\n        this.audio.length = 0;\r\n    };\r\n\r\n    public destroy = () => {\r\n        for (let i = 0; i < this.audio.length; i++) {\r\n            this.audio[i].destory();\r\n        }\r\n        this.audio.length = 0;\r\n    };\r\n}\r\n","/**\r\n * Base class for a game loop.\r\n */\r\nexport default class GameLoop<RendererType> {\r\n    private previousTimeStamp: number = 0;\r\n    private cr: RendererType;\r\n    protected isGameOver: boolean = false;\r\n\r\n    /**\r\n     * Will be called every game loop. You should put mouse or keyboard processes here.\r\n     */\r\n    protected internalProcessInput: (elapsedTime: number) => void;\r\n    /**\r\n     * Will be called every game loop. Should set this to what you need.\r\n     */\r\n    protected internalUpdate: (elapsedTime: number) => void;\r\n    /**\r\n     * Will be called every game loop. Depending on the templated RenderType you will need to use that.\r\n     */\r\n    protected internalRender: (cr: RendererType) => void;\r\n\r\n    constructor(\r\n        canvas: HTMLCanvasElement,\r\n        RenderCreator: new (...args: any[]) => RendererType,\r\n    ) {\r\n        this.cr = new RenderCreator(canvas);\r\n    }\r\n\r\n    /**\r\n     * Starts the game loop.\r\n     */\r\n    protected start = () => {\r\n        this.previousTimeStamp = performance.now();\r\n        requestAnimationFrame(this.gameLoop);\r\n    };\r\n\r\n    /**\r\n     * Clears the internals for process input, update, and render.\r\n     */\r\n    protected clearBaseInternals = () => {\r\n        this.internalProcessInput = () => {};\r\n        this.internalRender = () => {};\r\n        this.internalUpdate = () => {};\r\n    };\r\n\r\n    private gameLoop = (timeStamp: number) => {\r\n        const elapsedTime = timeStamp - this.previousTimeStamp;\r\n        this.previousTimeStamp = timeStamp;\r\n\r\n        this.processInput(elapsedTime);\r\n        this.update(elapsedTime);\r\n        this.render();\r\n\r\n        if (!this.isGameOver) {\r\n            requestAnimationFrame(this.gameLoop);\r\n        }\r\n    };\r\n\r\n    private processInput = (elapsedTime: number) => {\r\n        this.internalProcessInput(elapsedTime);\r\n    };\r\n\r\n    private update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n    };\r\n\r\n    private render = () => {\r\n        this.internalRender(this.cr);\r\n    };\r\n}\r\n","import Vec2 from '../Math/Vec2';\r\n\r\nexport default class Rectangle {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public w: number,\r\n        public h: number,\r\n    ) {}\r\n\r\n    public inBounds(pos: Vec2) {\r\n        return (\r\n            pos.x >= this.x &&\r\n            pos.x <= this.x + this.w &&\r\n            pos.y >= this.y &&\r\n            pos.y <= this.y + this.h\r\n        );\r\n    }\r\n}\r\n","import Button from '../UI/Button';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nconst ButtonRenderer = (button: Button) => (cr: CanvasRenderer) => {\r\n    const { x, y, w, h } = button.bounds;\r\n\r\n    cr.drawRectangle(x, y, w, h, 0, button.style?.fill ?? '#000');\r\n\r\n    const { content, font } = button.text;\r\n\r\n    // Center text withing the rectangle.\r\n    const textWidth = cr.getTextWidth(content, font);\r\n    const textHeight = cr.getFontHeight(font);\r\n\r\n    const textXOff = (textWidth - w) / 2;\r\n    const textYOff = (textHeight - h) / 2;\r\n\r\n    cr.drawText(\r\n        { x: x - textXOff, y: y - textYOff },\r\n        content,\r\n        0,\r\n        false,\r\n        button.text.fill ?? '#fff',\r\n        font,\r\n    );\r\n};\r\n\r\nexport default ButtonRenderer;\r\n","import { GameMouseEvent } from '../../Engine/Input/Mouse';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport ButtonRenderer from '../Renderers/ButtonRenderer';\r\nimport Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport Button from '../UI/Button';\r\n\r\nexport default class BaseScreen {\r\n    private internalMouseMove: (gev: GameMouseEvent) => void;\r\n    protected internalMouseClick: (gev: GameMouseEvent) => void;\r\n    protected internalRender: (cr: CanvasRenderer) => void;\r\n\r\n    public refresh?: () => void;\r\n\r\n    protected buttons: Button[] = [];\r\n    protected readonly buttonW = 400;\r\n    protected readonly buttonX = (1024 - this.buttonW) / 2;\r\n\r\n    protected renderers: ((cr: CanvasRenderer) => void)[] = [];\r\n\r\n    constructor(public readonly title: string) {\r\n        this.internalMouseClick = this.findMouseClickOnButtons;\r\n        this.internalRender = this.renderButtons;\r\n    }\r\n\r\n    protected createRenderersFromButtons = () => {\r\n        for (let i = 0; i < this.buttons.length; i++) {\r\n            this.renderers.push(ButtonRenderer(this.buttons[i]));\r\n        }\r\n    };\r\n\r\n    protected clearRenderers = () => {\r\n        console.log('hello!');\r\n        this.renderers = [];\r\n    };\r\n\r\n    private findMouseClickOnButtons = (gev: GameMouseEvent) => {\r\n        for (let i = 0; i < this.buttons.length; i++) {\r\n            if (this.buttons[i].bounds.inBounds(gev.pos)) {\r\n                this.buttons[i].onSelect();\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    protected resetMouseClick = () => {\r\n        this.internalMouseClick = this.findMouseClickOnButtons;\r\n    };\r\n\r\n    public mouseClick = (gev: GameMouseEvent) => {\r\n        this.internalMouseClick(gev);\r\n    };\r\n\r\n    protected renderButtons = (cr: CanvasRenderer) => {\r\n        cr.drawText({ x: cr.middleX, y: 100 }, this.title, 0, true);\r\n        for (let i = 0; i < this.renderers.length; i++) {\r\n            this.renderers[i](cr);\r\n        }\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        cr.clear();\r\n        this.internalRender(cr);\r\n    };\r\n\r\n    /**\r\n     * Gets the x position for a centered thing\r\n     */\r\n    protected getXFromW = (w: number) => {\r\n        return (1024 - w) / 2;\r\n    };\r\n\r\n    protected getXAndW = (startingW: number) => {\r\n        return { x: this.getXAndW(startingW), w: startingW };\r\n    };\r\n\r\n    protected createBackButton = (curY: number, onSelect: () => void) => {\r\n        const backW = this.buttonW + 50;\r\n        const backX = this.getXFromW(backW);\r\n\r\n        this.buttons.push({\r\n            bounds: new Rectangle(backX, (curY += 200), backW, 100),\r\n            text: { content: 'Back To Menu', font: '64px arial' },\r\n            onSelect: onSelect,\r\n        });\r\n    };\r\n}\r\n","import Text from '../Graphics/Text';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nconst TextRenderer = (text: Text) => (cr: CanvasRenderer) => {\r\n    cr.drawText(\r\n        text.pos,\r\n        text.content,\r\n        text.rotation ?? 0,\r\n        text.centered ?? false,\r\n        text.fill ?? '#000',\r\n        text.font ?? '64px arial',\r\n    );\r\n};\r\n\r\nexport default TextRenderer;\r\n","import BaseScreen from './BaseScreen';\r\nimport TextRenderer from '../../Engine/Renderers/TextRenderer';\r\n\r\nexport default class Credits extends BaseScreen {\r\n    constructor(onBack: () => void) {\r\n        super('Credits');\r\n\r\n        let curY = 200;\r\n\r\n        const creditsText = [\r\n            'This work was done by Matt Bishop.',\r\n            'I was him who did it.',\r\n            'Some people just want to watch the world burn $',\r\n            'This really is Old main is burning...',\r\n            '5 hours? No stress (hahaha...)',\r\n            'This game has a nice style to it, minimal',\r\n            'Shoutout to my wife for getting me food and drink',\r\n        ];\r\n\r\n        for (let i = 0; i < creditsText.length; i++) {\r\n            this.renderers.push(\r\n                TextRenderer({\r\n                    content: `${creditsText[i]}`,\r\n                    pos: { x: 200, y: curY += 70 },\r\n                    font: '32px arial',\r\n                }),\r\n            );\r\n        }\r\n\r\n        this.createBackButton(curY, onBack);\r\n\r\n        this.createRenderersFromButtons();\r\n    }\r\n}\r\n","export default interface IHighScore {\r\n    /**\r\n     * Value that represents a score\r\n     */\r\n    value: number;\r\n    /**\r\n     * Username\r\n     */\r\n    username: string;\r\n}\r\n\r\n/**\r\n * Used to sort an array of high scores, lower values will go to the beginning.\r\n *\r\n * Sorts from least to greatest.\r\n *\r\n * @param a A high score\r\n * @param b A high score\r\n */\r\nexport const sortScores = (a: IHighScore, b: IHighScore) => {\r\n    if (a.value > b.value) {\r\n        return -1;\r\n    } else if (a.value === b.value) {\r\n        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n};\r\n","import IHighScore, { sortScores } from '../Interfaces/IHighScore';\r\n\r\nexport type PossibleDifficulties = 'easy' | 'hard';\r\n\r\nexport type DifficultyStructure = {\r\n    time: IHighScore[];\r\n    numMoves: IHighScore[];\r\n};\r\ntype StorageStructure = {\r\n    easy: DifficultyStructure;\r\n    hard: DifficultyStructure;\r\n};\r\n\r\nexport default class HighScoreManager {\r\n    private static storageKey: string = '@mini-game-high-scores';\r\n\r\n    public static clear = () => {\r\n        localStorage.removeItem(HighScoreManager.storageKey);\r\n    };\r\n\r\n    public static getHighScores = () => {\r\n        const highScores = localStorage[HighScoreManager.storageKey];\r\n        if (!highScores) {\r\n            return {\r\n                easy: { time: [], numMoves: [] },\r\n                hard: { time: [], numMoves: [] },\r\n            } as StorageStructure;\r\n        } else {\r\n            return JSON.parse(highScores) as StorageStructure;\r\n        }\r\n    };\r\n\r\n    public static addScore = (\r\n        username: string,\r\n        time: number,\r\n        numMoves: number,\r\n        difficulty: PossibleDifficulties,\r\n    ) => {\r\n        let highScores = HighScoreManager.getHighScores();\r\n\r\n        const curDifficulty = highScores[difficulty];\r\n\r\n        const scoringPairs = [\r\n            { array: curDifficulty.time, value: time },\r\n            { array: curDifficulty.numMoves, value: numMoves },\r\n        ];\r\n\r\n        for (let pair of scoringPairs) {\r\n            const { array, value } = pair;\r\n            array.push({ username, value });\r\n            array.sort(sortScores);\r\n            if (array.length > 5) {\r\n                array.splice(0, 1);\r\n            }\r\n        }\r\n\r\n        localStorage[HighScoreManager.storageKey] = JSON.stringify(highScores);\r\n    };\r\n}\r\n","import BaseScreen from './BaseScreen';\r\nimport HighScoreManager, {\r\n    DifficultyStructure,\r\n} from '../../Engine/Managers/HighScoreManager';\r\nimport TextRenderer from '../../Engine/Renderers/TextRenderer';\r\nimport Text from '../../Engine/Graphics/Text';\r\nimport Vec2 from '../../Engine/Math/Vec2';\r\nimport IHighScore from '../../Engine/Interfaces/IHighScore';\r\n\r\nexport default class HighScores extends BaseScreen {\r\n    private highScoreTextPairs: { username: Text; score: Text }[] = [];\r\n\r\n    constructor(private onBack: () => void) {\r\n        super('High Scores');\r\n        this.createScreen();\r\n    }\r\n\r\n    private createScreen = () => {\r\n        this.renderers.length = 0;\r\n        this.buttons.length = 0;\r\n\r\n        let curY = 0;\r\n\r\n        const highScores = HighScoreManager.getHighScores();\r\n\r\n        curY += this.makeColumn('Easy', highScores['easy'], { x: 150, y: 200 });\r\n        curY += this.makeColumn('Hard', highScores['hard'], { x: 600, y: 200 });\r\n\r\n        this.createBackButton(650, this.onBack);\r\n\r\n        this.createRenderersFromButtons();\r\n    };\r\n\r\n    private makeColumn = (\r\n        colHeading: string,\r\n        difficultyData: DifficultyStructure,\r\n        startingPos: Vec2,\r\n    ) => {\r\n        let offsetY = 0;\r\n\r\n        this.renderers.push(\r\n            TextRenderer({\r\n                content: colHeading,\r\n                pos: { x: startingPos.x, y: startingPos.y },\r\n                font: '48px arial',\r\n            }),\r\n        );\r\n\r\n        offsetY += 50;\r\n\r\n        this.renderers.push(\r\n            TextRenderer({\r\n                content: 'Time',\r\n                pos: { x: startingPos.x, y: startingPos.y + offsetY },\r\n                font: '32px arial',\r\n            }),\r\n        );\r\n\r\n        const scoresIndent = 30;\r\n        if (\r\n            difficultyData &&\r\n            difficultyData.time &&\r\n            difficultyData.time.length > 0\r\n        ) {\r\n            offsetY += this.createRenderersFromScores(difficultyData.time, {\r\n                x: startingPos.x + scoresIndent,\r\n                y: startingPos.y + offsetY,\r\n            });\r\n        } else {\r\n            offsetY += 50;\r\n            offsetY += this.createRenderDots({\r\n                x: startingPos.x + scoresIndent,\r\n                y: startingPos.y + offsetY,\r\n            });\r\n        }\r\n\r\n        this.renderers.push(\r\n            TextRenderer({\r\n                content: 'Number of Moves',\r\n                pos: { x: startingPos.x, y: startingPos.y + offsetY },\r\n                font: '32px arial',\r\n            }),\r\n        );\r\n        if (\r\n            difficultyData &&\r\n            difficultyData.numMoves &&\r\n            difficultyData.numMoves.length > 0\r\n        ) {\r\n            offsetY += this.createRenderersFromScores(difficultyData.numMoves, {\r\n                x: startingPos.x + scoresIndent,\r\n                y: startingPos.y + offsetY,\r\n            });\r\n        } else {\r\n            offsetY += 50;\r\n            offsetY += this.createRenderDots({\r\n                x: startingPos.x + scoresIndent,\r\n                y: startingPos.y + offsetY,\r\n            });\r\n        }\r\n\r\n        return offsetY;\r\n    };\r\n\r\n    private createRenderersFromScores = (\r\n        arr: IHighScore[],\r\n        startingPos: Vec2,\r\n    ) => {\r\n        let offsetY = 0;\r\n\r\n        offsetY += 50;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            // Username\r\n            this.renderers.push(\r\n                TextRenderer({\r\n                    content: `${i + 1}. ${arr[i].username}`,\r\n                    pos: { x: startingPos.x, y: startingPos.y + offsetY },\r\n                    font: '32px arial',\r\n                }),\r\n            );\r\n\r\n            // Value\r\n            this.renderers.push(\r\n                TextRenderer({\r\n                    content: arr[i].value.toString(),\r\n                    pos: { x: startingPos.x + 225, y: startingPos.y + offsetY },\r\n                    font: '32px arial',\r\n                }),\r\n            );\r\n\r\n            offsetY += 50;\r\n        }\r\n\r\n        return offsetY;\r\n    };\r\n\r\n    private createRenderDots = (startingPos: Vec2) => {\r\n        this.renderers.push(\r\n            TextRenderer({\r\n                content: '(NO SCORES)',\r\n                pos: {\r\n                    x: startingPos.x,\r\n                    y: startingPos.y,\r\n                },\r\n                font: '32px arial',\r\n            }),\r\n        );\r\n        return 50;\r\n    };\r\n\r\n    public refresh = () => {\r\n        this.createScreen();\r\n    };\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport Credits from './Credits';\r\nimport HighScores from './HighScores';\r\nimport { PossibleDifficulties } from '../../Engine/Managers/HighScoreManager';\r\n\r\nexport default class Menu extends BaseScreen {\r\n    private screens: BaseScreen[] = [];\r\n\r\n    constructor(onNewGame: (newDifficulty: PossibleDifficulties) => void) {\r\n        super('Old Main is burning');\r\n\r\n        let curY = 250;\r\n\r\n        const newGameW = this.buttonW + 150;\r\n        const newGameX = this.getXFromW(newGameW);\r\n        this.buttons.push({\r\n            bounds: new Rectangle(newGameX, curY, newGameW, 100),\r\n            text: { content: 'New Game - Easy', font: '64px arial' },\r\n            onSelect: () => onNewGame('easy'),\r\n        });\r\n\r\n        this.buttons.push({\r\n            bounds: new Rectangle(newGameX, (curY += 200), newGameW, 100),\r\n            text: { content: 'New Game - Hard', font: '64px arial' },\r\n            onSelect: () => onNewGame('hard'),\r\n        });\r\n\r\n        const screenTypes = [HighScores, Credits];\r\n\r\n        for (let i = 0; i < screenTypes.length; i++) {\r\n            const screen = new screenTypes[i](this.returnToMenu);\r\n            this.screens.push(screen);\r\n            this.buttons.push({\r\n                bounds: new Rectangle(\r\n                    this.buttonX,\r\n                    (curY += 200),\r\n                    this.buttonW,\r\n                    100,\r\n                ),\r\n                text: { content: screen.title, font: '64px arial' },\r\n                onSelect: () => this.transitionToScreen(i),\r\n            });\r\n        }\r\n\r\n        this.createRenderersFromButtons();\r\n    }\r\n\r\n    private transitionToScreen = (index: number) => {\r\n        if (this.screens[index].refresh) {\r\n            this.screens[index].refresh();\r\n        }\r\n\r\n        this.internalRender = this.screens[index].render;\r\n        this.internalMouseClick = this.screens[index].mouseClick;\r\n    };\r\n\r\n    private returnToMenu = () => {\r\n        this.internalRender = this.renderButtons;\r\n        this.resetMouseClick();\r\n    };\r\n}\r\n","export default class Event {\r\n    private timeSinceLastEvent: number = 0;\r\n\r\n    /**\r\n     * An event structure to a number of things after a time.\r\n     * @param interval Time (ms) between event firings\r\n     * @param numTimes Number of times event will fire\r\n     * @param callback Callback for when the event fires\r\n     */\r\n    constructor(\r\n        private interval: number,\r\n        private numTimes: number,\r\n        private callback?: () => void,\r\n    ) {}\r\n\r\n    public update(elapsedTime: number) {\r\n        this.timeSinceLastEvent += elapsedTime;\r\n\r\n        if (this.timeSinceLastEvent > this.interval) {\r\n            this.timeSinceLastEvent -= this.interval;\r\n            this.numTimes--;\r\n            if (this.callback) {\r\n                this.callback();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get timesLeft(): number {\r\n        return this.numTimes;\r\n    }\r\n}\r\n","import { IUpdateable } from '../Interfaces/IUpdateable';\r\nimport Event from '../Events/Event';\r\n\r\nexport default class EventSystem implements IUpdateable {\r\n    private events: Event[] = [];\r\n    public addEvent = (\r\n        interval: number,\r\n        numTimes: number,\r\n        callback?: () => void,\r\n    ) => {\r\n        this.events.push(new Event(interval, numTimes, callback));\r\n    };\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = 0; i < this.events.length; i++) {\r\n            if (this.events[i].timesLeft <= 0) {\r\n                this.events.splice(i, 1);\r\n                i--;\r\n                continue;\r\n            }\r\n            this.events[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public destroy = () => {\r\n        this.events.length = 0;\r\n    };\r\n}\r\n","import Vec2 from '../Math/Vec2';\r\n\r\nexport class Texture {\r\n    private _center: Vec2;\r\n    private _ready: boolean = false;\r\n    private _image: HTMLImageElement = new Image();\r\n    private _rotation: number = 0;\r\n    private _width: number = 0;\r\n    private _height: number = 0;\r\n\r\n    constructor(center: Vec2, imageSource: string, desiredHeight: number) {\r\n        this._image.onload = () => {\r\n            this._ready = true;\r\n            let ar = this._image.width / this._image.height;\r\n            this._width = desiredHeight * ar;\r\n            this._height = desiredHeight;\r\n        };\r\n        this._image.src = imageSource;\r\n        this._center = center;\r\n    }\r\n\r\n    get ready() {\r\n        return this._ready;\r\n    }\r\n\r\n    get center() {\r\n        return this._center;\r\n    }\r\n\r\n    get image() {\r\n        return this._image;\r\n    }\r\n\r\n    get rotation() {\r\n        return this._rotation;\r\n    }\r\n\r\n    set rotation(newRot: number) {\r\n        this._rotation = newRot;\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n}\r\n","import { Texture } from '../../Engine/Graphics/Texture';\r\nimport Vec2 from '../../Engine/Math/Vec2';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport Rectangle from '../../Engine/Geometry/Rectangle';\r\n\r\nexport default class Tile {\r\n    private texture: Texture;\r\n    private currentRenderPos: Vec2;\r\n    private _correctPosition: Vec2;\r\n    private _currentIndex: number;\r\n    private _currentRowAndCol: { row: number; col: number };\r\n    public justMoved: boolean = false;\r\n\r\n    /**\r\n     * Creates a tile.\r\n     * @param center Center of the tile\r\n     * @param fileName The filename to the source image of the tile\r\n     * @param wh Width and height (box)\r\n     */\r\n    constructor(\r\n        center: Vec2,\r\n        fileName: string,\r\n        private wh: number,\r\n        private initialRowAndCol: { row: number; col: number },\r\n    ) {\r\n        this.currentRenderPos = center;\r\n        this.texture = new Texture(this.currentRenderPos, fileName, wh);\r\n\r\n        this._correctPosition = center;\r\n        this._currentRowAndCol = {\r\n            row: initialRowAndCol.row,\r\n            col: initialRowAndCol.col,\r\n        };\r\n    }\r\n\r\n    public render(cr: CanvasRenderer) {\r\n        cr.drawTexture(this.texture);\r\n        cr.drawStrokeRect(\r\n            this.currentRenderPos.x - this.wh / 2,\r\n            this.currentRenderPos.y - this.wh / 2,\r\n            this.wh,\r\n            this.wh,\r\n            '#000',\r\n        );\r\n    }\r\n\r\n    public get correctPosition() {\r\n        return this._correctPosition;\r\n    }\r\n\r\n    public get center() {\r\n        return this.currentRenderPos;\r\n    }\r\n\r\n    public set center(newCenter: Vec2) {\r\n        this.currentRenderPos = newCenter;\r\n    }\r\n\r\n    public get bounds() {\r\n        return new Rectangle(\r\n            this.currentRenderPos.x - this.wh / 2,\r\n            this.currentRenderPos.y - this.wh / 2,\r\n            this.wh,\r\n            this.wh,\r\n        );\r\n    }\r\n\r\n    public get currentIndex() {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    public set currentIndex(newIndex: number) {\r\n        this._currentIndex = newIndex;\r\n    }\r\n\r\n    public get rowAndCol() {\r\n        return this._currentRowAndCol;\r\n    }\r\n\r\n    public get atOriginalRowAndCol() {\r\n        return (\r\n            this.initialRowAndCol.row === this._currentRowAndCol.row &&\r\n            this.initialRowAndCol.col === this._currentRowAndCol.col\r\n        );\r\n    }\r\n}\r\n","import Tile from '../Objects/Tile';\r\n\r\n/**\r\n * Shuffles array in place.\r\n *\r\n * Take from https://stackoverflow.com/a/6274381\r\n *\r\n * @param {Array} a items An array containing the items.\r\n */\r\nexport function shuffle(sourceArray: Tile[]) {\r\n    let tempArray = sourceArray;\r\n    for (let i = tempArray.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i);\r\n\r\n        const renderPos1 = {\r\n            x: tempArray[i].center.x,\r\n            y: tempArray[i].center.y,\r\n            row: tempArray[i].rowAndCol.row,\r\n            col: tempArray[i].rowAndCol.col,\r\n        };\r\n        const renderPos2 = {\r\n            x: tempArray[j].center.x,\r\n            y: tempArray[j].center.y,\r\n            row: tempArray[j].rowAndCol.row,\r\n            col: tempArray[j].rowAndCol.col,\r\n        };\r\n\r\n        // Will actually swap places\r\n        // const temp = tempArray[i];\r\n        // tempArray[i] = tempArray[j];\r\n        // tempArray[j] = temp;\r\n\r\n        // We just want to swap rendering positions\r\n        tempArray[i].center.x = renderPos2.x;\r\n        tempArray[i].center.y = renderPos2.y;\r\n        tempArray[i].rowAndCol.row = renderPos2.row;\r\n        tempArray[i].rowAndCol.col = renderPos2.col;\r\n\r\n        tempArray[j].center.x = renderPos1.x;\r\n        tempArray[j].center.y = renderPos1.y;\r\n        tempArray[j].rowAndCol.row = renderPos1.row;\r\n        tempArray[j].rowAndCol.col = renderPos1.col;\r\n    }\r\n    return tempArray;\r\n}\r\n","export default class Vec2 {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function distSqrd(a: Vec2, b: Vec2) {\r\n    return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);\r\n}\r\n\r\nexport function dist(a: Vec2, b: Vec2) {\r\n    return Math.sqrt(distSqrd(a, b));\r\n}\r\n\r\nexport function diff(a: Vec2, b: Vec2) {\r\n    return { x: b.x - a.x, y: b.y - a.y };\r\n}\r\n","import Vec2, { distSqrd, dist, diff } from '../../Engine/Math/Vec2';\r\n\r\n/**\r\n * Represents a path of points\r\n */\r\nexport default class Path {\r\n    private points: Vec2[] = [];\r\n    private curPointIndex: number = 0;\r\n    private curDistanceTraveled: number = 0;\r\n\r\n    // getting percent done? For knowing when to fire stuff?\r\n    // could just use the elapsed time\r\n\r\n    /**\r\n     * Creates a new path\r\n     * @param onEndPath Gets called when the path is finished\r\n     */\r\n    constructor(\r\n        private loop: boolean = false,\r\n        private onEndPath?: () => void,\r\n    ) {}\r\n\r\n    public addPoint = (point: Vec2) => {\r\n        this.points.push(point);\r\n    };\r\n\r\n    /**\r\n     * Travel a certain distance on the path\r\n     * @param distance Distance to travel\r\n     * @returns The current point on a path\r\n     */\r\n    public travel(distance: number): Vec2 {\r\n        let nextIndex = this.curPointIndex + 1;\r\n\r\n        if (this.curPointIndex >= this.points.length - 1) {\r\n            if (this.loop) {\r\n                this.curPointIndex = this.points.length - 1;\r\n                nextIndex = 0;\r\n            } else {\r\n                // console.log('Ending');\r\n                // call onEnded?\r\n                this.onEndPath();\r\n                return this.points[this.points.length - 1];\r\n            }\r\n        }\r\n\r\n        let distBetweenPoints = dist(\r\n            this.points[this.curPointIndex],\r\n            this.points[nextIndex],\r\n        );\r\n\r\n        this.curDistanceTraveled += distance;\r\n\r\n        // skip over points until we land between two of them\r\n        // or we reach the end\r\n        while (this.curDistanceTraveled >= distBetweenPoints) {\r\n            this.curDistanceTraveled -= distBetweenPoints;\r\n\r\n            if (this.loop) {\r\n                this.curPointIndex =\r\n                    (this.curPointIndex + 1) % this.points.length;\r\n\r\n                nextIndex =\r\n                    this.curPointIndex === 0 ? 1 : this.curPointIndex + 1;\r\n            } else {\r\n                this.curPointIndex++;\r\n                nextIndex = this.curPointIndex + 1;\r\n            }\r\n\r\n            if (this.curPointIndex >= this.points.length - 1) {\r\n                if (this.loop) {\r\n                    nextIndex = 0;\r\n                } else {\r\n                    // console.log('Ending 2');\r\n                    // call onEnded?\r\n                    this.onEndPath();\r\n                    return this.points[this.points.length - 1];\r\n                }\r\n            }\r\n        }\r\n\r\n        const a = this.points[this.curPointIndex];\r\n        const b = this.points[nextIndex];\r\n\r\n        distBetweenPoints = dist(a, b);\r\n\r\n        const diffBetweenPoints = diff(a, b);\r\n\r\n        const traveledRatio = this.curDistanceTraveled / distBetweenPoints;\r\n\r\n        return {\r\n            x: a.x + diffBetweenPoints.x * traveledRatio,\r\n            y: a.y + diffBetweenPoints.y * traveledRatio,\r\n        };\r\n    }\r\n\r\n    get lengthSquared() {\r\n        let length = 0;\r\n\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            const nextIndex = i + 1;\r\n            if (nextIndex >= this.points.length) {\r\n                return length;\r\n            }\r\n            length += distSqrd(this.points[i], this.points[nextIndex]);\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    get length() {\r\n        return Math.sqrt(this.lengthSquared);\r\n    }\r\n\r\n    get numberOfPoints() {\r\n        return this.points.length;\r\n    }\r\n}\r\n","export class Color {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n    a: number = 1;\r\n}\r\n\r\nexport function createColorTransition(\r\n    from: Color,\r\n    to: Color,\r\n    ms: number,\r\n): Color {\r\n    return {\r\n        r: (from.r - to.r) / ms,\r\n        g: (from.g - to.g) / ms,\r\n        b: (from.b - to.b) / ms,\r\n        a: (from.a - to.a) / ms,\r\n    };\r\n}\r\n\r\nexport class Colors {\r\n    public static white: Color = { r: 255, g: 255, b: 255, a: 1 };\r\n    public static clear: Color = { r: 255, g: 255, b: 255, a: 0 };\r\n    public static black: Color = { r: 0, g: 0, b: 0, a: 1 };\r\n}\r\n","import { Vec2 } from '../Math/Vec2';\r\nimport { Color, createColorTransition, Colors } from './Color';\r\n\r\ninterface Props {\r\n    /**\r\n     * Lifespan in ms of the particle\r\n     */\r\n    readonly lifetime: number;\r\n    center: Vec2;\r\n    /**\r\n     * Initial angle for the particle to spin\r\n     */\r\n    rotation: number;\r\n    readonly speed: number;\r\n    readonly direction: Vec2;\r\n    /**\r\n     * Width and height of the particle\r\n     */\r\n    readonly size: Vec2;\r\n    /**\r\n     * Initial particle color\r\n     */\r\n    readonly fromColor: Color;\r\n    /**\r\n     * Color to transition to throught the particles lifetime\r\n     */\r\n    readonly toColor: Color;\r\n    readonly fadeTransition: number;\r\n}\r\n\r\nexport class Particle {\r\n    /**\r\n     * Elapsed time since particle creation\r\n     */\r\n    private elapsedTime: number = 0;\r\n    private color: Color;\r\n    private colorTransition: Color;\r\n    private fading: boolean = false;\r\n\r\n    constructor(private props: Props) {\r\n        this.color = props.fromColor;\r\n        this.colorTransition = createColorTransition(\r\n            props.fromColor,\r\n            props.toColor,\r\n            props.lifetime,\r\n        );\r\n    }\r\n    get alive() {\r\n        return this.elapsedTime <= this.props.lifetime;\r\n    }\r\n\r\n    get center() {\r\n        return this.props.center;\r\n    }\r\n\r\n    get rotation() {\r\n        return this.props.rotation;\r\n    }\r\n\r\n    get fill() {\r\n        return `rgb(${this.color.r},${this.color.g},${this.color.b})`;\r\n    }\r\n\r\n    get size() {\r\n        return this.props.size;\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        const { speed, direction } = this.props;\r\n        this.center.x += speed * direction.x * elapsedTime;\r\n        this.center.y += speed * direction.y * elapsedTime;\r\n        this.elapsedTime += elapsedTime;\r\n\r\n        this.updateColor(elapsedTime);\r\n\r\n        this.props.rotation += speed * 0.5;\r\n    };\r\n\r\n    private updateColor = (elapsedTime: number) => {\r\n        if (\r\n            !this.fading &&\r\n            this.elapsedTime >= this.props.lifetime - this.props.fadeTransition\r\n        ) {\r\n            this.fading = true;\r\n            this.colorTransition = createColorTransition(\r\n                this.color,\r\n                { r: this.color.r, g: this.color.g, b: this.color.b, a: 0 },\r\n                this.props.fadeTransition,\r\n            );\r\n        }\r\n\r\n        this.color.r -= this.colorTransition.r * elapsedTime;\r\n        this.color.g -= this.colorTransition.g * elapsedTime;\r\n        this.color.b -= this.colorTransition.b * elapsedTime;\r\n        this.color.a -= this.colorTransition.a * elapsedTime;\r\n    };\r\n}\r\n","// This is used to give a small performance optimization\r\n\r\nimport { Vec2 } from './Vec2';\r\n\r\n// in generating gaussian random numbers.\r\nlet usePrevious: boolean = false;\r\nlet y2: number = 0;\r\n\r\nexport namespace random {\r\n    export function nextGaussian(mean: number, stdDev: number) {\r\n        let x1 = 0;\r\n        let x2 = 0;\r\n        let y1 = 0;\r\n        let z = 0;\r\n\r\n        if (usePrevious) {\r\n            usePrevious = false;\r\n            return mean + y2 * stdDev;\r\n        }\r\n\r\n        usePrevious = true;\r\n\r\n        do {\r\n            x1 = 2 * Math.random() - 1;\r\n            x2 = 2 * Math.random() - 1;\r\n            z = x1 * x1 + x2 * x2;\r\n        } while (z >= 1);\r\n\r\n        z = Math.sqrt((-2 * Math.log(z)) / z);\r\n        y1 = x1 * z;\r\n        y2 = x2 * z;\r\n\r\n        return mean + y1 * stdDev;\r\n    }\r\n\r\n    export function nextRange(min: number, max: number) {\r\n        let range = max - min;\r\n        return Math.floor(Math.random() * range + min);\r\n    }\r\n\r\n    export function nextCircleVector(): Vec2 {\r\n        let angle = Math.random() * 2 * Math.PI;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    export function nextAngleVector(maxAngle: number = 2 * Math.PI): Vec2 {\r\n        let angle = Math.random() * maxAngle;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    export function nextAngleInCone(\r\n        centerAngle: number,\r\n        angleOfCone: number = Math.PI / 2,\r\n    ): Vec2 {\r\n        const generatingMean = angleOfCone / 2;\r\n        const particleAngle =\r\n            nextGaussian(generatingMean, angleOfCone / 4) + angleOfCone;\r\n        const angle = centerAngle - generatingMean + particleAngle;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n}\r\n","import { Particle } from '../Graphics/Particle';\r\nimport { CanvasRenderer } from '../Renderers/CanvasRenderer';\r\nimport { random } from '../Math/random';\r\nimport { Distribution } from '../Math/distribution';\r\nimport Vec2 from '../Math/Vec2';\r\nimport { Color } from '../Graphics/Color';\r\n\r\ninterface RandomParams {\r\n    size: Distribution;\r\n    speed: Distribution;\r\n    lifetime: Distribution;\r\n    fromColor: Color;\r\n    toColor: Color;\r\n}\r\n\r\nexport class ParticleSystem {\r\n    private _particles: Particle[] = [];\r\n\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = this._particles.length - 1; i >= 0; i--) {\r\n            this._particles[i].update(elapsedTime);\r\n\r\n            if (!this._particles[i].alive) {\r\n                this._particles.splice(i, 1);\r\n                continue;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generates new particles on ship thrust\r\n     * @param center Center to generate particles\r\n     * @param direction Angle of the ship in rad\r\n     */\r\n    public shipThrust(center: Vec2, direction: number, props: RandomParams) {\r\n        // add new particles\r\n        for (let particle = 0; particle < 5; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const p = new Particle({\r\n                center: center,\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: random.nextAngleInCone(direction),\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: {\r\n                    r: props.fromColor.r,\r\n                    g: props.fromColor.g,\r\n                    b: props.fromColor.b,\r\n                    a: props.fromColor.a,\r\n                },\r\n                toColor: {\r\n                    r: props.toColor.r,\r\n                    g: props.toColor.g,\r\n                    b: props.toColor.b,\r\n                    a: props.toColor.a,\r\n                },\r\n                fadeTransition: 50,\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n    }\r\n\r\n    public shipCrash(center: Vec2, props: RandomParams) {\r\n        // add new particles\r\n        for (let particle = 0; particle < 1000; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const p = new Particle({\r\n                center: { x: center.x, y: center.y },\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: random.nextCircleVector(),\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: {\r\n                    r: props.fromColor.r,\r\n                    g: props.fromColor.g,\r\n                    b: props.fromColor.b,\r\n                    a: props.fromColor.a,\r\n                },\r\n                toColor: {\r\n                    r: props.toColor.r,\r\n                    g: props.toColor.g,\r\n                    b: props.toColor.b,\r\n                    a: props.toColor.a,\r\n                },\r\n                fadeTransition: 100,\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n    }\r\n\r\n    public sparks = (center: Vec2, wh: number, props: RandomParams) => {\r\n        // add new particles\r\n        for (let particle = 0; particle < 1000; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const p = new Particle({\r\n                center: { x: center.x, y: center.y },\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: random.nextCircleVector(),\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: {\r\n                    r: props.fromColor.r,\r\n                    g: props.fromColor.g,\r\n                    b: props.fromColor.b,\r\n                    a: props.fromColor.a,\r\n                },\r\n                toColor: {\r\n                    r: props.toColor.r,\r\n                    g: props.toColor.g,\r\n                    b: props.toColor.b,\r\n                    a: props.toColor.a,\r\n                },\r\n                fadeTransition: 100,\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n    };\r\n\r\n    get particles() {\r\n        return this._particles;\r\n    }\r\n}\r\n","import { ParticleSystem } from '../Systems/ParticleSystem';\r\nimport { CanvasRenderer } from './CanvasRenderer';\r\n\r\nexport const ParticleSystemRenderer = (particleSystem: ParticleSystem) => (\r\n    cr: CanvasRenderer,\r\n) => {\r\n    const { particles } = particleSystem;\r\n    for (let i = particles.length - 1; i >= 0; i--) {\r\n        const { center, rotation, size, fill } = particles[i];\r\n        cr.drawRectangle(center.x, center.y, size.x, size.y, rotation, fill);\r\n    }\r\n};\r\n","import { CanvasRenderer } from '../Engine/Renderers/CanvasRenderer';\r\nimport EventSystem from '../Engine/Systems/EventSystem';\r\nimport { AudioSystem } from '../Engine/Systems/AudioSystem';\r\nimport HighScoreManager, {\r\n    PossibleDifficulties,\r\n} from '../Engine/Managers/HighScoreManager';\r\nimport Tile from './Objects/Tile';\r\nimport { shuffle } from './Helpers/shuffle';\r\nimport { GameMouseEvent } from '../Engine/Input/Mouse';\r\nimport Vec2 from '../Engine/Math/Vec2';\r\nimport Path from './Objects/Path';\r\nimport { ParticleSystem } from '../Engine/Systems/ParticleSystem';\r\nimport { ParticleSystemRenderer } from '../Engine/Renderers/ParticleSystemRenderer';\r\n// TODO: Use the CanvasRenderer to get the canvas width\r\nconst canvasWidth = 1024;\r\n\r\nexport default class GameModel {\r\n    private currentTime: number = 0;\r\n    private numberOfMoves: number = 0;\r\n    private curDifficulty: PossibleDifficulties = 'easy';\r\n\r\n    private movingTile: boolean = false;\r\n    private movingToPoint: Vec2;\r\n    private movingTileIndex: number;\r\n    private distX: number;\r\n    private distY: number;\r\n\r\n    private particleSystem = new ParticleSystem();\r\n    private particleSystemRenderer: (cr: CanvasRenderer) => void;\r\n\r\n    private travelPath: Path;\r\n    private readonly pixels: number = 200;\r\n    private readonly milliSeconds: number = 1000;\r\n    private readonly speed: number = this.pixels / this.milliSeconds;\r\n\r\n    private tiles: Tile[] = [];\r\n    private selectedTileIndex: number = -1;\r\n    private filledPositions: { filled: boolean; point: Vec2 }[][] = [];\r\n\r\n    private internalUpdate: (elapsedTime: number) => void;\r\n    private internalRender: (cr: CanvasRenderer) => void;\r\n\r\n    private readonly eventSystem: EventSystem = new EventSystem();\r\n    private audioSystem: AudioSystem = new AudioSystem();\r\n\r\n    private sparksParams = {\r\n        size: { mean: 2, stdev: 0.25 },\r\n        speed: { mean: 0.01, stdev: 0.01 },\r\n        lifetime: { mean: 1000, stdev: 500 },\r\n        fromColor: { r: 255, g: 255, b: 0, a: 1 },\r\n        toColor: { r: 255, g: 255, b: 0, a: 1 },\r\n    };\r\n\r\n    constructor(private readonly onGameOver: () => void) {}\r\n\r\n    public start = () => {\r\n        this.audioSystem.clearAllSounds();\r\n\r\n        this.createTiles();\r\n        this.startTimer();\r\n\r\n        this.internalUpdate = this.gameUpdate;\r\n        this.internalRender = this.gameRender;\r\n\r\n        this.particleSystem = new ParticleSystem();\r\n\r\n        this.particleSystemRenderer = ParticleSystemRenderer(\r\n            this.particleSystem,\r\n        );\r\n\r\n        // console.log('Starting a timer for 3 seconds');\r\n        // this.eventSystem.addEvent(3000, 1, () => {\r\n        //     console.log('Ending game (this is a timer)');\r\n        //     this.elapsedTime = 1000;\r\n        //     this.numberOfMoves = 20;\r\n        //     this.endGame();\r\n        // });\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        this.internalRender(cr);\r\n    };\r\n\r\n    public destroy = () => {\r\n        this.eventSystem.destroy();\r\n        this.audioSystem.destroy();\r\n    };\r\n\r\n    public set difficulty(newDifficulty: PossibleDifficulties) {\r\n        this.curDifficulty = newDifficulty;\r\n        console.log('Status: Current difficulty is', newDifficulty);\r\n    }\r\n\r\n    private gameRender = (cr: CanvasRenderer) => {\r\n        cr.clear();\r\n\r\n        // this.drawBackground(cr);\r\n        this.drawCurrentTime(cr);\r\n        this.drawTiles(cr);\r\n        this.drawNumMoves(cr);\r\n        this.particleSystemRenderer(cr);\r\n    };\r\n\r\n    private drawBackground = (cr: CanvasRenderer) => {\r\n        // TODO: Make this background a space scene seeing the stars pass by.\r\n        // TODO: Everyonce in a while, make a planet or something big.\r\n        cr.drawRectangle(0, 0, 1024, 1024, 0, '#000');\r\n    };\r\n\r\n    private drawTiles = (cr: CanvasRenderer) => {\r\n        for (let i = 0; i < this.tiles.length; i++) {\r\n            this.tiles[i].render(cr);\r\n        }\r\n    };\r\n\r\n    private drawCurrentTime = (cr: CanvasRenderer) => {\r\n        cr.drawText({ x: 100, y: 100 }, `Time: ${this.currentTime}`);\r\n    };\r\n\r\n    private drawNumMoves = (cr: CanvasRenderer) => {\r\n        cr.drawText({ x: 500, y: 100 }, `Num Moves: ${this.numberOfMoves}`);\r\n    };\r\n\r\n    private gameUpdate = (elapsedTime: number) => {\r\n        // this.audioSystem.update(elapsedTime);\r\n        this.eventSystem.update(elapsedTime);\r\n    };\r\n\r\n    public update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n\r\n        this.particleSystem.update(elapsedTime);\r\n\r\n        if (!this.movingTile) {\r\n            this.handleSelectedTile(elapsedTime);\r\n            // this.checkIfAnyAtOriginalRowAndCol();\r\n\r\n            // this.checkEndConditions();\r\n        } else {\r\n            const deltaX = this.speed * elapsedTime;\r\n            const newPos = this.travelPath.travel(deltaX);\r\n            this.tiles[this.movingTileIndex].center.x = newPos.x;\r\n            this.tiles[this.movingTileIndex].center.y = newPos.y;\r\n        }\r\n    };\r\n\r\n    public mouseClick = (gev: GameMouseEvent) => {\r\n        // console.log('clicked at', gev.pos);\r\n        this.getTileUnderMouse(gev.pos);\r\n    };\r\n\r\n    private handleSelectedTile = (elapsedTime: number) => {\r\n        if (this.selectedTileIndex >= 0) {\r\n            this.moveTileIfPossible(this.selectedTileIndex);\r\n            this.selectedTileIndex = -1;\r\n        }\r\n    };\r\n\r\n    private moveTileIfPossible = (tileIndex: number) => {\r\n        // console.log('current index', this.tiles[tileIndex].rowAndCol);\r\n        const { row, col } = this.tiles[tileIndex].rowAndCol;\r\n\r\n        const numColsNRows = this.getNumRowsAndCols();\r\n\r\n        // debugger;\r\n        if (col - 1 >= 0 && !this.filledPositions[row][col - 1].filled) {\r\n            // console.log('Move to:', row, col - 1);\r\n            const { x, y } = this.filledPositions[row][col - 1].point;\r\n            // this.tiles[tileIndex].center.x = x;\r\n            // this.tiles[tileIndex].center.y = y;\r\n            this.moveTileToPos(\r\n                tileIndex,\r\n                x,\r\n                y,\r\n                this.tiles[tileIndex].center.x,\r\n                this.tiles[tileIndex].center.y,\r\n            );\r\n            this.tiles[tileIndex].rowAndCol.col -= 1;\r\n\r\n            this.filledPositions[row][col].filled = false;\r\n            this.filledPositions[row][col - 1].filled = true;\r\n\r\n            this.tiles[tileIndex].justMoved = true;\r\n            this.numberOfMoves += 1;\r\n\r\n            // add check to see if at was original pos\r\n\r\n            return;\r\n        }\r\n\r\n        if (\r\n            row + 1 < numColsNRows &&\r\n            !this.filledPositions[row + 1][col].filled\r\n        ) {\r\n            // console.log('Move to:', row + 1, col);\r\n            const { x, y } = this.filledPositions[row + 1][col].point;\r\n            // this.tiles[tileIndex].center.x = x;\r\n            // this.tiles[tileIndex].center.y = y;\r\n            this.moveTileToPos(\r\n                tileIndex,\r\n                x,\r\n                y,\r\n                this.tiles[tileIndex].center.x,\r\n                this.tiles[tileIndex].center.y,\r\n            );\r\n            this.tiles[tileIndex].rowAndCol.row += 1;\r\n\r\n            this.filledPositions[row][col].filled = false;\r\n            this.filledPositions[row + 1][col].filled = true;\r\n\r\n            this.tiles[tileIndex].justMoved = true;\r\n            this.numberOfMoves += 1;\r\n\r\n            return;\r\n        }\r\n\r\n        if (\r\n            col + 1 < numColsNRows &&\r\n            !this.filledPositions[row][col + 1].filled\r\n        ) {\r\n            // console.log('Move to:', row, col + 1);\r\n            const { x, y } = this.filledPositions[row][col + 1].point;\r\n            // this.tiles[tileIndex].center.x = x;\r\n            // this.tiles[tileIndex].center.y = y;\r\n            this.moveTileToPos(\r\n                tileIndex,\r\n                x,\r\n                y,\r\n                this.tiles[tileIndex].center.x,\r\n                this.tiles[tileIndex].center.y,\r\n            );\r\n            this.tiles[tileIndex].rowAndCol.col += 1;\r\n\r\n            this.filledPositions[row][col].filled = false;\r\n            this.filledPositions[row][col + 1].filled = true;\r\n\r\n            this.tiles[tileIndex].justMoved = true;\r\n            this.numberOfMoves += 1;\r\n\r\n            return;\r\n        }\r\n\r\n        if (row - 1 >= 0 && !this.filledPositions[row - 1][col].filled) {\r\n            // console.log('Move to:', row - 1);\r\n            const { x, y } = this.filledPositions[row - 1][col].point;\r\n            // this.tiles[tileIndex].center.x = x;\r\n            // this.tiles[tileIndex].center.y = y;\r\n            this.moveTileToPos(\r\n                tileIndex,\r\n                x,\r\n                y,\r\n                this.tiles[tileIndex].center.x,\r\n                this.tiles[tileIndex].center.y,\r\n            );\r\n\r\n            this.tiles[tileIndex].rowAndCol.row -= 1;\r\n\r\n            this.filledPositions[row][col].filled = false;\r\n            this.filledPositions[row - 1][col].filled = true;\r\n\r\n            this.tiles[tileIndex].justMoved = true;\r\n            this.numberOfMoves += 1;\r\n\r\n            return;\r\n        }\r\n\r\n        console.log(\"didn't move\");\r\n    };\r\n\r\n    private moveTileToPos = (\r\n        tileIndex: number,\r\n        toX: number,\r\n        toY: number,\r\n        startX: number,\r\n        startY: number,\r\n    ) => {\r\n        this.movingTile = true;\r\n        // this.movingToPoint = { x: toX, y: toY };\r\n        this.movingTileIndex = tileIndex;\r\n        this.travelPath = new Path(false, () => {\r\n            this.movingTile = false;\r\n            if (\r\n                this.tiles[this.movingTileIndex].atOriginalRowAndCol &&\r\n                this.tiles[this.movingTileIndex].justMoved\r\n            ) {\r\n                this.tiles[this.movingTileIndex].justMoved = false;\r\n                // shoot off sparks\r\n                console.log('SHOOT OFF SPARKS');\r\n                this.particleSystem.sparks(\r\n                    this.tiles[this.movingTileIndex].center,\r\n                    100,\r\n                    this.sparksParams,\r\n                );\r\n            }\r\n\r\n            if (this.tiles.every(x => x.atOriginalRowAndCol)) {\r\n                // console.log('Game over!');\r\n                this.eventSystem.addEvent(2000, 1, () => {\r\n                    this.endGame();\r\n                });\r\n            }\r\n        });\r\n\r\n        this.travelPath.addPoint({ x: startX, y: startY });\r\n        this.travelPath.addPoint({ x: toX, y: toY });\r\n    };\r\n\r\n    private getNumRowsAndCols() {\r\n        return this.curDifficulty === 'easy' ? 2 : 8;\r\n    }\r\n\r\n    private getTileUnderMouse = (pos: Vec2) => {\r\n        for (let i = 0; i < this.tiles.length; i++) {\r\n            if (this.tiles[i].bounds.inBounds(pos)) {\r\n                this.selectedTileIndex = i;\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    private endGame = () => {\r\n        this.audioSystem.clearAllSounds();\r\n\r\n        // TODO: Show end game message here\r\n\r\n        let username = prompt('You finished!', 'Default');\r\n\r\n        if (!username) {\r\n            username = 'Default';\r\n        }\r\n        username = username.substr(0, 10);\r\n\r\n        // Add score to high score manager\r\n        HighScoreManager.addScore(\r\n            username,\r\n            this.currentTime,\r\n            this.numberOfMoves,\r\n            this.curDifficulty,\r\n        );\r\n\r\n        this.onGameOver();\r\n    };\r\n\r\n    private createTiles = () => {\r\n        this.tiles.length = 0;\r\n        this.filledPositions.length = 0;\r\n\r\n        const sourceImageWidth = this.curDifficulty === 'easy' ? 128 : 64;\r\n        const desiredImageWidth = sourceImageWidth;\r\n        const numColsNRows = this.getNumRowsAndCols();\r\n        const centeredOffset =\r\n            (1024 - desiredImageWidth * numColsNRows) / 2 +\r\n            desiredImageWidth / 2;\r\n        const startingPoint = {\r\n            x: centeredOffset,\r\n            y: centeredOffset,\r\n        };\r\n\r\n        for (let row = 0; row < numColsNRows; row++) {\r\n            this.filledPositions.push([]);\r\n            for (let col = 0; col < numColsNRows; col++) {\r\n                this.filledPositions[row].push({\r\n                    filled: true,\r\n                    point: {\r\n                        x: startingPoint.x + col * desiredImageWidth,\r\n                        y: startingPoint.y + row * desiredImageWidth,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        this.filledPositions[numColsNRows - 1][numColsNRows - 1].filled = false;\r\n        // debugger;\r\n\r\n        let temp = [];\r\n\r\n        let currentImage = 0;\r\n        for (let row = 0; row < numColsNRows; row++) {\r\n            for (let col = 0; col < numColsNRows; col++) {\r\n                if (currentImage === numColsNRows * numColsNRows - 1) {\r\n                    break;\r\n                }\r\n                temp.push(\r\n                    new Tile(\r\n                        {\r\n                            x: startingPoint.x + col * desiredImageWidth,\r\n                            y: startingPoint.y + row * desiredImageWidth,\r\n                        },\r\n                        `graphics/Tile${sourceImageWidth}-${currentImage}.png`,\r\n                        desiredImageWidth,\r\n                        { row, col },\r\n                    ),\r\n                );\r\n                currentImage++;\r\n            }\r\n        }\r\n\r\n        this.tiles = shuffle(temp);\r\n    };\r\n\r\n    private startTimer(): void {\r\n        this.currentTime = 0;\r\n        this.eventSystem.addEvent(1000, Infinity, () => {\r\n            this.currentTime += 1;\r\n        });\r\n    }\r\n\r\n    private checkIfAnyAtOriginalRowAndCol = () => {\r\n        for (let i = 0; i < this.tiles.length; i++) {\r\n            if (this.tiles[i].atOriginalRowAndCol && this.tiles[i].justMoved) {\r\n                this.tiles[i].justMoved = false;\r\n                // shoot off sparks\r\n                console.log('SHOOT OFF SPARKS');\r\n                this.particleSystem.sparks(\r\n                    this.tiles[i].center,\r\n                    100,\r\n                    this.sparksParams,\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    // private checkEndConditions = () => {\r\n    //     if (this.tiles.every(x => x.atOriginalRowAndCol)) {\r\n    //         // console.log('Game over!');\r\n    //         this.endGame();\r\n    //     }\r\n    // };\r\n}\r\n","import { CanvasRenderer } from '../Engine/Renderers/CanvasRenderer';\r\nimport Mouse, { GameMouseEvent } from '../Engine/Input/Mouse';\r\nimport { AudioSystem } from '../Engine/Systems/AudioSystem';\r\nimport GameLoop from '../Engine/BaseComponents/GameLoop';\r\nimport Menu from './Screens/Menu';\r\nimport GameModel from './GameModel';\r\nimport { PossibleDifficulties } from '../Engine/Managers/HighScoreManager';\r\n\r\nexport default class GamePlay extends GameLoop<CanvasRenderer> {\r\n    private mouse: Mouse;\r\n    private internalMouseClick: (gev: GameMouseEvent) => void;\r\n    private internalMouseMove: (gev: GameMouseEvent) => void;\r\n\r\n    private menu: Menu;\r\n    private gameModel: GameModel;\r\n\r\n    private readonly audioSystem: AudioSystem = new AudioSystem();\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas, CanvasRenderer);\r\n\r\n        this.menu = new Menu(this.setupNewGame);\r\n        this.gameModel = new GameModel(this.setupMenu);\r\n\r\n        this.mouse = new Mouse(canvas);\r\n        this.addMouseHandlers();\r\n    }\r\n\r\n    public play(): void {\r\n        this.setupMenu();\r\n        this.start();\r\n    }\r\n\r\n    private setupMenu = () => {\r\n        this.mouse.clearInputBuffer();\r\n        this.clearAllInternals();\r\n\r\n        this.internalProcessInput = () => {\r\n            this.mouse.process();\r\n        };\r\n\r\n        this.internalMouseClick = this.menu.mouseClick;\r\n        this.internalRender = this.menu.render;\r\n    };\r\n\r\n    private setupNewGame = (difficulty: PossibleDifficulties) => {\r\n        this.mouse.clearInputBuffer();\r\n        this.clearAllInternals();\r\n\r\n        this.internalProcessInput = () => {\r\n            this.mouse.process();\r\n        };\r\n\r\n        this.internalRender = this.gameModel.render;\r\n        this.internalUpdate = this.gameModel.update;\r\n        this.internalMouseClick = this.gameModel.mouseClick;\r\n\r\n        this.gameModel.difficulty = difficulty;\r\n        // Should this be here? Attaching methods should be enough?\r\n        // How would the game model know it is a new game?\r\n        this.gameModel.start();\r\n    };\r\n\r\n    private clearAllInternals = () => {\r\n        this.clearBaseInternals();\r\n        this.internalMouseClick = () => {};\r\n        this.internalMouseMove = () => {};\r\n    };\r\n\r\n    private addMouseHandlers = () => {\r\n        this.mouse.register('click', (gev: GameMouseEvent) => {\r\n            this.internalMouseClick(gev);\r\n        });\r\n\r\n        this.mouse.register('mousemove', (gev: GameMouseEvent) => {\r\n            this.internalMouseMove(gev);\r\n        });\r\n    };\r\n\r\n    public destroy = () => {\r\n        this.mouse.destroy();\r\n        this.audioSystem.destroy();\r\n    };\r\n}\r\n","import GamePlay from './Game/GamePlay';\r\n\r\nconst canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\r\n\r\nconst gamePlay = new GamePlay(canvas);\r\ngamePlay.play();\r\n\r\nconst handleResize = (ev: any) => {\r\n    const { innerWidth, innerHeight } = ev.target as Window;\r\n\r\n    const minSize = (Math.min(innerWidth, innerHeight) - 16).toString();\r\n    canvas.style.width = minSize;\r\n    canvas.style.height = minSize;\r\n};\r\n\r\nwindow.addEventListener('resize', handleResize);\r\nhandleResize({ target: window });\r\n"]}