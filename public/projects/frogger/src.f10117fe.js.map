{"version":3,"sources":["src/Engine/Renderers/CanvasRenderer.ts","src/Engine/Settings/GameSettings.ts","src/Engine/Input/Mouse.ts","src/Engine/Audio/Audio.ts","src/Engine/Systems/AudioSystem.ts","src/Engine/BaseComponents/GameLoop.ts","src/Engine/Geometry/Rectangle.ts","src/Game/Renderers/ButtonRenderer.ts","src/Game/Screens/BaseScreen.ts","src/Engine/Renderers/TextRenderer.ts","src/Game/Screens/Credits.ts","src/Engine/Managers/HighScoreManager.ts","src/Game/Screens/HighScores.ts","src/Engine/Managers/ControlsManager.ts","src/Game/Screens/Controls.ts","src/Game/Screens/Menu.ts","src/Engine/Events/Event.ts","src/Engine/Systems/EventSystem.ts","src/Engine/Math/Vec2.ts","src/Game/Objects/Path.ts","src/Engine/Animation/Animation.ts","settings.js","src/Game/Objects/Player.ts","src/Engine/Graphics/SpriteSheet.ts","src/Game/Objects/PathedObject.ts","src/Game/Objects/AnimatedAnimal.ts","src/Game/Systems/PathedObjectSystem.ts","src/Game/Objects/HomePad.ts","src/Game/Renderers/HomePadRenderer.ts","src/Engine/Math/random.ts","src/Game/Systems/HomePadSystem.ts","src/Engine/Systems/BaseParticleSystem.ts","src/Engine/Graphics/Particle.ts","src/Game/Objects/PathedParticle.ts","src/Game/Systems/ParticleSystem.ts","src/Engine/Renderers/ParticleSystemRenderer.ts","src/Game/Systems/ScoringSystem.ts","src/Engine/Input/Keyboard.ts","src/Game/Helpers/character.ts","src/Game/GameModel.ts","src/Game/GamePlay.ts","src/index.ts","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["module","exports","showCollisionShapes","OVERLAY_ID","OldModule","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import Vec2 from '../Math/Vec2';\r\nimport { Texture } from '../Graphics/Texture';\r\nimport SpriteSheet from '../Graphics/SpriteSheet';\r\nimport Rectangle from '../Geometry/Rectangle';\r\n\r\ntype Point = { x: number; y: number };\r\n\r\n/**\r\n * Renders things to a 2D HTML Canvas\r\n */\r\nexport class CanvasRenderer {\r\n    private context: CanvasRenderingContext2D;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.context = canvas.getContext('2d');\r\n    }\r\n\r\n    public get middleX() {\r\n        return this.width / 2;\r\n    }\r\n\r\n    public get width() {\r\n        return this.context.canvas.width;\r\n    }\r\n\r\n    public clear() {\r\n        const { width, height } = this.context.canvas;\r\n\r\n        this.context.clearRect(0, 0, width, height + 100);\r\n    }\r\n\r\n    public drawRectangle(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        rotation: number,\r\n        fillStyle: string | CanvasGradient,\r\n        strokeStyle?: string,\r\n    ) {\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.lineWidth = 5;\r\n\r\n        if (strokeStyle) {\r\n            this.context.strokeStyle = strokeStyle;\r\n        }\r\n\r\n        this.context.save();\r\n        this.context.translate(x, y);\r\n        this.context.rotate(rotation);\r\n        this.context.translate(-x, -y);\r\n\r\n        if (strokeStyle) {\r\n            this.context.stroke();\r\n        }\r\n\r\n        this.context.fillRect(x, y, width, height);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawText(\r\n        pos: Vec2,\r\n        text: string,\r\n        rotation: number = 0,\r\n        center: boolean = false,\r\n        fillStyle: string = '#000',\r\n        font: string = '64px arial',\r\n    ) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const width = this.context.measureText(text).width;\r\n        this.context.restore();\r\n\r\n        this.context.save();\r\n        this.context.font = font;\r\n        let height = this.context.measureText('m').width;\r\n        this.context.restore();\r\n\r\n        this.context.save();\r\n        this.context.font = font;\r\n\r\n        this.context.fillStyle = fillStyle;\r\n\r\n        const x = center ? pos.x - width / 2 : pos.x;\r\n        const y = center ? pos.y - width / 2 : pos.y;\r\n\r\n        this.context.textBaseline = 'top';\r\n        this.context.translate(x + width / 2, y + height / 2);\r\n        this.context.rotate(rotation);\r\n        this.context.translate(-(x + width / 2), -(y + height / 2));\r\n\r\n        this.context.fillText(text, x, pos.y);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawPoints(\r\n        points: Point[],\r\n        strokeStyle: string,\r\n        fillStyle: string,\r\n        closePath: boolean = false,\r\n    ) {\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = strokeStyle;\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.lineWidth = 3;\r\n\r\n        this.context.moveTo(points[0].x, points[0].y);\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n            this.context.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        if (closePath) {\r\n            this.context.closePath();\r\n        }\r\n        this.context.fill();\r\n        this.context.stroke();\r\n    }\r\n\r\n    public getTextWidth(text: string, font: string) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const width = this.context.measureText(text).width;\r\n        this.context.restore();\r\n        return width;\r\n    }\r\n\r\n    public getFontHeight(font: string) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const height = this.context.measureText('m').width;\r\n        this.context.restore();\r\n        return height;\r\n    }\r\n\r\n    public drawTexture(texture: Texture) {\r\n        if (texture.ready) {\r\n            this.context.save();\r\n            this.context.translate(texture.center.x, texture.center.y);\r\n            this.context.rotate(texture.rotation);\r\n            this.context.translate(-texture.center.x, -texture.center.y);\r\n            this.context.drawImage(\r\n                texture.image,\r\n                texture.center.x - texture.width / 2,\r\n                texture.center.y - texture.height / 2,\r\n                texture.width,\r\n                texture.height,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the texure from the bounds stored in the key.\r\n     * @param spriteSheet Sprite sheet to pull dat from\r\n     * @param key Key to get bounds\r\n     * @param center Center of the texture\r\n     * @param centered Is the texured centered on x & y?\r\n     * @param centered Is the\r\n     */\r\n    public drawSubTexture(\r\n        spriteSheet: SpriteSheet,\r\n        key: string,\r\n        center: Vec2,\r\n        rotation: number,\r\n        centered: boolean = false,\r\n    ) {\r\n        if (spriteSheet.ready) {\r\n            const bounds = spriteSheet.getBounds(key);\r\n\r\n            const x = centered ? center.x - bounds.w / 2 : center.x;\r\n            const y = centered ? center.y - bounds.h / 2 : center.y;\r\n\r\n            this.context.save();\r\n            this.context.translate(center.x, center.y);\r\n            this.context.rotate(rotation);\r\n            this.context.translate(-center.x, -center.y);\r\n            this.context.drawImage(\r\n                spriteSheet.image,\r\n                bounds.x,\r\n                bounds.y,\r\n                bounds.w,\r\n                bounds.h,\r\n                x,\r\n                y,\r\n                bounds.w + 0.5,\r\n                bounds.h + 0.5,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the texure in the clipping area\r\n     * @param spriteSheet Sprite sheet to pull dat from\r\n     * @param key Key to get bounds\r\n     * @param center Center of the texture\r\n     * @param centered Is the texured centered on x & y?\r\n     * @param clippingArea Area to clip\r\n     */\r\n    public drawSubTextureInClip(\r\n        spriteSheet: SpriteSheet,\r\n        key: string,\r\n        center: Vec2,\r\n        centered: boolean = false,\r\n        clippingArea: Rectangle,\r\n    ) {\r\n        if (spriteSheet.ready) {\r\n            const bounds = spriteSheet.getBounds(key);\r\n\r\n            const x = centered ? center.x - bounds.w / 2 : center.x;\r\n            const y = centered ? center.y - bounds.h / 2 : center.y;\r\n\r\n            this.context.save();\r\n\r\n            this.context.rect(\r\n                clippingArea.x,\r\n                clippingArea.y,\r\n                clippingArea.w,\r\n                clippingArea.h,\r\n            );\r\n            this.context.clip();\r\n\r\n            this.context.drawImage(\r\n                spriteSheet.image,\r\n                bounds.x,\r\n                bounds.y,\r\n                bounds.w,\r\n                bounds.h,\r\n                x,\r\n                y,\r\n                bounds.w + 0.5,\r\n                bounds.h + 0.5,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    public createGradient(pt1: Vec2, pt2: Vec2) {\r\n        return this.context.createLinearGradient(pt1.x, pt1.y, pt2.x, pt2.y);\r\n    }\r\n\r\n    public drawStrokeRect(\r\n        x: number,\r\n        y: number,\r\n        w: number,\r\n        h: number,\r\n        style: string,\r\n    ) {\r\n        this.context.strokeStyle = style;\r\n        this.context.lineWidth = 3;\r\n\r\n        this.context.save();\r\n\r\n        this.context.strokeRect(x, y, w, h);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawCircle(\r\n        x: number,\r\n        y: number,\r\n        radius: number,\r\n        fillStyle = '#000',\r\n        strokeStyle = '#fff',\r\n    ) {\r\n        this.context.save();\r\n        this.context.beginPath();\r\n        this.context.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.fill();\r\n        this.context.lineWidth = 5;\r\n        this.context.strokeStyle = strokeStyle;\r\n        this.context.stroke();\r\n        this.context.restore();\r\n    }\r\n}\r\n","export default class GameSettings {\r\n    private static _width: number = 1024;\r\n    private static _height: number = 1024;\r\n\r\n    public static updateWithCanvas(canvas: HTMLCanvasElement) {\r\n        GameSettings._width = canvas.width;\r\n        GameSettings._height = canvas.height;\r\n    }\r\n\r\n    static get width() {\r\n        return this._width;\r\n    }\r\n\r\n    static get height() {\r\n        return this._height;\r\n    }\r\n}\r\n","import Dictionary from '../Interfaces/Dictionary';\r\nimport GameSettings from '../Settings/GameSettings';\r\n\r\n/**\r\n * Mouse event for the game. Holds the native event, along with the positing of it in the HTML element.\r\n */\r\nexport type GameMouseEvent = { ev: MouseEvent; pos: Vec2 };\r\ntype Command = (gameMouseEvent: GameMouseEvent) => void;\r\ntype Vec2 = { x: number; y: number };\r\ntype SupportedEventTypes = 'click' | 'mousemove';\r\n\r\nexport default class Mouse {\r\n    private _handlers: Dictionary<Command[]> = {};\r\n    private _inputBuffer: Dictionary<MouseEvent> = {};\r\n\r\n    constructor(private htmlElement: HTMLElement) {\r\n        this._addEventListeners();\r\n    }\r\n\r\n    public destroy(): void {\r\n        this._removeEventListeners();\r\n\r\n        this._handlers = {};\r\n    }\r\n\r\n    public resetHandlers(): void {\r\n        this._handlers = {};\r\n    }\r\n\r\n    public clearInputBuffer(): void {\r\n        this._inputBuffer = {};\r\n    }\r\n\r\n    public register(eventName: SupportedEventTypes, handler: Command) {\r\n        if (!this._handlers[eventName]) {\r\n            this._handlers[eventName] = [];\r\n        }\r\n        this._handlers[eventName].push(handler);\r\n    }\r\n\r\n    public process = () => {\r\n        for (const key in this._inputBuffer) {\r\n            if (this._inputBuffer.hasOwnProperty(key)) {\r\n                for (\r\n                    let i = 0;\r\n                    this._handlers[key] && i < this._handlers[key].length;\r\n                    i++\r\n                ) {\r\n                    const ev = this._inputBuffer[key];\r\n                    this._handlers[key][i]({\r\n                        ev,\r\n                        pos: this.getPos(ev),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this._inputBuffer = {};\r\n    };\r\n\r\n    private _addEventListeners = () => {\r\n        this.htmlElement.addEventListener('click', this._handleInput);\r\n        this.htmlElement.addEventListener('mousemove', this._handleInput);\r\n    };\r\n\r\n    private _removeEventListeners = () => {\r\n        this.htmlElement.removeEventListener('click', this._handleInput);\r\n        this.htmlElement.removeEventListener('mousemove', this._handleInput);\r\n    };\r\n\r\n    private _handleInput = (ev: MouseEvent) => {\r\n        if (ev.type === 'click' || ev.type === 'mousemove') {\r\n            this._inputBuffer[ev.type] = ev;\r\n        }\r\n    };\r\n\r\n    private getPos(event: MouseEvent): Vec2 {\r\n        const rect = this.htmlElement.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        const ratioX = GameSettings.width / rect.width;\r\n        const ratioY = GameSettings.height / rect.height;\r\n        return { x: x * ratioX, y: y * ratioY };\r\n    }\r\n}\r\n","export class GameAudio {\r\n    private elapsedTime: number = 0;\r\n\r\n    private audioEl: HTMLAudioElement;\r\n\r\n    constructor(\r\n        private source: string,\r\n        private delay: number = 0,\r\n        private loop: boolean = false,\r\n        private volume: number = 1,\r\n        private callback: () => void,\r\n    ) {}\r\n\r\n    public update = (elapsedTime: number) => {\r\n        if (this.audioEl) {\r\n            return;\r\n        }\r\n\r\n        this.elapsedTime += elapsedTime;\r\n        if (this.elapsedTime >= this.delay) {\r\n            this.audioEl = new Audio(this.source);\r\n            this.audioEl.volume = this.volume;\r\n            if (this.loop) {\r\n                this.audioEl.addEventListener(\r\n                    'ended',\r\n                    function() {\r\n                        this.currentTime = 0;\r\n                        this.play();\r\n                    },\r\n                    false,\r\n                );\r\n            }\r\n            this.audioEl.play().then(this.callback);\r\n        }\r\n    };\r\n\r\n    public pause = () => {\r\n        if (this.audioEl) {\r\n            this.audioEl.pause();\r\n        }\r\n    };\r\n\r\n    public play = () => {\r\n        if (this.audioEl) {\r\n            this.audioEl.play();\r\n        }\r\n    };\r\n\r\n    get done() {\r\n        return this.audioEl && this.audioEl.played && !this.loop;\r\n    }\r\n\r\n    public destory = () => {\r\n        this.audioEl.pause();\r\n    };\r\n}\r\n","import { IUpdateable } from '../Interfaces/IUpdateable';\r\nimport { GameAudio } from '../Audio/Audio';\r\n\r\nexport class AudioSystem implements IUpdateable {\r\n    private audio: GameAudio[] = [];\r\n    public addAudio = (\r\n        source: string,\r\n        delay: number = 0,\r\n        loop: boolean = false,\r\n        volume: number = 1,\r\n        callback?: () => void,\r\n    ) => {\r\n        this.audio.push(new GameAudio(source, delay, loop, volume, callback));\r\n    };\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = this.audio.length - 1; i >= 0; i--) {\r\n            this.audio[i].update(elapsedTime);\r\n\r\n            if (this.audio[i].done) {\r\n                this.audio.splice(i, 1);\r\n                continue;\r\n            }\r\n            this.audio[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public clearAllSounds = () => {\r\n        for (let i = 0; i < this.audio.length; i++) {\r\n            this.audio[i].pause();\r\n        }\r\n        this.audio.length = 0;\r\n    };\r\n\r\n    public destroy = () => {\r\n        for (let i = 0; i < this.audio.length; i++) {\r\n            this.audio[i].destory();\r\n        }\r\n        this.audio.length = 0;\r\n    };\r\n}\r\n","/**\r\n * Base class for a game loop.\r\n */\r\nexport default class GameLoop<RendererType> {\r\n    private previousTimeStamp: number = 0;\r\n    private cr: RendererType;\r\n    protected isGameOver: boolean = false;\r\n\r\n    /**\r\n     * Will be called every game loop. You should put mouse or keyboard processes here.\r\n     */\r\n    protected internalProcessInput: (elapsedTime: number) => void;\r\n    /**\r\n     * Will be called every game loop. Should set this to what you need.\r\n     */\r\n    protected internalUpdate: (elapsedTime: number) => void;\r\n    /**\r\n     * Will be called every game loop. Depending on the templated RenderType you will need to use that.\r\n     */\r\n    protected internalRender: (cr: RendererType) => void;\r\n\r\n    constructor(\r\n        canvas: HTMLCanvasElement,\r\n        RenderCreator: new (...args: any[]) => RendererType,\r\n    ) {\r\n        this.cr = new RenderCreator(canvas);\r\n    }\r\n\r\n    /**\r\n     * Starts the game loop.\r\n     */\r\n    protected start = () => {\r\n        this.previousTimeStamp = performance.now();\r\n        requestAnimationFrame(this.gameLoop);\r\n    };\r\n\r\n    /**\r\n     * Clears the internals for process input, update, and render.\r\n     */\r\n    protected clearBaseInternals = () => {\r\n        this.internalProcessInput = () => {};\r\n        this.internalRender = () => {};\r\n        this.internalUpdate = () => {};\r\n    };\r\n\r\n    private gameLoop = (timeStamp: number) => {\r\n        const elapsedTime = timeStamp - this.previousTimeStamp;\r\n        this.previousTimeStamp = timeStamp;\r\n\r\n        this.processInput(elapsedTime);\r\n        this.update(elapsedTime);\r\n        this.render();\r\n\r\n        if (!this.isGameOver) {\r\n            requestAnimationFrame(this.gameLoop);\r\n        }\r\n    };\r\n\r\n    private processInput = (elapsedTime: number) => {\r\n        this.internalProcessInput(elapsedTime);\r\n    };\r\n\r\n    private update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n    };\r\n\r\n    private render = () => {\r\n        this.internalRender(this.cr);\r\n    };\r\n}\r\n","import Vec2 from '../Math/Vec2';\r\n\r\nexport default class Rectangle {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public w: number,\r\n        public h: number,\r\n    ) {}\r\n\r\n    public inBounds(pos: Vec2) {\r\n        return (\r\n            pos.x >= this.x &&\r\n            pos.x <= this.x + this.w &&\r\n            pos.y >= this.y &&\r\n            pos.y <= this.y + this.h\r\n        );\r\n    }\r\n}\r\n\r\nexport function copy(a: Rectangle) {\r\n    return new Rectangle(a.x, a.y, a.w, a.h);\r\n}\r\n","import Button from '../UI/Button';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nconst ButtonRenderer = (button: Button) => (cr: CanvasRenderer) => {\r\n    const { x, y, w, h } = button.bounds;\r\n\r\n    cr.drawRectangle(x, y, w, h, 0, button.style?.fill ?? '#000');\r\n\r\n    const { content, font } = button.text;\r\n\r\n    // Center text withing the rectangle.\r\n    const textWidth = cr.getTextWidth(content, font);\r\n    const textHeight = cr.getFontHeight(font);\r\n\r\n    const textXOff = (textWidth - w) / 2;\r\n    const textYOff = (textHeight - h) / 2;\r\n\r\n    cr.drawText(\r\n        { x: x - textXOff, y: y - textYOff },\r\n        content,\r\n        0,\r\n        false,\r\n        button.text.fill ?? '#fff',\r\n        font,\r\n    );\r\n};\r\n\r\nexport default ButtonRenderer;\r\n","import { GameMouseEvent } from '../../Engine/Input/Mouse';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport ButtonRenderer from '../Renderers/ButtonRenderer';\r\nimport Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport Button from '../UI/Button';\r\n\r\nexport default class BaseScreen {\r\n    private internalMouseMove: (gev: GameMouseEvent) => void;\r\n    protected internalMouseClick: (gev: GameMouseEvent) => void;\r\n    protected internalRender: (cr: CanvasRenderer) => void;\r\n\r\n    public refresh?: () => void;\r\n\r\n    protected buttons: Button[] = [];\r\n    protected readonly buttonW = 400;\r\n    protected readonly buttonX = (1024 - this.buttonW) / 2;\r\n\r\n    protected renderers: ((cr: CanvasRenderer) => void)[] = [];\r\n\r\n    constructor(public readonly title: string) {\r\n        this.internalMouseClick = this.findMouseClickOnButtons;\r\n        this.internalRender = this.renderButtons;\r\n    }\r\n\r\n    protected createRenderersFromButtons = () => {\r\n        for (let i = 0; i < this.buttons.length; i++) {\r\n            this.renderers.push(ButtonRenderer(this.buttons[i]));\r\n        }\r\n    };\r\n\r\n    protected clearRenderers = () => {\r\n        console.log('hello!');\r\n        this.renderers = [];\r\n    };\r\n\r\n    private findMouseClickOnButtons = (gev: GameMouseEvent) => {\r\n        for (let i = 0; i < this.buttons.length; i++) {\r\n            const oldBounds = this.buttons[i].bounds;\r\n            if (\r\n                new Rectangle(\r\n                    oldBounds.x,\r\n                    oldBounds.y,\r\n                    oldBounds.w,\r\n                    oldBounds.h,\r\n                ).inBounds(gev.pos)\r\n            ) {\r\n                this.buttons[i].onSelect();\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    protected resetMouseClick = () => {\r\n        this.internalMouseClick = this.findMouseClickOnButtons;\r\n    };\r\n\r\n    public mouseClick = (gev: GameMouseEvent) => {\r\n        this.internalMouseClick(gev);\r\n    };\r\n\r\n    protected renderButtons = (cr: CanvasRenderer) => {\r\n        cr.drawText({ x: cr.middleX, y: 100 }, this.title, 0, true);\r\n        for (let i = 0; i < this.renderers.length; i++) {\r\n            this.renderers[i](cr);\r\n        }\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        cr.clear();\r\n        this.internalRender(cr);\r\n    };\r\n\r\n    /**\r\n     * Gets the x position for a centered thing\r\n     */\r\n    protected getXFromW = (w: number) => {\r\n        return (1024 - w) / 2;\r\n    };\r\n\r\n    protected getXAndW = (startingW: number) => {\r\n        return { x: this.getXAndW(startingW), w: startingW };\r\n    };\r\n\r\n    protected createBackButton = (curY: number, onSelect: () => void) => {\r\n        const backW = this.buttonW + 50;\r\n        const backX = this.getXFromW(backW);\r\n\r\n        this.buttons.push({\r\n            bounds: new Rectangle(backX, (curY += 200), backW, 100),\r\n            text: { content: 'Back To Menu', font: '64px arial' },\r\n            onSelect: onSelect,\r\n        });\r\n    };\r\n}\r\n","import Text from '../Graphics/Text';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nconst TextRenderer = (text: Text) => (cr: CanvasRenderer) => {\r\n    cr.drawText(\r\n        text.pos,\r\n        text.content,\r\n        text.rotation ?? 0,\r\n        text.centered ?? false,\r\n        text.fill ?? '#000',\r\n        text.font ?? '64px arial',\r\n    );\r\n};\r\n\r\nexport default TextRenderer;\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport TextRenderer from '../../Engine/Renderers/TextRenderer';\r\n\r\nexport default class Credits extends BaseScreen {\r\n    constructor(onBack: () => void) {\r\n        super('Credits');\r\n\r\n        let curY = 200;\r\n\r\n        const creditsText = [\r\n            'This work was done by Matt Bishop.',\r\n            'I was him who did it.',\r\n            'Frogger would be fun they said... wait who?',\r\n            'Less is more they say.',\r\n        ];\r\n\r\n        for (let i = 0; i < creditsText.length; i++) {\r\n            this.renderers.push(\r\n                TextRenderer({\r\n                    content: `${creditsText[i]}`,\r\n                    pos: { x: 150, y: curY += 50 },\r\n                    font: '32px arial',\r\n                }),\r\n            );\r\n        }\r\n\r\n        this.createBackButton(curY, onBack);\r\n\r\n        this.createRenderersFromButtons();\r\n    }\r\n}\r\n","import IHighScore from '../Interfaces/IHighScore';\r\n\r\nexport default class HighScoreManager {\r\n    private static storageKey: string = '@frogger-high-scores';\r\n\r\n    public static clear = () => {\r\n        localStorage.removeItem(HighScoreManager.storageKey);\r\n    };\r\n\r\n    public static getHighScores = () => {\r\n        const highScores = localStorage[HighScoreManager.storageKey];\r\n        if (!highScores) {\r\n            return [];\r\n        } else {\r\n            return JSON.parse(highScores) as IHighScore[];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sends a username and a score to be added to the high scores.\r\n     *\r\n     * Returns true if it was added, false if it wasn't.\r\n     */\r\n    public static addScore = (username: string, score: number) => {\r\n        let highScores = HighScoreManager.getHighScores();\r\n\r\n        highScores.push({ username, score: parseInt(score.toFixed(0)) });\r\n        highScores.sort((a: IHighScore, b: IHighScore) => {\r\n            if (a.score < b.score) {\r\n                return -1;\r\n            } else if (a.score === b.score) {\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        });\r\n\r\n        if (highScores.length > 5) {\r\n            const removedItem = highScores.splice(0, 1)[0];\r\n            if (\r\n                removedItem.score === score &&\r\n                removedItem.username === username\r\n            ) {\r\n                // The object wasn't added, it was removed immediately.\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localStorage[HighScoreManager.storageKey] = JSON.stringify(highScores);\r\n\r\n        return true;\r\n    };\r\n\r\n    public static isHighScore = (score: number) => {\r\n        let highScores = HighScoreManager.getHighScores();\r\n\r\n        if (highScores.length < 5) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < highScores.length; i++) {\r\n            if (highScores[i].score < score) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport HighScoreManager from '../../Engine/Managers/HighScoreManager';\r\nimport TextRenderer from '../../Engine/Renderers/TextRenderer';\r\nimport Text from '../../Engine/Graphics/Text';\r\n\r\nexport default class HighScores extends BaseScreen {\r\n    private highScoreTextPairs: { username: Text; score: Text }[] = [];\r\n\r\n    constructor(private onBack: () => void) {\r\n        super('High Scores');\r\n        this.createScreen();\r\n    }\r\n\r\n    private createScreen = () => {\r\n        this.renderers.length = 0;\r\n        this.buttons.length = 0;\r\n\r\n        let curY = 250;\r\n\r\n        const usernameX = 175;\r\n        const scoreX = 700;\r\n\r\n        const highScores = HighScoreManager.getHighScores().reverse();\r\n\r\n        for (let i = 0; i < highScores.length; i++) {\r\n            const { username, score } = highScores[i];\r\n            const usernameText: Text = {\r\n                content: username.toString(),\r\n                pos: { x: usernameX, y: curY },\r\n            };\r\n            this.renderers.push(TextRenderer(usernameText));\r\n\r\n            const scoreText: Text = {\r\n                content: score.toString(),\r\n                pos: { x: scoreX, y: curY },\r\n            };\r\n            this.renderers.push(TextRenderer(scoreText));\r\n\r\n            this.highScoreTextPairs.push({\r\n                username: usernameText,\r\n                score: scoreText,\r\n            });\r\n\r\n            curY += 100;\r\n        }\r\n\r\n        this.createBackButton(curY - 100, this.onBack);\r\n\r\n        this.createRenderersFromButtons();\r\n    };\r\n\r\n    public refresh = () => {\r\n        this.createScreen();\r\n    };\r\n}\r\n","// type Controls = { moveLeft: string; moveRight: string; shoot: string };\r\n\r\nexport default class ControlsManager {\r\n    private static storageKey: string = '@frogger-controls';\r\n\r\n    private static defaultControls: string[] = [\r\n        'ArrowLeft',\r\n        'ArrowRight',\r\n        'ArrowUp',\r\n        'ArrowDown',\r\n    ];\r\n\r\n    public static clear() {\r\n        localStorage.removeItem(ControlsManager.storageKey);\r\n    }\r\n\r\n    public static getControls(): string[] {\r\n        const controls = localStorage[ControlsManager.storageKey];\r\n\r\n        return controls ? JSON.parse(controls) : [...this.defaultControls];\r\n    }\r\n\r\n    private static setControls(newControls: string[]) {\r\n        localStorage[ControlsManager.storageKey] = JSON.stringify(newControls);\r\n    }\r\n\r\n    public static updateControl(index: number, newKey: string) {\r\n        const controls = localStorage[ControlsManager.storageKey];\r\n\r\n        let newControls = [...this.defaultControls];\r\n        if (controls) {\r\n            newControls = JSON.parse(controls);\r\n        }\r\n\r\n        if (index < 0 || index >= newControls.length) {\r\n            return;\r\n        }\r\n        newControls[index] = newKey;\r\n\r\n        ControlsManager.setControls(newControls);\r\n    }\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport ControlsManager from '../../Engine/Managers/ControlsManager';\r\nimport Button from '../UI/Button';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nexport default class Controls extends BaseScreen {\r\n    private controlsText: string[] = [];\r\n\r\n    private inSelection: boolean = false;\r\n    private selectedControlOptionIndex: number;\r\n\r\n    constructor(private onBack: () => void) {\r\n        super('Controls');\r\n\r\n        let curY = 200;\r\n\r\n        this.initializeControlsText();\r\n        const controls = ControlsManager.getControls();\r\n\r\n        const textW = this.buttonW + 300;\r\n        const textX = this.getXFromW(textW);\r\n\r\n        for (let i = 0; i < this.controlsText.length; i++) {\r\n            const button = {\r\n                bounds: new Rectangle(textX, (curY += 100), textW, 100),\r\n                text: {\r\n                    content: this.createTextContent(\r\n                        this.controlsText[i],\r\n                        controls[i],\r\n                    ),\r\n                    font: '64px arial',\r\n                    fill: '#00aaff',\r\n                },\r\n                onSelect: () => {\r\n                    if (!this.inSelection) {\r\n                        button.text.content = this.createTextContent(\r\n                            this.controlsText[i],\r\n                            'Press a key...',\r\n                        );\r\n                        this.getKeyAndUpdateIndex(i);\r\n                    }\r\n                },\r\n                style: { fill: '#fff' },\r\n            } as Button;\r\n            this.buttons.push(button);\r\n        }\r\n\r\n        this.createBackButton(curY, this.handleOnBack);\r\n\r\n        this.createRenderersFromButtons();\r\n\r\n        this.internalRender = (cr: CanvasRenderer) => {\r\n            cr.drawText({ x: cr.middleX, y: 100 }, this.title, 0, true);\r\n            cr.drawText(\r\n                { x: cr.middleX, y: 200 },\r\n                'Click on an option and press a key to set the control.',\r\n                0,\r\n                true,\r\n                '#000',\r\n                '32px arial',\r\n            );\r\n            for (let i = 0; i < this.renderers.length; i++) {\r\n                this.renderers[i](cr);\r\n            }\r\n        };\r\n    }\r\n\r\n    private initializeControlsText = () => {\r\n        this.controlsText = ['Move Left', 'Move Right', 'Move Up', 'Move Down'];\r\n    };\r\n\r\n    private resetControlsText = () => {\r\n        const controls = ControlsManager.getControls();\r\n        this.initializeControlsText();\r\n        for (let i = 0; i < this.controlsText.length; i++) {\r\n            this.buttons[i].text.content = this.createTextContent(\r\n                this.controlsText[i],\r\n                controls[i].toString(),\r\n            );\r\n        }\r\n    };\r\n\r\n    private handleOnBack = () => {\r\n        this.stopListeningForKey();\r\n        this.resetControlsText();\r\n        this.onBack();\r\n    };\r\n\r\n    private createTextContent = (base: string, left: string) => {\r\n        return `${base}: ${left !== ' ' ? left : 'Space'}`;\r\n    };\r\n\r\n    private getKeyAndUpdateIndex = (index: number) => {\r\n        if (!this.inSelection) {\r\n            this.startListeningForKey();\r\n            this.selectedControlOptionIndex = index;\r\n        }\r\n    };\r\n\r\n    private getNextKey = (ev: KeyboardEvent) => {\r\n        this.stopListeningForKey();\r\n        ControlsManager.updateControl(this.selectedControlOptionIndex, ev.key);\r\n\r\n        this.resetControlsText();\r\n    };\r\n\r\n    private startListeningForKey = () => {\r\n        this.inSelection = true;\r\n        window.addEventListener('keydown', this.getNextKey);\r\n    };\r\n\r\n    private stopListeningForKey = () => {\r\n        this.inSelection = false;\r\n        window.removeEventListener('keydown', this.getNextKey);\r\n    };\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport Credits from './Credits';\r\nimport HighScores from './HighScores';\r\nimport Controls from './Controls';\r\n\r\nexport default class Menu extends BaseScreen {\r\n    private screens: BaseScreen[] = [];\r\n\r\n    constructor(onNewGame: () => void) {\r\n        super('Frogger');\r\n\r\n        let curY = 200;\r\n\r\n        this.buttons.push({\r\n            bounds: new Rectangle(this.buttonX, curY, this.buttonW, 100),\r\n            text: { content: 'New Game', font: '64px arial' },\r\n            onSelect: onNewGame,\r\n        });\r\n\r\n        const screenTypes = [HighScores, Credits, Controls];\r\n\r\n        for (let i = 0; i < screenTypes.length; i++) {\r\n            const screen = new screenTypes[i](this.returnToMenu);\r\n            this.screens.push(screen);\r\n            this.buttons.push({\r\n                bounds: new Rectangle(\r\n                    this.buttonX,\r\n                    (curY += 200),\r\n                    this.buttonW,\r\n                    100,\r\n                ),\r\n                text: { content: screen.title, font: '64px arial' },\r\n                onSelect: () => this.transitionToScreen(i),\r\n            });\r\n        }\r\n\r\n        this.createRenderersFromButtons();\r\n    }\r\n\r\n    private transitionToScreen = (index: number) => {\r\n        if (this.screens[index].refresh) {\r\n            this.screens[index].refresh();\r\n        }\r\n\r\n        this.internalRender = this.screens[index].render;\r\n        this.internalMouseClick = this.screens[index].mouseClick;\r\n    };\r\n\r\n    private returnToMenu = () => {\r\n        this.internalRender = this.renderButtons;\r\n        this.resetMouseClick();\r\n    };\r\n}\r\n","export default class Event {\r\n    private timeSinceLastEvent: number = 0;\r\n\r\n    /**\r\n     * An event structure to a number of things after a time.\r\n     * @param interval Time (ms) between event firings\r\n     * @param numTimes Number of times event will fire\r\n     * @param callback Callback for when the event fires\r\n     */\r\n    constructor(\r\n        private interval: number,\r\n        private numTimes: number,\r\n        private callback?: () => void,\r\n    ) {}\r\n\r\n    public update(elapsedTime: number) {\r\n        this.timeSinceLastEvent += elapsedTime;\r\n\r\n        if (this.timeSinceLastEvent > this.interval) {\r\n            this.timeSinceLastEvent -= this.interval;\r\n            this.numTimes--;\r\n            if (this.callback) {\r\n                this.callback();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get timesLeft(): number {\r\n        return this.numTimes;\r\n    }\r\n}\r\n","import { IUpdateable } from '../Interfaces/IUpdateable';\r\nimport Event from '../Events/Event';\r\n\r\nexport default class EventSystem implements IUpdateable {\r\n    private events: Event[] = [];\r\n    public addEvent = (\r\n        interval: number,\r\n        numTimes: number,\r\n        callback?: () => void,\r\n    ) => {\r\n        this.events.push(new Event(interval, numTimes, callback));\r\n    };\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = 0; i < this.events.length; i++) {\r\n            if (this.events[i].timesLeft <= 0) {\r\n                this.events.splice(i, 1);\r\n                i--;\r\n                continue;\r\n            }\r\n            this.events[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public destroy = () => {\r\n        this.events.length = 0;\r\n    };\r\n\r\n    public clear = () => {\r\n        this.events.length = 0;\r\n    };\r\n}\r\n","export default class Vec2 {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function distSqrd(a: Vec2, b: Vec2) {\r\n    return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);\r\n}\r\n\r\nexport function dist(a: Vec2, b: Vec2) {\r\n    return Math.sqrt(distSqrd(a, b));\r\n}\r\n\r\nexport function diff(a: Vec2, b: Vec2) {\r\n    return { x: b.x - a.x, y: b.y - a.y };\r\n}\r\n\r\nexport function magSqrd(a: Vec2) {\r\n    return Math.pow(a.x, 2) + Math.pow(a.y, 2);\r\n}\r\n\r\nexport function mag(a: Vec2) {\r\n    return Math.sqrt(magSqrd(a));\r\n}\r\n\r\nexport function expand(a: Vec2) {\r\n    return { x: a.x, y: a.y };\r\n}\r\n","import Vec2, { distSqrd, dist, diff } from '../../Engine/Math/Vec2';\r\n\r\n/**\r\n * Represents a path of points\r\n */\r\nexport default class Path {\r\n    private points: Vec2[] = [];\r\n    private curPointIndex: number = 0;\r\n    private curDistanceTraveled: number = 0;\r\n\r\n    // getting percent done? For knowing when to fire stuff?\r\n    // could just use the elapsed time\r\n\r\n    /**\r\n     * Creates a new path\r\n     * @param onEndPath Gets called when the path is finished\r\n     */\r\n    constructor(\r\n        private loop: boolean = false,\r\n        private onEndPath?: () => void,\r\n        private wrap: boolean = false,\r\n    ) {}\r\n\r\n    public addPoint = (point: Vec2) => {\r\n        this.points.push(point);\r\n    };\r\n\r\n    /**\r\n     * Travel a certain distance on the path\r\n     * @param distance Distance to travel\r\n     * @returns The current point on a path\r\n     */\r\n    public travel(distance: number): Vec2 {\r\n        let nextIndex = this.curPointIndex + 1;\r\n\r\n        if (this.curPointIndex >= this.points.length - 1) {\r\n            if (this.loop) {\r\n                this.curPointIndex = this.points.length - 1;\r\n                nextIndex = 0;\r\n            } else if (this.wrap) {\r\n                this.curPointIndex = 0;\r\n                this.curDistanceTraveled = 0;\r\n                nextIndex = 1;\r\n            } else {\r\n                // console.log('Ending');\r\n                // call onEnded?\r\n                if (this.onEndPath) {\r\n                    this.onEndPath();\r\n                }\r\n                return this.points[this.points.length - 1];\r\n            }\r\n        }\r\n\r\n        let distBetweenPoints = dist(\r\n            this.points[this.curPointIndex],\r\n            this.points[nextIndex],\r\n        );\r\n\r\n        this.curDistanceTraveled += distance;\r\n\r\n        // skip over points until we land between two of them\r\n        // or we reach the end\r\n        while (this.curDistanceTraveled >= distBetweenPoints) {\r\n            this.curDistanceTraveled -= distBetweenPoints;\r\n\r\n            if (this.loop) {\r\n                this.curPointIndex =\r\n                    (this.curPointIndex + 1) % this.points.length;\r\n\r\n                nextIndex =\r\n                    this.curPointIndex === 0 ? 1 : this.curPointIndex + 1;\r\n            } else {\r\n                this.curPointIndex++;\r\n                nextIndex = this.curPointIndex + 1;\r\n            }\r\n\r\n            if (this.curPointIndex >= this.points.length - 1) {\r\n                if (this.loop) {\r\n                    nextIndex = 0;\r\n                } else if (this.wrap) {\r\n                    this.curPointIndex = 0;\r\n                    this.curDistanceTraveled = 0;\r\n                    nextIndex = 1;\r\n                } else {\r\n                    // console.log('Ending 2');\r\n                    // call onEnded?\r\n                    if (this.onEndPath) {\r\n                        this.onEndPath();\r\n                    }\r\n                    return this.points[this.points.length - 1];\r\n                }\r\n            }\r\n        }\r\n\r\n        const a = this.points[this.curPointIndex];\r\n        const b = this.points[nextIndex];\r\n\r\n        distBetweenPoints = dist(a, b);\r\n\r\n        const diffBetweenPoints = diff(a, b);\r\n\r\n        const traveledRatio = this.curDistanceTraveled / distBetweenPoints;\r\n\r\n        return {\r\n            x: a.x + diffBetweenPoints.x * traveledRatio,\r\n            y: a.y + diffBetweenPoints.y * traveledRatio,\r\n        };\r\n    }\r\n\r\n    get lengthSquared() {\r\n        let length = 0;\r\n\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            const nextIndex = i + 1;\r\n            if (nextIndex >= this.points.length) {\r\n                return length;\r\n            }\r\n            length += distSqrd(this.points[i], this.points[nextIndex]);\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    get length() {\r\n        return Math.sqrt(this.lengthSquared);\r\n    }\r\n\r\n    get numberOfPoints() {\r\n        return this.points.length;\r\n    }\r\n\r\n    public clear = () => {\r\n        this.points.length = 0;\r\n        this.curDistanceTraveled = 0;\r\n        this.curPointIndex = 0;\r\n    };\r\n}\r\n","export default class Animation {\r\n    private _elapsedTime = 0;\r\n    private _curFrame = 1;\r\n    private _timePerFrame = 0;\r\n\r\n    constructor(\r\n        private frames: string[],\r\n        animTime: number,\r\n        private loop: boolean = false,\r\n    ) {\r\n        this._timePerFrame = animTime / (frames.length + 1);\r\n    }\r\n\r\n    public readonly reset = () => {\r\n        this._elapsedTime = 0;\r\n        this._curFrame = 1;\r\n    };\r\n\r\n    public readonly watch = (elapsedTime: number) => {\r\n        this._elapsedTime += elapsedTime;\r\n\r\n        if (this._elapsedTime >= this._timePerFrame * this._curFrame) {\r\n            if (this.loop) {\r\n                if (this._curFrame >= this.frames.length) {\r\n                    this._elapsedTime = 0;\r\n                    this._curFrame = 1;\r\n                } else {\r\n                    this._curFrame += 1;\r\n                }\r\n            } else {\r\n                this._curFrame +=\r\n                    this._curFrame < this.frames.length\r\n                        ? 1\r\n                        : this.frames.length;\r\n            }\r\n        }\r\n\r\n        return this.frames[this._curFrame - 1];\r\n    };\r\n\r\n    get timePerFrame() {\r\n        return this._timePerFrame;\r\n    }\r\n\r\n    get currentFrame() {\r\n        return this.frames[this._curFrame - 1];\r\n    }\r\n}\r\n","module.exports = {\r\n    showCollisionShapes: false,\r\n};\r\n","import Vec2, { expand } from '../../Engine/Math/Vec2';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport { Circle } from '../../Engine/Math/circle';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport Path from './Path';\r\nimport Animation from '../../Engine/Animation/Animation';\r\nimport settings from '../../../settings';\r\nimport { AudioSystem } from '../../Engine/Systems/AudioSystem';\r\n\r\ninterface Props {\r\n    center: Vec2;\r\n    collisionRadius: number;\r\n    width: number;\r\n    spriteSheet: SpriteSheet;\r\n    /**\r\n     * Number to increase a x or y value by when moving\r\n     */\r\n    delta: number;\r\n}\r\n\r\nexport default class Player {\r\n    private _center: Vec2;\r\n    private _inMove: boolean = false;\r\n    private _animPath: Path;\r\n    private _rotation: number = Math.PI;\r\n\r\n    /**\r\n     * Change in x when on a log or turtle\r\n     */\r\n    private _speedX = 0;\r\n\r\n    private pixels: number = 100;\r\n    /**\r\n     * Time in milliseconds for player travel/animations\r\n     */\r\n    private readonly milli: number = 500;\r\n    private speed: number = this.pixels / this.milli;\r\n\r\n    private _currentFrame: string = 'frogger-idle';\r\n    private _anim = new Animation(\r\n        [\r\n            'frogger-1',\r\n            'frogger-2',\r\n            'frogger-3',\r\n            'frogger-4',\r\n            'frogger-3',\r\n            'frogger-2',\r\n            'frogger-1',\r\n            'frogger-idle',\r\n        ],\r\n        this.milli,\r\n    );\r\n\r\n    private internalUpdate: (elapsedTime: number) => void;\r\n\r\n    constructor(private props: Props, private audioSystem: AudioSystem) {\r\n        this._center = props.center;\r\n        this.internalUpdate = this.handleBeingMoved;\r\n        this._animPath = new Path(false, this.handleAnimationDone);\r\n    }\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n    };\r\n\r\n    public readonly render = (cr: CanvasRenderer) => {\r\n        const { x, y } = this._center;\r\n\r\n        cr.drawSubTexture(\r\n            this.props.spriteSheet,\r\n            this._currentFrame,\r\n            // -60 will line up the sprite in the center vertically. This is because\r\n            // we're drawing a sprite bigger than it actually is.\r\n            { x, y },\r\n            this._rotation,\r\n            true,\r\n        );\r\n\r\n        // draw circle showing center of frogger\r\n        if (settings.showCollisionShapes) {\r\n            cr.drawCircle(x, y, 10);\r\n        }\r\n\r\n        // draw larger circle showing collision radius\r\n    };\r\n\r\n    public moveLeft = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        if (this._center.x <= 1024 * (1 / 13)) {\r\n            return;\r\n        }\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(Math.PI / 2, (a: Vec2) => {\r\n            return { x: a.x - this.props.delta, y: a.y };\r\n        });\r\n    };\r\n\r\n    public moveRight = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        if (this._center.x >= 1024 * (12 / 13)) {\r\n            return;\r\n        }\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(-Math.PI / 2, (a: Vec2) => {\r\n            return { x: a.x + this.props.delta, y: a.y };\r\n        });\r\n    };\r\n\r\n    public moveUp = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        this._speedX = 0;\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(Math.PI, (a: Vec2) => {\r\n            return { x: a.x, y: a.y - this.props.delta };\r\n        });\r\n    };\r\n\r\n    public moveDown = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        if (this._center.y > (1024 * 12) / 13) {\r\n            return;\r\n        }\r\n\r\n        this._speedX = 0;\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(0, (a: Vec2) => {\r\n            return { x: a.x, y: a.y + this.props.delta };\r\n        });\r\n    };\r\n\r\n    public get collisionShape(): Circle {\r\n        return {\r\n            center: this._center,\r\n            radius: this.props.collisionRadius,\r\n        };\r\n    }\r\n\r\n    public get center() {\r\n        return this._center;\r\n    }\r\n\r\n    private initializeMove = (rotation: number, modify: (a: Vec2) => Vec2) => {\r\n        this._inMove = true;\r\n        this._rotation = rotation;\r\n        this._anim.reset();\r\n\r\n        this._animPath.clear();\r\n\r\n        this._animPath.addPoint(expand(this._center));\r\n        this._animPath.addPoint(modify(this._center));\r\n\r\n        this.internalUpdate = this.handleTravelStep;\r\n    };\r\n\r\n    private handleAnimationDone = () => {\r\n        this._currentFrame = 'frogger-1';\r\n        this._inMove = false;\r\n        this.internalUpdate = this.handleBeingMoved;\r\n    };\r\n\r\n    private handleTravelStep = (elapsedTime: number) => {\r\n        if (!this._inMove) {\r\n            return;\r\n        }\r\n\r\n        const newPoint = this._animPath.travel(this.speed * elapsedTime);\r\n        this._center.x = newPoint.x;\r\n        this.handleBeingMoved(elapsedTime);\r\n        this._center.y = newPoint.y;\r\n\r\n        this._currentFrame = this._anim.watch(elapsedTime);\r\n    };\r\n\r\n    get idle() {\r\n        return this._currentFrame === 'frogger-idle' && !this._inMove;\r\n    }\r\n\r\n    set speedX(newDeltaX: number) {\r\n        this._speedX = newDeltaX;\r\n    }\r\n\r\n    private handleBeingMoved = (elapsedTime: number) => {\r\n        this._center.x += this._speedX * elapsedTime;\r\n    };\r\n}\r\n","import Dictionary from '../Interfaces/Dictionary';\r\nimport Rectangle from '../Geometry/Rectangle';\r\n\r\nexport default class SpriteSheet {\r\n    private _ready: boolean = false;\r\n    private _image: HTMLImageElement = new Image();\r\n\r\n    constructor(source: string, private bounds: Dictionary<Rectangle>) {\r\n        this._image.onload = () => {\r\n            this._ready = true;\r\n            console.log('loaded image');\r\n        };\r\n\r\n        this._image.src = source;\r\n    }\r\n\r\n    public getBounds(key: string) {\r\n        if (key === undefined) {\r\n            console.error('Passed in key is undefined');\r\n        }\r\n        return this.bounds[key];\r\n    }\r\n\r\n    public get image() {\r\n        return this._image;\r\n    }\r\n\r\n    public get ready() {\r\n        return this._ready;\r\n    }\r\n}\r\n","import Path from './Path';\r\nimport Vec2 from '../../Engine/Math/Vec2';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport Rectangle, { copy } from '../../Engine/Geometry/Rectangle';\r\nimport settings from '../../../settings';\r\nimport Animation from '../../Engine/Animation/Animation';\r\n\r\nexport interface Props {\r\n    readonly speed: number;\r\n    readonly type: 'car' | 'log' | 'tur';\r\n    readonly center: Vec2;\r\n    readonly ss: SpriteSheet;\r\n    readonly goingLeft: boolean;\r\n    readonly asset: string;\r\n}\r\n\r\ninterface AnimProps {\r\n    readonly frames: string[];\r\n    readonly loopTime: number;\r\n}\r\n\r\ninterface State {\r\n    speed: number;\r\n    path: Path;\r\n    center: Vec2;\r\n    bounds: Rectangle;\r\n}\r\n\r\nexport default class PathedObject {\r\n    protected readonly state: State;\r\n    protected anim?: Animation;\r\n    protected curFrame: string;\r\n    protected rotation: number;\r\n    protected _canStand: boolean = false;\r\n\r\n    constructor(protected readonly props: Props, animProps?: AnimProps) {\r\n        this.state = {\r\n            speed: props.speed,\r\n            path: new Path(false, undefined, true),\r\n            center: props.center,\r\n            bounds: copy(this.props.ss.getBounds(this.props.asset)),\r\n        };\r\n\r\n        if (animProps) {\r\n            this.anim = new Animation(\r\n                animProps.frames,\r\n                animProps.loopTime,\r\n                true,\r\n            );\r\n            this.curFrame = animProps.frames[0];\r\n        } else {\r\n            this.curFrame = this.props.asset;\r\n        }\r\n\r\n        this.rotation = props.goingLeft ? Math.PI : 0;\r\n\r\n        const { w } = this.props.ss.getBounds(this.props.asset);\r\n\r\n        const halfWidth = w / 2;\r\n        if (!props.goingLeft) {\r\n            this.state.path.addPoint({ x: -halfWidth, y: props.center.y });\r\n            this.state.path.addPoint({\r\n                x: 1024 + halfWidth,\r\n                y: props.center.y,\r\n            });\r\n        } else {\r\n            this.state.path.addPoint({\r\n                x: 1024 + halfWidth,\r\n                y: props.center.y,\r\n            });\r\n            this.state.path.addPoint({ x: -halfWidth, y: props.center.y });\r\n        }\r\n\r\n        this.state.path.travel(props.center.x);\r\n    }\r\n\r\n    get speed() {\r\n        return this.state.speed;\r\n    }\r\n\r\n    get goingLeft() {\r\n        return this.props.goingLeft;\r\n    }\r\n\r\n    set speed(newSpeed: number) {\r\n        this.state.speed = newSpeed;\r\n    }\r\n\r\n    get type() {\r\n        return this.anim ? 'alligator' : this.props.type;\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        const newPoint = this.state.path.travel(this.state.speed * elapsedTime);\r\n\r\n        this.state.center = newPoint;\r\n        this.state.bounds.x = newPoint.x - this.state.bounds.w / 2;\r\n        this.state.bounds.y = newPoint.y - this.state.bounds.h / 2;\r\n\r\n        if (this.anim) {\r\n            this.curFrame = this.anim.watch(elapsedTime);\r\n            if (/chomp/.test(this.curFrame)) {\r\n                this.rotation = -Math.PI / 2;\r\n                this._canStand = false;\r\n            } else {\r\n                this.rotation = 0;\r\n                this._canStand = true;\r\n            }\r\n        }\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        cr.drawSubTexture(\r\n            this.props.ss,\r\n            this.curFrame,\r\n            this.state.center,\r\n            this.rotation,\r\n            true,\r\n        );\r\n\r\n        // // center\r\n        if (settings.showCollisionShapes) {\r\n            cr.drawCircle(\r\n                this.state.center.x,\r\n                this.state.center.y,\r\n                10,\r\n                '#fff',\r\n                '#f00',\r\n            );\r\n\r\n            // collision box\r\n            cr.drawRectangle(\r\n                this.state.bounds.x,\r\n                this.state.bounds.y,\r\n                this.state.bounds.w,\r\n                this.state.bounds.h,\r\n                0,\r\n                'rgba(00, 104, 255, 0.5)',\r\n            );\r\n        }\r\n    };\r\n\r\n    public testPoint = (a: Vec2) => {\r\n        // const { x, y } = this.state.center;\r\n        // const { w, h } = this.state.bounds;\r\n\r\n        // const collisionBox = new Rectangle(x - w / 2, y - h / 2, 2, h)\r\n\r\n        return this.state.bounds.inBounds(a);\r\n    };\r\n\r\n    get canStandOn() {\r\n        return this._canStand;\r\n    }\r\n}\r\n","import PathedObject, { Props } from './PathedObject';\r\nimport Animation from '../../Engine/Animation/Animation';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport settings from '../../../settings';\r\n\r\nexport default class AnimatedAnimal extends PathedObject {\r\n    private _anim: Animation;\r\n\r\n    constructor(frames: string[], duration: number, props: Props) {\r\n        super(props);\r\n\r\n        this._anim = new Animation(frames, duration, true);\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        const newPoint = this.state.path.travel(this.state.speed * elapsedTime);\r\n\r\n        this.state.center = newPoint;\r\n        this.state.bounds.x = newPoint.x - this.state.bounds.w / 2;\r\n        this.state.bounds.y = newPoint.y - this.state.bounds.h / 2;\r\n\r\n        this._anim.watch(elapsedTime);\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        cr.drawSubTexture(\r\n            this.props.ss,\r\n            this._anim.currentFrame,\r\n            {\r\n                x: this.state.center.x,\r\n                y: this.state.center.y,\r\n            },\r\n            this.props.goingLeft ? Math.PI : 0,\r\n            true,\r\n        );\r\n\r\n        // // center\r\n        if (settings.showCollisionShapes) {\r\n            cr.drawCircle(\r\n                this.state.center.x,\r\n                this.state.center.y,\r\n                10,\r\n                '#fff',\r\n                '#f00',\r\n            );\r\n            // collision box\r\n            cr.drawRectangle(\r\n                this.state.bounds.x,\r\n                this.state.bounds.y,\r\n                this.state.bounds.w,\r\n                this.state.bounds.h,\r\n                0,\r\n                'rgba(00, 104, 255, 0.5)',\r\n            );\r\n        }\r\n    };\r\n\r\n    get canStandOn() {\r\n        // add case for turtle and aligator\r\n        return !/\\w+-dive-4/.test(this._anim.currentFrame);\r\n    }\r\n}\r\n","import PathedObject from '../Objects/PathedObject';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport AnimatedAnimal from '../Objects/AnimatedAnimal';\r\nimport GameSettings from '../../Engine/Settings/GameSettings';\r\n\r\nexport default class PathedObjectSystem {\r\n    private _objs: PathedObject[] = [];\r\n\r\n    private readonly rows: {\r\n        num: number;\r\n        speed: number;\r\n        type: 'log' | 'tur' | 'car';\r\n        asset: string;\r\n    }[] = [\r\n        { num: 0, speed: 0, type: 'car', asset: '' },\r\n        { num: 3, speed: 80 / 1000, type: 'log', asset: 'med-log' },\r\n        { num: 3, speed: 70 / 1000, type: 'tur', asset: 'turtle-1' },\r\n        { num: 2, speed: 80 / 1000, type: 'log', asset: 'big-log' },\r\n        { num: 3, speed: 50 / 1000, type: 'log', asset: 'sml-log' },\r\n        { num: 3, speed: 80 / 1000, type: 'tur', asset: 'turtle-1' },\r\n        { num: 0, speed: 0, type: 'car', asset: '' },\r\n        { num: 1, speed: 100 / 1000, type: 'car', asset: 'semi-truck' },\r\n        { num: 3, speed: 130 / 1000, type: 'car', asset: 'blue-car' },\r\n        { num: 2, speed: 130 / 1000, type: 'car', asset: 'fire-truck' },\r\n        { num: 3, speed: 120 / 1000, type: 'car', asset: 'green-car' },\r\n        { num: 3, speed: 100 / 1000, type: 'car', asset: 'yellow-car' },\r\n        { num: 0, speed: 0, type: 'car', asset: '' },\r\n    ];\r\n\r\n    get objects() {\r\n        return this._objs;\r\n    }\r\n\r\n    public initializeObjects = (\r\n        numCols: number,\r\n        height: number,\r\n        ss: SpriteSheet,\r\n    ) => {\r\n        this._objs.length = 0;\r\n\r\n        for (let row = 0; row < this.rows.length; row++) {\r\n            const newY = height * row;\r\n\r\n            const newX = GameSettings.width / this.rows[row].num;\r\n\r\n            if (this.rows[row].type === 'tur') {\r\n                const turtleFrames = [1, 2, 3, 4, 5, 6, 7].map(\r\n                    x => `turtle-${x}`,\r\n                );\r\n\r\n                const divingFrames = [1, 2, 3, 4, 3, 2, 1].map(\r\n                    x => `turtle-dive-${x}`,\r\n                );\r\n                // create 3 turtles\r\n                for (let i = 0; i < this.rows[row].num; i++) {\r\n                    const curFrames =\r\n                        i === 0\r\n                            ? [...turtleFrames, ...divingFrames]\r\n                            : [...turtleFrames];\r\n                    const { w } = ss.getBounds(this.rows[row].asset);\r\n                    const numAnimals = row === 2 ? 2 : 3;\r\n                    for (let j = 1; j <= numAnimals; j++) {\r\n                        this._objs.push(\r\n                            new AnimatedAnimal(\r\n                                curFrames,\r\n                                i === 0 ? 6000 : 2000,\r\n                                {\r\n                                    speed: this.rows[row].speed,\r\n                                    type: this.rows[row].type,\r\n                                    center: {\r\n                                        x: newX * i + w * j,\r\n                                        y: newY + height / 2,\r\n                                    },\r\n                                    ss,\r\n                                    goingLeft: row % 2 === 0,\r\n                                    asset: this.rows[row].asset,\r\n                                },\r\n                            ),\r\n                        );\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < this.rows[row].num; i++) {\r\n                    if (i === 0 && row === 1) {\r\n                        this._objs.push(\r\n                            new PathedObject(\r\n                                {\r\n                                    speed: this.rows[row].speed,\r\n                                    type: this.rows[row].type,\r\n                                    center: {\r\n                                        x: newX + newX * i,\r\n                                        y: newY + height / 2,\r\n                                    },\r\n                                    ss,\r\n                                    goingLeft: row % 2 === 0,\r\n                                    asset: this.rows[row].asset,\r\n                                },\r\n                                {\r\n                                    frames: ['aligator-idle', 'aligator-chomp'],\r\n                                    loopTime: 4000,\r\n                                },\r\n                            ),\r\n                        );\r\n                        continue;\r\n                    }\r\n                    this._objs.push(\r\n                        new PathedObject({\r\n                            speed: this.rows[row].speed,\r\n                            type: this.rows[row].type,\r\n                            center: {\r\n                                x: newX + newX * i,\r\n                                y: newY + height / 2,\r\n                            },\r\n                            ss,\r\n                            goingLeft: row % 2 === 0,\r\n                            asset: this.rows[row].asset,\r\n                        }),\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3 cars\r\n\r\n        // 3 cars\r\n\r\n        // 3 cars\r\n\r\n        // 1 car\r\n\r\n        // 2 cars\r\n    };\r\n\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = 0; i < this._objs.length; i++) {\r\n            this._objs[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        for (let i = 0; i < this._objs.length; i++) {\r\n            this._objs[i].render(cr);\r\n        }\r\n    };\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport Vec2 from '../../Engine/Math/Vec2';\r\nimport Path from './Path';\r\n\r\nexport default class HomePad {\r\n    private readonly _bounds: Rectangle;\r\n    public hasFrog: boolean = false;\r\n    public hasFly: boolean = false;\r\n    public hasAligator: boolean = false;\r\n    public path: Path;\r\n    public speed: number = 0;\r\n    private _curPos: Vec2;\r\n\r\n    private readonly timeSpan: number = 3000;\r\n    private elapsedTime: number = 0;\r\n\r\n    constructor(x: number, y: number, w: number, h: number) {\r\n        this._bounds = new Rectangle(x - w / 2, y - h / 2, w, h);\r\n    }\r\n\r\n    public inBounds(a: Vec2) {\r\n        return this._bounds.inBounds(a);\r\n    }\r\n\r\n    get bounds() {\r\n        return this._bounds;\r\n    }\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        // if has fly, keep it there for 2 seconds\r\n        if (this.hasFly) {\r\n            this.elapsedTime += elapsedTime;\r\n\r\n            if (this.elapsedTime >= this.timeSpan) {\r\n                this.elapsedTime = 0;\r\n                this.hasFly = false;\r\n            }\r\n        }\r\n\r\n        // if there is a aligator, update it\r\n        if (this.hasAligator) {\r\n            this._curPos = this.path.travel(this.speed * elapsedTime);\r\n        }\r\n    };\r\n\r\n    public readonly putFly = () => {\r\n        console.log('FLY');\r\n        this.hasFly = true;\r\n        this.elapsedTime = 0;\r\n    };\r\n\r\n    public readonly putAligator = () => {\r\n        console.log('ALIGATOR');\r\n        this.hasAligator = true;\r\n        this.elapsedTime = 0;\r\n        this.path = new Path(false, () => {\r\n            this.hasAligator = false;\r\n        });\r\n        const y = this._bounds.y + 30;\r\n        this.path.addPoint({ x: this._bounds.x - 10, y });\r\n        this.path.addPoint({\r\n            x: this._bounds.x + this._bounds.w / 2 - 10,\r\n            y,\r\n        });\r\n        this.path.addPoint({ x: this._bounds.x - 10, y });\r\n        this.speed = this.path.length / this.timeSpan;\r\n    };\r\n\r\n    get aligatorPos() {\r\n        return this._curPos;\r\n    }\r\n}\r\n","import HomePad from '../Objects/HomePad';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport settings from '../../../settings';\r\nimport { copy } from '../../Engine/Geometry/Rectangle';\r\n\r\nconst HomePadRenderer = (homePad: HomePad) => (\r\n    cr: CanvasRenderer,\r\n    ss: SpriteSheet,\r\n) => {\r\n    const { x, y, w, h } = homePad.bounds;\r\n\r\n    cr.drawSubTexture(ss, 'pad-tile', { x, y }, 0);\r\n\r\n    if (homePad.hasFrog) {\r\n        cr.drawSubTexture(ss, 'frogger-idle', { x: x + 13, y }, 0);\r\n    }\r\n\r\n    if (homePad.hasFly) {\r\n        cr.drawSubTexture(ss, 'fly', { x: x + 20, y: y + 20 }, 0);\r\n    }\r\n\r\n    if (homePad.hasAligator) {\r\n        const newBounds = copy(homePad.bounds);\r\n        newBounds.x += 15;\r\n        cr.drawSubTexture(ss, 'aligator-head', homePad.aligatorPos, 0);\r\n        // cr.drawSubTextureInClip(\r\n        //     ss,\r\n        //     'aligator-head',\r\n        //     homePad.aligatorPos,\r\n        //     true,\r\n        //     newBounds,\r\n        // );\r\n    }\r\n\r\n    // debug shapd\r\n    if (settings.showCollisionShapes) {\r\n        cr.drawRectangle(x, y, w, h, 0, 'rgba(0, 170, 255, 0.5');\r\n    }\r\n};\r\n\r\nexport default HomePadRenderer;\r\n","// This is used to give a small performance optimization\r\n\r\nimport Vec2 from './Vec2';\r\n\r\n// in generating gaussian random numbers.\r\nlet usePrevious: boolean = false;\r\nlet y2: number = 0;\r\n\r\nexport namespace random {\r\n    export function nextGaussian(mean: number, stdDev: number) {\r\n        let x1 = 0;\r\n        let x2 = 0;\r\n        let y1 = 0;\r\n        let z = 0;\r\n\r\n        if (usePrevious) {\r\n            usePrevious = false;\r\n            return mean + y2 * stdDev;\r\n        }\r\n\r\n        usePrevious = true;\r\n\r\n        do {\r\n            x1 = 2 * Math.random() - 1;\r\n            x2 = 2 * Math.random() - 1;\r\n            z = x1 * x1 + x2 * x2;\r\n        } while (z >= 1);\r\n\r\n        z = Math.sqrt((-2 * Math.log(z)) / z);\r\n        y1 = x1 * z;\r\n        y2 = x2 * z;\r\n\r\n        return mean + y1 * stdDev;\r\n    }\r\n\r\n    export function nextRange(min: number, max: number) {\r\n        let range = max - min;\r\n        return Math.floor(Math.random() * range + min);\r\n    }\r\n\r\n    export function nextCircleVector(): Vec2 {\r\n        let angle = Math.random() * 2 * Math.PI;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    export function nextAngleVector(maxAngle: number = 2 * Math.PI): Vec2 {\r\n        let angle = Math.random() * maxAngle;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    export function nextAngleInCone(\r\n        centerAngle: number,\r\n        angleOfCone: number = Math.PI / 2,\r\n    ): Vec2 {\r\n        const generatingMean = angleOfCone / 2;\r\n        const particleAngle =\r\n            nextGaussian(generatingMean, angleOfCone / 4) + angleOfCone;\r\n        const angle = centerAngle - generatingMean + particleAngle;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns true or false, 50% chance\r\n     * @returns {boolean} True or false\r\n     */\r\n    export function coinFlip(): boolean {\r\n        return Math.random() >= 0.5;\r\n    }\r\n}\r\n","import { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport HomePad from '../Objects/HomePad';\r\nimport HomePadRenderer from '../Renderers/HomePadRenderer';\r\nimport { random } from '../../Engine/Math/random';\r\nimport GameSettings from '../../Engine/Settings/GameSettings';\r\n\r\nexport default class HomePadSystem {\r\n    private homePads: HomePad[] = [];\r\n    private renderers: ((cr: CanvasRenderer, ss: SpriteSheet) => void)[] = [];\r\n\r\n    private readonly timeSpacing: number = 13000;\r\n    /**\r\n     * Time in between special events like putting a fly or aligator.\r\n     */\r\n    private timeSinceLastSpecial: number = 0;\r\n\r\n    constructor(\r\n        private ss: SpriteSheet,\r\n        private tileWidth: number,\r\n        private tileHeight: number,\r\n    ) {\r\n        this.homePads.length = 0;\r\n        this.renderers.length = 0;\r\n\r\n        const numPads = 5;\r\n        const padding = 100;\r\n        const padSpacing = (GameSettings.width - padding * 2) / (numPads - 1);\r\n\r\n        for (let i = 0; i < numPads; i++) {\r\n            const x = padding + i * padSpacing;\r\n            const pad = new HomePad(\r\n                x,\r\n                this.tileHeight / 2,\r\n                this.tileWidth,\r\n                this.tileHeight,\r\n            );\r\n\r\n            this.homePads.push(pad);\r\n            this.renderers.push(HomePadRenderer(pad));\r\n        }\r\n    }\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        this.timeSinceLastSpecial += elapsedTime;\r\n\r\n        if (this.timeSinceLastSpecial >= this.timeSpacing) {\r\n            this.timeSinceLastSpecial -= this.timeSpacing;\r\n\r\n            const available = this.homePads.filter(x => !x.hasFrog);\r\n\r\n            if (available.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const chosenIndex = random.nextRange(0, available.length);\r\n\r\n            if (random.coinFlip()) {\r\n                // fly\r\n                available[chosenIndex].putFly();\r\n            } else {\r\n                // aligator\r\n                available[chosenIndex].putAligator();\r\n            }\r\n            // this.homePads[available.length - 1].putAligator();\r\n        }\r\n\r\n        for (let i = 0; i < this.homePads.length; i++) {\r\n            this.homePads[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public readonly render = (cr: CanvasRenderer) => {\r\n        for (let i = 0; i < this.renderers.length; i++) {\r\n            this.renderers[i](cr, this.ss);\r\n        }\r\n    };\r\n\r\n    get pads() {\r\n        return this.homePads;\r\n    }\r\n}\r\n","import Particle from '../Graphics/Particle';\r\n\r\nexport default abstract class BaseParticleSystem {\r\n    protected _particles: Particle[] = [];\r\n\r\n    abstract update: (elapsedTime: number) => void;\r\n\r\n    protected removeDeadParticles = (elapsedTime: number) => {\r\n        for (let i = this._particles.length - 1; i >= 0; i--) {\r\n            this._particles[i].update(elapsedTime);\r\n\r\n            if (!this._particles[i].alive) {\r\n                this._particles.splice(i, 1);\r\n                continue;\r\n            }\r\n        }\r\n    };\r\n\r\n    get particles(): Particle[] {\r\n        return this._particles;\r\n    }\r\n\r\n    public clear() {\r\n        this._particles.length = 0;\r\n    }\r\n}\r\n","import Vec2 from '../Math/Vec2';\r\nimport Color, { createColorTransition, Colors } from './Color';\r\n\r\nexport interface Props {\r\n    /**\r\n     * Lifespan in ms of the particle\r\n     */\r\n    readonly lifetime: number;\r\n    center: Vec2;\r\n    /**\r\n     * Initial angle for the particle to spin\r\n     */\r\n    rotation: number;\r\n    readonly speed: number;\r\n    readonly direction: Vec2;\r\n    /**\r\n     * Width and height of the particle\r\n     */\r\n    readonly size: Vec2;\r\n    /**\r\n     * Initial particle color\r\n     */\r\n    readonly fromColor: Color;\r\n    // /**\r\n    //  * Color to transition to throught the particles lifetime\r\n    //  */\r\n    // readonly toColor: Color;\r\n    // readonly fadeTransition: number;\r\n}\r\n\r\nexport default class Particle {\r\n    /**\r\n     * Elapsed time since particle creation\r\n     */\r\n    protected elapsedTime: number = 0;\r\n    private color: Color;\r\n    private colorTransition: Color;\r\n    private fading: boolean = false;\r\n\r\n    constructor(protected props: Props) {\r\n        this.color = props.fromColor;\r\n        // this.colorTransition = createColorTransition(\r\n        //     props.fromColor,\r\n        //     props.toColor,\r\n        //     props.lifetime,\r\n        // );\r\n    }\r\n    get alive() {\r\n        return this.elapsedTime <= this.props.lifetime;\r\n    }\r\n\r\n    get center() {\r\n        return this.props.center;\r\n    }\r\n\r\n    get rotation() {\r\n        return this.props.rotation;\r\n    }\r\n\r\n    get fill() {\r\n        return `rgb(${this.color.r},${this.color.g},${this.color.b})`;\r\n    }\r\n\r\n    get size() {\r\n        return this.props.size;\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        const { speed, direction } = this.props;\r\n        this.center.x += speed * direction.x * elapsedTime;\r\n        this.center.y += speed * direction.y * elapsedTime;\r\n        this.elapsedTime += elapsedTime;\r\n\r\n        // this.updateColor(elapsedTime);\r\n\r\n        // this.props.rotation += speed * 0.5;\r\n    };\r\n\r\n    // private updateColor = (elapsedTime: number) => {\r\n    //     if (\r\n    //         !this.fading &&\r\n    //         this.elapsedTime >= this.props.lifetime - this.props.fadeTransition\r\n    //     ) {\r\n    //         this.fading = true;\r\n    //         this.colorTransition = createColorTransition(\r\n    //             this.color,\r\n    //             { r: this.color.r, g: this.color.g, b: this.color.b, a: 0 },\r\n    //             this.props.fadeTransition,\r\n    //         );\r\n    //     }\r\n\r\n    //     this.color.r -= this.colorTransition.r * elapsedTime;\r\n    //     this.color.g -= this.colorTransition.g * elapsedTime;\r\n    //     this.color.b -= this.colorTransition.b * elapsedTime;\r\n    //     this.color.a -= this.colorTransition.a * elapsedTime;\r\n    // };\r\n}\r\n","import Particle, { Props } from '../../Engine/Graphics/Particle';\r\nimport Path from './Path';\r\n\r\nexport default class PathedParticle extends Particle {\r\n    private pathSpeed: number = 0;\r\n\r\n    constructor(private path: Path, baseProps: Props) {\r\n        super(baseProps);\r\n        // need to go distance of path in props.lifetime\r\n        this.pathSpeed = path.length / baseProps.lifetime;\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        this.elapsedTime += elapsedTime;\r\n\r\n        const newPos = this.path.travel(this.pathSpeed * elapsedTime);\r\n        // // console.log(newPos);\r\n\r\n        // // const { speed, direction } = this.props;\r\n        this.center.x = newPos.x + this.pathSpeed * elapsedTime;\r\n        this.center.y = newPos.y + this.pathSpeed * elapsedTime;\r\n\r\n        // const { speed, direction } = this.props;\r\n        // this.center.x += speed * direction.x * elapsedTime;\r\n        // this.center.y += speed * direction.y * elapsedTime;\r\n    };\r\n}\r\n","import BaseParticleSystem from '../../Engine/Systems/BaseParticleSystem';\r\nimport Vec2, { expand } from '../../Engine/Math/Vec2';\r\nimport Distribution from '../../Engine/Math/distribution';\r\nimport Color from '../../Engine/Graphics/Color';\r\nimport { random } from '../../Engine/Math/random';\r\nimport Particle from '../../Engine/Graphics/Particle';\r\nimport PathedParticle from '../Objects/PathedParticle';\r\nimport Path from '../Objects/Path';\r\nimport Rectangle from '../../Engine/Geometry/Rectangle';\r\n\r\nexport interface RandomParams {\r\n    size: Distribution;\r\n    speed: Distribution;\r\n    lifetime: Distribution;\r\n    fromColor: Color;\r\n    // toColor: Color;\r\n}\r\n\r\nexport default class ParticleSystem extends BaseParticleSystem {\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = this._particles.length - 1; i >= 0; i--) {\r\n            this._particles[i].update(elapsedTime);\r\n\r\n            if (!this._particles[i].alive) {\r\n                this._particles.splice(i, 1);\r\n                continue;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generates new particles in a cone\r\n     * @param center Center to generate particles\r\n     * @param direction Center in degrees\r\n     */\r\n    public carCrash(center: Vec2, direction: number, props: RandomParams) {\r\n        // add flying chunks\r\n        for (let particle = 0; particle < 50; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const path = new Path();\r\n\r\n            path.addPoint(expand(center));\r\n\r\n            const vec2Dir = random.nextAngleInCone(direction);\r\n            path.addPoint({\r\n                x: center.x + vec2Dir.x * 100,\r\n                y: center.y + vec2Dir.y * 100,\r\n            });\r\n\r\n            const p = new PathedParticle(path, {\r\n                center: { x: center.x, y: center.y },\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: vec2Dir,\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: {\r\n                    r: props.fromColor.r,\r\n                    g: props.fromColor.g,\r\n                    b: props.fromColor.b,\r\n                    a: props.fromColor.a,\r\n                },\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n\r\n        // add some stationary chunks\r\n\r\n        // add some chunks to the car\r\n    }\r\n\r\n    public showerSparks(padBounds: Rectangle, props: RandomParams) {\r\n        const startingY = padBounds.y + 18;\r\n        const startingX = padBounds.x + 11;\r\n        const innerWidth = 54;\r\n        // left & right wall\r\n        [startingX, startingX + innerWidth].map(x => {\r\n            for (let y = startingY; y < padBounds.h; y += 1) {\r\n                const center = { x, y };\r\n                for (let particle = 0; particle < 5; particle++) {\r\n                    const size = Math.abs(\r\n                        random.nextGaussian(props.size.mean, props.size.stdev),\r\n                    );\r\n\r\n                    const speed = Math.abs(\r\n                        random.nextGaussian(\r\n                            props.speed.mean,\r\n                            props.speed.stdev,\r\n                        ),\r\n                    );\r\n\r\n                    const color = random.coinFlip()\r\n                        ? {\r\n                              r: props.fromColor.r,\r\n                              g: props.fromColor.g,\r\n                              b: props.fromColor.b,\r\n                              a: props.fromColor.a,\r\n                          }\r\n                        : {\r\n                              r: 239,\r\n                              g: 242,\r\n                              b: 191,\r\n                              a: props.fromColor.a,\r\n                          };\r\n\r\n                    const p = new Particle({\r\n                        center: center,\r\n                        size: { x: size, y: size },\r\n                        rotation: 0,\r\n                        speed,\r\n                        direction: random.nextAngleInCone(Math.PI),\r\n                        lifetime: random.nextGaussian(\r\n                            props.lifetime.mean,\r\n                            props.lifetime.stdev,\r\n                        ),\r\n                        fromColor: color,\r\n                    });\r\n                    this._particles.push(p);\r\n                }\r\n            }\r\n        });\r\n\r\n        // top & bottom\r\n        [startingY].map(y => {\r\n            for (let x = startingX; x < innerWidth + startingX; x += 1) {\r\n                const center = { x, y };\r\n                for (let particle = 0; particle < 5; particle++) {\r\n                    const size = Math.abs(\r\n                        random.nextGaussian(props.size.mean, props.size.stdev),\r\n                    );\r\n\r\n                    const speed = Math.abs(\r\n                        random.nextGaussian(\r\n                            props.speed.mean,\r\n                            props.speed.stdev,\r\n                        ),\r\n                    );\r\n\r\n                    const color = random.coinFlip()\r\n                        ? {\r\n                              r: props.fromColor.r,\r\n                              g: props.fromColor.g,\r\n                              b: props.fromColor.b,\r\n                              a: props.fromColor.a,\r\n                          }\r\n                        : {\r\n                              r: 239,\r\n                              g: 242,\r\n                              b: 191,\r\n                              a: props.fromColor.a,\r\n                          };\r\n\r\n                    const p = new Particle({\r\n                        center: center,\r\n                        size: { x: size, y: size },\r\n                        rotation: 0,\r\n                        speed,\r\n                        direction: random.nextAngleInCone(Math.PI),\r\n                        lifetime: random.nextGaussian(\r\n                            props.lifetime.mean,\r\n                            props.lifetime.stdev,\r\n                        ),\r\n                        fromColor: color,\r\n                    });\r\n                    this._particles.push(p);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public froggerBlood(deathCenter: Vec2, props: RandomParams) {\r\n        console.log('hello');\r\n        for (let particle = 0; particle < 500; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const color = random.coinFlip()\r\n                ? {\r\n                      r: props.fromColor.r,\r\n                      g: props.fromColor.g,\r\n                      b: props.fromColor.b,\r\n                      a: props.fromColor.a,\r\n                  }\r\n                : { r: 51, g: 204, b: 51, a: 1 };\r\n\r\n            const p = new Particle({\r\n                center: expand(deathCenter),\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: random.nextCircleVector(),\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: color,\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n    }\r\n\r\n    public splash(center: Vec2, props: RandomParams) {\r\n        for (let particle = 0; particle < 1000; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const p = new Particle({\r\n                center: expand(center),\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: random.nextCircleVector(),\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: props.fromColor,\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n    }\r\n}\r\n","import BaseParticleSystem from '../Systems/BaseParticleSystem';\r\nimport { CanvasRenderer } from './CanvasRenderer';\r\n\r\nconst ParticleSystemRenderer = (particleSystem: BaseParticleSystem) => (\r\n    cr: CanvasRenderer,\r\n) => {\r\n    const { particles } = particleSystem;\r\n\r\n    for (let i = particles.length - 1; i >= 0; i--) {\r\n        const { center, rotation, size, fill } = particles[i];\r\n        cr.drawRectangle(\r\n            center.x,\r\n            center.y,\r\n            size.x,\r\n            size.y,\r\n            rotation,\r\n            fill,\r\n            '#ff3300',\r\n        );\r\n    }\r\n};\r\n\r\nexport default ParticleSystemRenderer;\r\n","export default class ScoringSystem {\r\n    private _visitedArray: boolean[] = [];\r\n\r\n    private _currentRow: number = 0;\r\n\r\n    private _score: number = 0;\r\n\r\n    constructor(private numRows: number = 13) {\r\n        this.resetForNewFrog();\r\n    }\r\n\r\n    public gotFly() {\r\n        this._score += 200;\r\n    }\r\n\r\n    public landOnPad() {\r\n        this._score += 50;\r\n    }\r\n\r\n    public beatLevel() {\r\n        this._score += 1000;\r\n    }\r\n\r\n    public moveUp() {\r\n        this._currentRow++;\r\n\r\n        if (!this._visitedArray[this._currentRow]) {\r\n            this._visitedArray[this._currentRow] = true;\r\n            this._score += 10;\r\n        }\r\n    }\r\n\r\n    public moveDown() {\r\n        this._currentRow--;\r\n    }\r\n\r\n    public resetForNewFrog() {\r\n        for (let i = 0; i < this.numRows; i++) {\r\n            this._visitedArray[i] = false;\r\n        }\r\n        this._currentRow = 0;\r\n    }\r\n\r\n    /**\r\n     * Scores left over time\r\n     * @param time Time in ms\r\n     */\r\n    public accountForTime(time: number) {\r\n        const scoreTime = Math.round(time / 100);\r\n        this._score += scoreTime;\r\n    }\r\n\r\n    get score() {\r\n        return this._score;\r\n    }\r\n\r\n    public resetScore() {\r\n        this._score = 0;\r\n    }\r\n}\r\n","import Dictionary from '../Interfaces/Dictionary';\r\n\r\ntype Command = (time: number) => void;\r\n\r\nexport default class Keyboard {\r\n    private inputBuffer: Dictionary<string> = {};\r\n    private handlers: Dictionary<Command[]> = {};\r\n\r\n    constructor(private clearBuffer: boolean = false) {\r\n        window.addEventListener('keydown', this.addToInputBuffer);\r\n        window.addEventListener('keyup', this.removeKey);\r\n    }\r\n\r\n    public destroy(): void {\r\n        window.removeEventListener('keydown', this.addToInputBuffer);\r\n        window.removeEventListener('keyup', this.removeKey);\r\n\r\n        this.inputBuffer = {};\r\n        this.handlers = {};\r\n    }\r\n\r\n    /**\r\n     * Process elapsed time and pass it into any commands that depends on time\r\n     * @param elapsedTime Time elapsed since the last update\r\n     */\r\n    public process(elapsedTime: number): void {\r\n        for (const key in this.inputBuffer) {\r\n            if (this.inputBuffer.hasOwnProperty(key)) {\r\n                for (\r\n                    let i = 0;\r\n                    this.handlers[key] && i < this.handlers[key].length;\r\n                    i++\r\n                ) {\r\n                    this.handlers[key][i](elapsedTime);\r\n                }\r\n            }\r\n        }\r\n        if (this.clearBuffer) {\r\n            this.inputBuffer = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Assigns a handler to fire when a key is pressed\r\n     * @param key The key to register\r\n     * @param handler Command to execute when key is pressed\r\n     */\r\n    public register = (key: string, handler: Command) => {\r\n        if (!this.handlers[key]) {\r\n            this.handlers[key] = [];\r\n        }\r\n        this.handlers[key].push(handler);\r\n    };\r\n\r\n    /**\r\n     * Assigns multiple keys to the same handler.\r\n     * @param keys Array of keys to assign the handler to\r\n     * @param handler A command to call when the passed in key is pressed\r\n     */\r\n    public registerMultiple(keys: string[], handler: Command) {\r\n        for (let i = 0; i < keys.length; i++) {\r\n            this.register(keys[i], handler);\r\n        }\r\n    }\r\n\r\n    private addToInputBuffer = (event: KeyboardEvent) => {\r\n        this.inputBuffer[event.key] = event.key;\r\n    };\r\n\r\n    private removeKey = (event: KeyboardEvent) => {\r\n        delete this.inputBuffer[event.key];\r\n    };\r\n\r\n    // TODO: Add remove with handler\r\n}\r\n","// https://stackoverflow.com/a/24597663\r\nexport function genCharArray(charA: string, charZ: string) {\r\n    var a = [],\r\n        i = charA.charCodeAt(0),\r\n        j = charZ.charCodeAt(0);\r\n    for (; i <= j; ++i) {\r\n        a.push(String.fromCharCode(i));\r\n    }\r\n    return a;\r\n}\r\n","import { CanvasRenderer } from '../Engine/Renderers/CanvasRenderer';\r\nimport EventSystem from '../Engine/Systems/EventSystem';\r\nimport { AudioSystem } from '../Engine/Systems/AudioSystem';\r\nimport HighScoreManager from '../Engine/Managers/HighScoreManager';\r\nimport Player from './Objects/Player';\r\nimport SpriteSheet from '../Engine/Graphics/SpriteSheet';\r\nimport Rectangle from '../Engine/Geometry/Rectangle';\r\nimport PathedObjectSystem from './Systems/PathedObjectSystem';\r\nimport PathedObject from './Objects/PathedObject';\r\nimport HomePadSystem from './Systems/HomePadSystem';\r\nimport ParticleSystem from './Systems/ParticleSystem';\r\nimport ParticleSystemRenderer from '../Engine/Renderers/ParticleSystemRenderer';\r\nimport HomePad from './Objects/HomePad';\r\nimport ScoringManager from './Systems/ScoringSystem';\r\nimport Button from './UI/Button';\r\nimport { GameMouseEvent } from '../Engine/Input/Mouse';\r\nimport ButtonRenderer from './Renderers/ButtonRenderer';\r\nimport GameSettings from '../Engine/Settings/GameSettings';\r\nimport Keyboard from '../Engine/Input/Keyboard';\r\nimport { genCharArray } from './Helpers/character';\r\n\r\ntype TimeFunc = (elapsedTime: number) => void;\r\ntype RenderFunc = (cr: CanvasRenderer) => void;\r\n\r\nexport default class GameModel {\r\n    private scoreManager: ScoringManager = new ScoringManager();\r\n    /**\r\n     * The player has 30 seconds to guide the frog to its home.\r\n     *\r\n     * This resets on every death or reset.\r\n     */\r\n    private time: number = 30000;\r\n\r\n    private lives: number = 7;\r\n\r\n    private readonly rowImages: string[] = [\r\n        'bush-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'grass-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'grass-tile',\r\n    ];\r\n\r\n    private readonly requiredOnHomePads = 5;\r\n    private currentOnHomePad = 0;\r\n    private countDownTime: boolean = false;\r\n\r\n    private readonly numRows: number = this.rowImages.length;\r\n    private readonly tileHeight = GameSettings.width / this.numRows;\r\n    private readonly tileWidth = GameSettings.width / this.numRows;\r\n\r\n    private internalUpdate: TimeFunc;\r\n    private internalRender: RenderFunc;\r\n    private internalMoveLeft: () => void;\r\n    private internalMoveRight: () => void;\r\n    private internalMoveUp: () => void;\r\n    private internalMoveDown: () => void;\r\n    private internalPlayerRender: (cr: CanvasRenderer) => void;\r\n    private internalDetectCollisions: () => void;\r\n    private internalMouseClick: (ev: GameMouseEvent) => void = () => {};\r\n\r\n    private readonly eventSystem: EventSystem = new EventSystem();\r\n    private audioSystem: AudioSystem = new AudioSystem();\r\n    private pathedObjectSystem: PathedObjectSystem = new PathedObjectSystem();\r\n    private homePadSystem: HomePadSystem;\r\n    private particleSystem: ParticleSystem = new ParticleSystem();\r\n    private particleSystemRenderer: (cr: CanvasRenderer) => void;\r\n\r\n    private crashParticleParams = {\r\n        size: { mean: 5, stdev: 2 },\r\n        speed: { mean: 20 / 1000, stdev: 9 / 1000 },\r\n        lifetime: { mean: 2000, stdev: 500 },\r\n        fromColor: { r: 51, g: 204, b: 51, a: 1 },\r\n    };\r\n\r\n    private sparkParams = {\r\n        size: { mean: 2, stdev: 0 },\r\n        speed: { mean: 4 / 1000, stdev: 1 / 1000 },\r\n        lifetime: { mean: 2000, stdev: 200 },\r\n        fromColor: { r: 235, g: 247, b: 4, a: 1 },\r\n    };\r\n\r\n    private aligatorDeathParams = {\r\n        size: { mean: 2, stdev: 1 },\r\n        speed: { mean: 25 / 1000, stdev: 25 / 1000 },\r\n        lifetime: { mean: 250, stdev: 200 },\r\n        fromColor: { r: 234, g: 25, b: 25, a: 1 },\r\n    };\r\n\r\n    private splashParams = {\r\n        size: { mean: 1, stdev: 1 },\r\n        speed: { mean: 20 / 1000, stdev: 20 / 1000 },\r\n        lifetime: { mean: 250, stdev: 200 },\r\n        fromColor: { r: 0, g: 153, b: 115, a: 1 },\r\n    };\r\n\r\n    private explosionParams = {\r\n        size: { mean: 1, stdev: 1 },\r\n        speed: { mean: 20 / 1000, stdev: 20 / 1000 },\r\n        lifetime: { mean: 250, stdev: 200 },\r\n        fromColor: { r: 51, g: 204, b: 51, a: 1 },\r\n    };\r\n\r\n    private _spriteSheet = new SpriteSheet(\r\n        'graphics/frogger-game-sprites.png',\r\n        {\r\n            // Frogger\r\n            'frogger-idle': new Rectangle(0, 2, 51, 73),\r\n            'frogger-1': new Rectangle(54, 2, 57, 73),\r\n            'frogger-2': new Rectangle(114, 2, 56, 73),\r\n            'frogger-3': new Rectangle(173, 2, 53, 73),\r\n            'frogger-4': new Rectangle(230, 2, 54, 73),\r\n            // Tiles\r\n            'grass-tile': new Rectangle(135, 158, 82, 82),\r\n            'water-tile': new Rectangle(226, 158, 82, 82),\r\n            'street-tile': new Rectangle(316, 158, 82, 82),\r\n            'bush-tile': new Rectangle(407, 158, 82, 82),\r\n            'pad-tile': new Rectangle(497, 158, 82, 82),\r\n            // Cars\r\n            'yellow-car': new Rectangle(305, 482, 134, 71),\r\n            'green-car': new Rectangle(155, 483, 135, 71),\r\n            'blue-car': new Rectangle(12, 483, 127, 69),\r\n            'fire-truck': new Rectangle(9, 407, 178, 66),\r\n            'semi-truck': new Rectangle(203, 406, 285, 66),\r\n            // Logs\r\n            'big-log': new Rectangle(13, 258, 353, 59),\r\n            'med-log': new Rectangle(14, 328, 273, 59),\r\n            'sml-log': new Rectangle(387, 258, 185, 59),\r\n            // Other\r\n            fly: new Rectangle(84, 171, 43, 48),\r\n            // Turtle\r\n            'turtle-1': new Rectangle(403, 11, 71, 57),\r\n            'turtle-2': new Rectangle(480, 9, 70, 61),\r\n            'turtle-3': new Rectangle(7, 83, 71, 67),\r\n            'turtle-4': new Rectangle(80, 82, 71, 68),\r\n            'turtle-5': new Rectangle(154, 84, 70, 66),\r\n            'turtle-6': new Rectangle(229, 89, 71, 56),\r\n            'turtle-7': new Rectangle(301, 88, 71, 57),\r\n            // Turtle Diving\r\n            'turtle-dive-1': new Rectangle(377, 92, 60, 50),\r\n            'turtle-dive-2': new Rectangle(453, 98, 49, 39),\r\n            'turtle-dive-3': new Rectangle(517, 102, 36, 28),\r\n            'turtle-dive-4': new Rectangle(570, 104, 20, 20),\r\n            // Aligator\r\n            'aligator-idle': new Rectangle(299, 317, 180, 61),\r\n            'aligator-chomp': new Rectangle(520, 345, 61, 180),\r\n            'aligator-head': new Rectangle(455, 499, 37, 43),\r\n        },\r\n    );\r\n    private player: Player;\r\n\r\n    constructor(private readonly onGameOver: () => void) {\r\n        this.particleSystemRenderer = ParticleSystemRenderer(\r\n            this.particleSystem,\r\n        );\r\n    }\r\n\r\n    public readonly start = () => {\r\n        console.log('Starting Game');\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-background.mp3',\r\n            0,\r\n            true,\r\n            0.5,\r\n        );\r\n\r\n        this.eventSystem.clear();\r\n\r\n        this.homePadSystem = new HomePadSystem(\r\n            this._spriteSheet,\r\n            this.tileWidth,\r\n            this.tileHeight,\r\n        );\r\n\r\n        this.initializePlayer();\r\n\r\n        this.pathedObjectSystem.initializeObjects(\r\n            this.numRows,\r\n            this.tileHeight,\r\n            this._spriteSheet,\r\n        );\r\n\r\n        this.particleSystem.clear();\r\n\r\n        this.internalUpdate = this.gameUpdate;\r\n        this.internalRender = this.gameRender;\r\n        this.internalDetectCollisions = this.gameDetectCollisions;\r\n\r\n        this.time = 30000;\r\n        this.lives = 7;\r\n        this.countDownTime = true;\r\n        this.scoreManager.resetScore();\r\n    };\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n    };\r\n\r\n    public readonly render = (cr: CanvasRenderer) => {\r\n        this.internalRender(cr);\r\n    };\r\n\r\n    public readonly destroy = () => {\r\n        this.eventSystem.destroy();\r\n        this.audioSystem.destroy();\r\n    };\r\n\r\n    public readonly reset = () => {\r\n        this.audioSystem.clearAllSounds();\r\n        this.particleSystem.clear();\r\n\r\n        this.clearPlayerInternals();\r\n\r\n        this.currentOnHomePad = 0;\r\n    };\r\n\r\n    public readonly moveLeft = () => {\r\n        this.internalMoveLeft();\r\n    };\r\n\r\n    public readonly moveRight = () => {\r\n        this.internalMoveRight();\r\n    };\r\n\r\n    public readonly moveUp = () => {\r\n        this.internalMoveUp();\r\n    };\r\n\r\n    public readonly moveDown = () => {\r\n        this.internalMoveDown();\r\n    };\r\n\r\n    private readonly initializePlayer = () => {\r\n        this.player = new Player(\r\n            {\r\n                center: {\r\n                    x: GameSettings.width / 2,\r\n                    y: GameSettings.width - this.tileHeight / 2,\r\n                },\r\n                collisionRadius: 20,\r\n                width: this.tileWidth,\r\n                spriteSheet: this._spriteSheet,\r\n                delta: this.tileWidth,\r\n            },\r\n            this.audioSystem,\r\n        );\r\n\r\n        this.setPlayerInternals();\r\n    };\r\n\r\n    private readonly setPlayerInternals = () => {\r\n        this.internalMoveLeft = this.player.moveLeft;\r\n        this.internalMoveRight = this.player.moveRight;\r\n        this.internalMoveUp = () => {\r\n            this.scoreManager.moveUp();\r\n            this.player.moveUp();\r\n        };\r\n        this.internalMoveDown = () => {\r\n            this.scoreManager.moveDown();\r\n            this.player.moveDown();\r\n        };\r\n        this.internalPlayerRender = this.player.render;\r\n    };\r\n\r\n    private readonly clearPlayerInternals = () => {\r\n        this.internalMoveLeft = () => {};\r\n        this.internalMoveRight = () => {};\r\n        this.internalMoveUp = () => {};\r\n        this.internalMoveDown = () => {};\r\n        this.internalPlayerRender = () => {};\r\n    };\r\n\r\n    private readonly gameRender = (cr: CanvasRenderer) => {\r\n        cr.clear();\r\n\r\n        this.drawBackground(cr);\r\n        this.homePadSystem.render(cr);\r\n\r\n        this.pathedObjectSystem.render(cr);\r\n\r\n        this.drawGameStatus(cr);\r\n\r\n        this.internalPlayerRender(cr);\r\n\r\n        this.particleSystemRenderer(cr);\r\n    };\r\n\r\n    private readonly drawBackground = (cr: CanvasRenderer) => {\r\n        cr.drawRectangle(0, 0, 1024, 1024, 0, '#000');\r\n\r\n        for (let row = 0; row < this.numRows; row++) {\r\n            const newY = this.tileHeight * row;\r\n            for (let col = 0; col < this.numRows; col++) {\r\n                const newX = this.tileWidth * col;\r\n                cr.drawSubTexture(\r\n                    this._spriteSheet,\r\n                    this.rowImages[row],\r\n                    {\r\n                        x: newX + this.tileWidth / 2,\r\n                        y: newY + this.tileWidth / 2,\r\n                    },\r\n                    0,\r\n                    true,\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    private drawGameStatus(cr: CanvasRenderer) {\r\n        cr.drawRectangle(\r\n            0,\r\n            GameSettings.width,\r\n            GameSettings.width,\r\n            GameSettings.width + 100,\r\n            0,\r\n            '#000',\r\n        );\r\n\r\n        this.drawTime(cr);\r\n        this.drawScore(cr);\r\n        this.drawLifes(cr);\r\n    }\r\n\r\n    private drawTime(cr: CanvasRenderer) {\r\n        const width = 800;\r\n        const padding = 10;\r\n        const height = 50 - padding;\r\n\r\n        cr.drawText(\r\n            { x: padding / 2, y: GameSettings.width + 50 + padding },\r\n            'TIME',\r\n            0,\r\n            false,\r\n            '#fff',\r\n            '32px arial',\r\n        );\r\n\r\n        const x = 100;\r\n        const y = GameSettings.width + 50 + padding / 2;\r\n        for (let i = 0; i < this.time / 1000; i++) {\r\n            cr.drawRectangle(\r\n                x + i * (width / 30),\r\n                y,\r\n                width / 30 + 1,\r\n                height,\r\n                0,\r\n                '#00ffcc',\r\n            );\r\n        }\r\n    }\r\n\r\n    private drawScore(cr: CanvasRenderer) {\r\n        cr.drawText(\r\n            { x: GameSettings.width / 2, y: GameSettings.width + 5 },\r\n            `Score: ${this.scoreManager.score}`,\r\n            0,\r\n            true,\r\n            '#fff',\r\n            '32px arial',\r\n        );\r\n    }\r\n\r\n    private drawLifes(cr: CanvasRenderer) {\r\n        for (let i = 0; i < this.lives - 1; i++) {\r\n            cr.drawSubTexture(\r\n                this._spriteSheet,\r\n                'frogger-idle',\r\n                { x: i * 50, y: GameSettings.width - 20 },\r\n                0,\r\n            );\r\n        }\r\n    }\r\n\r\n    private readonly gameUpdate = (elapsedTime: number) => {\r\n        this.audioSystem.update(elapsedTime);\r\n\r\n        this.eventSystem.update(elapsedTime);\r\n\r\n        this.particleSystem.update(elapsedTime);\r\n\r\n        this.pathedObjectSystem.update(elapsedTime);\r\n\r\n        this.homePadSystem.update(elapsedTime);\r\n\r\n        this.player.update(elapsedTime);\r\n\r\n        this.updateTime(elapsedTime);\r\n\r\n        this.detectCollisions();\r\n    };\r\n\r\n    private updateTime(elapsedTime: number) {\r\n        if (!this.countDownTime) {\r\n            return;\r\n        }\r\n        this.time -= elapsedTime;\r\n        if (this.time <= 0) {\r\n            this.playerExplosionAndMoveOn();\r\n            this.countDownTime = false;\r\n        }\r\n    }\r\n\r\n    private playerExplosionAndMoveOn = () => {\r\n        this.internalDetectCollisions = () => {};\r\n\r\n        this.particleSystem.splash(this.player.center, this.explosionParams);\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-plunk.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        this.internalPlayerRender = () => {};\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private readonly detectCollisions = () => {\r\n        this.internalDetectCollisions();\r\n    };\r\n\r\n    private readonly gameDetectCollisions = () => {\r\n        // It looked like collision happened when the player was idle\r\n        // 1:28 in the video\r\n        if (!this.player.idle) {\r\n            return;\r\n        }\r\n\r\n        if (this.player.center.y < this.tileHeight * 2) {\r\n            const { pads } = this.homePadSystem;\r\n            for (let i = 0; i < pads.length; i++) {\r\n                if (pads[i].inBounds(this.player.center)) {\r\n                    this.handleLandedOnHomePad(pads[i]);\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        const objs = this.pathedObjectSystem.objects;\r\n        for (let i = 0; i < objs.length; i++) {\r\n            if (objs[i].testPoint(this.player.center)) {\r\n                switch (objs[i].type) {\r\n                    case 'car':\r\n                        this.handleCollisionWithCar(objs[i].goingLeft);\r\n                        break;\r\n                    case 'log':\r\n                        this.handleOnLog(objs[i]);\r\n                        break;\r\n                    case 'tur':\r\n                        this.handleOnTurtle(objs[i]);\r\n                        break;\r\n                    case 'alligator':\r\n                        this.handleAlligator(objs[i]);\r\n                        break;\r\n                    default:\r\n                        console.error('NOT IMPLEMENT YET FOR', objs[i].type);\r\n                        break;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.player.center.y < GameSettings.width / 2) {\r\n            // console.log('Water');\r\n            this.handleDrown();\r\n        }\r\n        //  else {\r\n        //     console.log('Land');\r\n        // }\r\n    };\r\n\r\n    private readonly handleLandedOnHomePad = (homePad: HomePad) => {\r\n        this.internalDetectCollisions = () => {};\r\n\r\n        console.log('LANDED ON HOME PAD');\r\n\r\n        // handle if there is an aligator\r\n        if (homePad.hasAligator) {\r\n            homePad.hasAligator = false;\r\n            this.handleAlligator();\r\n            return;\r\n        }\r\n\r\n        // handle if there is already a frog there.\r\n        if (homePad.hasFrog) {\r\n            this.handleDrown();\r\n            return;\r\n        }\r\n\r\n        this.internalPlayerRender = () => {};\r\n        homePad.hasFrog = true;\r\n\r\n        this.particleSystem.showerSparks(homePad.bounds, this.sparkParams);\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-coin-in.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        // update score\r\n        this.scoreManager.landOnPad();\r\n\r\n        // handle if there is a fly\r\n        if (homePad.hasFly) {\r\n            homePad.hasFly = false;\r\n            this.scoreManager.gotFly();\r\n        }\r\n\r\n        this.currentOnHomePad++;\r\n        if (this.currentOnHomePad >= this.requiredOnHomePads) {\r\n            this.handleBeatLevel();\r\n        } else {\r\n            this.startTimedTransition(this.resetWithNewFrog);\r\n        }\r\n    };\r\n\r\n    private handleBeatLevel = () => {\r\n        this.countDownTime = false;\r\n\r\n        // player gets 1000 points\r\n        this.scoreManager.beatLevel();\r\n        this.scoreManager.accountForTime(this.time);\r\n\r\n        // show score screen,\r\n        this.beatGameScreen();\r\n    };\r\n\r\n    private resetWithNewFrog = () => {\r\n        this.scoreManager.resetForNewFrog();\r\n        this.resetPlayer();\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-background.mp3',\r\n            0,\r\n            true,\r\n            0.5,\r\n        );\r\n\r\n        this.scoreManager.accountForTime(this.time);\r\n        this.countDownTime = true;\r\n        this.time = 30000;\r\n    };\r\n\r\n    private readonly handleOnLog = (pathedObject: PathedObject) => {\r\n        this.player.speedX =\r\n            pathedObject.speed * (pathedObject.goingLeft ? -1 : 1);\r\n    };\r\n\r\n    private readonly handleOnTurtle = (pathedObject: PathedObject) => {\r\n        // if the turtle is not diving, keep up with it\r\n        if (pathedObject.canStandOn) {\r\n            this.player.speedX =\r\n                pathedObject.speed * (pathedObject.goingLeft ? -1 : 1);\r\n        } else {\r\n            this.handleDrown();\r\n        }\r\n    };\r\n\r\n    private readonly handleCollisionWithCar = (goingLeft: boolean) => {\r\n        this.internalDetectCollisions = () => {};\r\n        console.log('Crashed!');\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-squash.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n        this.particleSystem.carCrash(\r\n            this.player.center,\r\n            goingLeft ? Math.PI / 2 : -Math.PI / 2,\r\n            this.crashParticleParams,\r\n        );\r\n        this.internalPlayerRender = () => {};\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private readonly handleDrown = () => {\r\n        this.internalDetectCollisions = () => {};\r\n        console.log('Drown');\r\n\r\n        this.particleSystem.splash(this.player.center, this.splashParams);\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-plunk.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        this.internalPlayerRender = () => {};\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private readonly handleAlligator = (pathedObject?: PathedObject) => {\r\n        if (pathedObject && pathedObject.canStandOn) {\r\n            this.player.speedX =\r\n                pathedObject.speed * (pathedObject.goingLeft ? -1 : 1);\r\n            return;\r\n        }\r\n        this.internalDetectCollisions = () => {};\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-plunk.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        this.internalPlayerRender = () => {};\r\n        this.particleSystem.froggerBlood(\r\n            this.player.center,\r\n            this.aligatorDeathParams,\r\n        );\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private startTimedTransition = (\r\n        callback: () => void,\r\n        duration: number = 2000,\r\n    ) => {\r\n        this.eventSystem.addEvent(duration, 1, callback);\r\n    };\r\n\r\n    private loseALifeAndReset = () => {\r\n        this.lives--;\r\n\r\n        if (this.lives <= 0) {\r\n            this.lostGameScreen();\r\n            return;\r\n        }\r\n\r\n        this.time = 30000;\r\n        this.countDownTime = true;\r\n        this.resetPlayer();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-background.mp3',\r\n            0,\r\n            true,\r\n            0.5,\r\n        );\r\n    };\r\n\r\n    public readonly mouseClick = (ev: GameMouseEvent) => {\r\n        this.internalMouseClick(ev);\r\n    };\r\n\r\n    private readonly endGame = (userName: string, topFiveScore: boolean) => {\r\n        // Add score to high score manager\r\n        if (topFiveScore) {\r\n            HighScoreManager.addScore(\r\n                userName === '' ? 'Default_User' : userName,\r\n                this.scoreManager.score,\r\n            );\r\n        }\r\n\r\n        this.reset();\r\n        this.onGameOver();\r\n    };\r\n\r\n    private readonly beatGameScreen = () => {\r\n        this.internalDetectCollisions = () => {};\r\n        this.clearPlayerInternals();\r\n\r\n        const topFiveScore = HighScoreManager.isHighScore(\r\n            this.scoreManager.score,\r\n        );\r\n\r\n        let userName = '';\r\n\r\n        if (topFiveScore) {\r\n            const typingKeyboard: Keyboard = new Keyboard(true);\r\n            const registerLetter = (letter: string) => {\r\n                typingKeyboard.register(letter, () => {\r\n                    if (userName.length < 20) {\r\n                        userName += letter;\r\n                    }\r\n                });\r\n            };\r\n\r\n            genCharArray('a', 'z').forEach(registerLetter);\r\n            genCharArray('A', 'Z').forEach(registerLetter);\r\n\r\n            typingKeyboard.register('Backspace', () => {\r\n                if (userName.length > 0) {\r\n                    userName = userName.slice(0, userName.length - 1);\r\n                } else {\r\n                    userName = '';\r\n                }\r\n            });\r\n\r\n            this.internalUpdate = (elapsedTime: number) => {\r\n                typingKeyboard.process(elapsedTime);\r\n                this.gameUpdate(elapsedTime);\r\n            };\r\n        }\r\n\r\n        const buttonW = 350;\r\n        const buttonH = 100;\r\n        const bounds = new Rectangle(\r\n            (GameSettings.width - buttonW) / 2,\r\n            (GameSettings.width - buttonH) / 2 + 100,\r\n            buttonW,\r\n            buttonH,\r\n        );\r\n\r\n        this.internalMouseClick = (ev: GameMouseEvent) => {\r\n            if (bounds.inBounds(ev.pos)) {\r\n                this.endGame(userName, topFiveScore);\r\n            }\r\n        };\r\n\r\n        const bgWidth = 550;\r\n        const bgHeight = 500;\r\n\r\n        this.internalRender = (cr: CanvasRenderer) => {\r\n            this.gameRender(cr);\r\n            cr.drawRectangle(\r\n                (GameSettings.width - bgWidth) / 2,\r\n                (GameSettings.width - bgHeight) / 2,\r\n                bgWidth,\r\n                bgHeight,\r\n                0,\r\n                '#fff',\r\n            );\r\n            cr.drawText(\r\n                { x: 512, y: (GameSettings.width - bgHeight) / 2 + 40 },\r\n                'Game Over, You Won! :)',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n\r\n            cr.drawText(\r\n                { x: 512, y: (GameSettings.width - bgHeight) / 2 + 100 },\r\n                `Your Score: ${this.scoreManager.score}`,\r\n                0,\r\n                true,\r\n                '#000',\r\n                '40px arial',\r\n            );\r\n\r\n            if (topFiveScore) {\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 160 },\r\n                    `Enter Username:`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 200 },\r\n                    `${userName}`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n            } else {\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 160 },\r\n                    `You didn't get a top 5 score.`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 200 },\r\n                    `Better luck next time!`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n            }\r\n\r\n            cr.drawRectangle(bounds.x, bounds.y, bounds.w, bounds.h, 0, '#000');\r\n\r\n            cr.drawText(\r\n                { x: 512, y: bounds.y + 30 },\r\n                'Back To Menu',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n        };\r\n    };\r\n\r\n    private readonly lostGameScreen = () => {\r\n        this.countDownTime = false;\r\n        this.internalDetectCollisions = () => {};\r\n        this.clearPlayerInternals();\r\n\r\n        const buttonW = 350;\r\n        const buttonH = 100;\r\n        const bounds = new Rectangle(\r\n            (GameSettings.width - buttonW) / 2,\r\n            (GameSettings.width - buttonH) / 2,\r\n            buttonW,\r\n            buttonH,\r\n        );\r\n\r\n        this.internalMouseClick = (ev: GameMouseEvent) => {\r\n            if (bounds.inBounds(ev.pos)) {\r\n                this.reset();\r\n                this.onGameOver();\r\n            }\r\n        };\r\n\r\n        const bgWidth = 550;\r\n        const bgHeight = 500;\r\n\r\n        this.internalRender = (cr: CanvasRenderer) => {\r\n            this.gameRender(cr);\r\n            cr.drawRectangle(\r\n                (GameSettings.width - bgWidth) / 2,\r\n                (GameSettings.width - bgHeight) / 2,\r\n                bgWidth,\r\n                bgHeight,\r\n                0,\r\n                '#fff',\r\n            );\r\n            cr.drawText(\r\n                { x: 512, y: (GameSettings.width - bgHeight) / 2 + 40 },\r\n                'Game Over, You Lost :(',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n\r\n            cr.drawRectangle(bounds.x, bounds.y, bounds.w, bounds.h, 0, '#000');\r\n\r\n            cr.drawText(\r\n                { x: 512, y: bounds.y + 30 },\r\n                'Back To Menu',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n        };\r\n    };\r\n\r\n    private resetPlayer = () => {\r\n        this.initializePlayer();\r\n        this.internalDetectCollisions = this.gameDetectCollisions;\r\n    };\r\n}\r\n","import { CanvasRenderer } from '../Engine/Renderers/CanvasRenderer';\r\nimport Mouse, { GameMouseEvent } from '../Engine/Input/Mouse';\r\nimport { AudioSystem } from '../Engine/Systems/AudioSystem';\r\nimport GameLoop from '../Engine/BaseComponents/GameLoop';\r\nimport Menu from './Screens/Menu';\r\nimport GameModel from './GameModel';\r\nimport Keyboard from '../Engine/Input/Keyboard';\r\nimport ControlsManager from '../Engine/Managers/ControlsManager';\r\nimport GameSettings from '../Engine/Settings/GameSettings';\r\n\r\nexport default class GamePlay extends GameLoop<CanvasRenderer> {\r\n    private mouse: Mouse;\r\n    private playerKeyboard: Keyboard;\r\n    private internalMouseClick: (gev: GameMouseEvent) => void;\r\n    private internalMouseMove: (gev: GameMouseEvent) => void;\r\n\r\n    private menu: Menu;\r\n    private gameModel: GameModel;\r\n\r\n    private readonly audioSystem: AudioSystem = new AudioSystem();\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas, CanvasRenderer);\r\n\r\n        GameSettings.updateWithCanvas(canvas);\r\n\r\n        this.menu = new Menu(this.setupNewGame);\r\n        this.gameModel = new GameModel(this.handleGameEscape);\r\n\r\n        this.mouse = new Mouse(canvas);\r\n        this.addMouseHandlers();\r\n    }\r\n\r\n    public play(): void {\r\n        this.setupMenu();\r\n        this.start();\r\n    }\r\n\r\n    private setupMenu = () => {\r\n        this.clearAllInternals();\r\n        this.mouse.clearInputBuffer();\r\n\r\n        this.internalProcessInput = () => {\r\n            this.mouse.process();\r\n        };\r\n\r\n        this.internalMouseClick = this.menu.mouseClick;\r\n        this.internalRender = this.menu.render;\r\n    };\r\n\r\n    private setupNewGame = () => {\r\n        this.clearAllInternals();\r\n        this.mouse.clearInputBuffer();\r\n\r\n        this.internalRender = this.gameModel.render;\r\n        this.internalUpdate = this.gameModel.update;\r\n        this.internalMouseClick = this.gameModel.mouseClick;\r\n\r\n        this.initializeKeyboard();\r\n        this.internalProcessInput = (et: number) => {\r\n            this.playerKeyboard.process(et);\r\n            this.mouse.process();\r\n        };\r\n\r\n        // Should this be here? Attaching methods should be enough?\r\n        // How would the game model know it is a new game?\r\n        this.gameModel.start();\r\n    };\r\n\r\n    private initializeKeyboard = () => {\r\n        this.playerKeyboard = new Keyboard(true);\r\n\r\n        const controls = ControlsManager.getControls();\r\n\r\n        const { register } = this.playerKeyboard;\r\n\r\n        register(controls[0], this.gameModel.moveLeft);\r\n        register(controls[1], this.gameModel.moveRight);\r\n        register(controls[2], this.gameModel.moveUp);\r\n        register(controls[3], this.gameModel.moveDown);\r\n        register('Escape', this.handleGameEscape);\r\n    };\r\n\r\n    private handleGameEscape = () => {\r\n        this.gameModel.reset();\r\n        this.setupMenu();\r\n    };\r\n\r\n    private clearAllInternals = () => {\r\n        this.clearBaseInternals();\r\n        this.internalMouseClick = () => {};\r\n        this.internalMouseMove = () => {};\r\n    };\r\n\r\n    private addMouseHandlers = () => {\r\n        this.mouse.register('click', (gev: GameMouseEvent) => {\r\n            this.internalMouseClick(gev);\r\n        });\r\n\r\n        this.mouse.register('mousemove', (gev: GameMouseEvent) => {\r\n            this.internalMouseMove(gev);\r\n        });\r\n    };\r\n\r\n    public destroy = () => {\r\n        this.mouse.destroy();\r\n        this.audioSystem.destroy();\r\n    };\r\n}\r\n","import GamePlay from './Game/GamePlay';\r\n\r\nconst canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\r\n\r\nconst gamePlay = new GamePlay(canvas);\r\ngamePlay.play();\r\n\r\nconst handleResize = (ev: any) => {\r\n    const { innerWidth, innerHeight } = ev.target as Window;\r\n\r\n    const minSize = (Math.min(innerWidth, innerHeight) - 16).toString();\r\n    canvas.style.width = minSize;\r\n    canvas.style.height = minSize;\r\n};\r\n\r\nwindow.addEventListener('resize', handleResize);\r\nhandleResize({ target: window });\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}