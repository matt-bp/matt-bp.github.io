{"version":3,"sources":["src/Engine/Renderers/CanvasRenderer.ts","src/Engine/Settings/GameSettings.ts","src/Engine/Input/Mouse.ts","src/Engine/Audio/Audio.ts","src/Engine/Systems/AudioSystem.ts","src/Engine/BaseComponents/GameLoop.ts","src/Engine/Geometry/Rectangle.ts","src/Game/Renderers/ButtonRenderer.ts","src/Game/Screens/BaseScreen.ts","src/Engine/Renderers/TextRenderer.ts","src/Game/Screens/Credits.ts","src/Engine/Managers/HighScoreManager.ts","src/Game/Screens/HighScores.ts","src/Engine/Managers/ControlsManager.ts","src/Game/Screens/Controls.ts","src/Game/Screens/Menu.ts","src/Engine/Events/Event.ts","src/Engine/Systems/EventSystem.ts","src/Engine/Math/Vec2.ts","src/Game/Objects/Path.ts","src/Engine/Animation/Animation.ts","settings.js","src/Game/Objects/Player.ts","src/Engine/Graphics/SpriteSheet.ts","src/Game/Objects/PathedObject.ts","src/Game/Objects/AnimatedAnimal.ts","src/Game/Systems/PathedObjectSystem.ts","src/Game/Objects/HomePad.ts","src/Game/Renderers/HomePadRenderer.ts","src/Engine/Math/random.ts","src/Game/Systems/HomePadSystem.ts","src/Engine/Systems/BaseParticleSystem.ts","src/Engine/Graphics/Particle.ts","src/Game/Objects/PathedParticle.ts","src/Game/Systems/ParticleSystem.ts","src/Engine/Renderers/ParticleSystemRenderer.ts","src/Game/Systems/ScoringSystem.ts","src/Engine/Input/Keyboard.ts","src/Game/Helpers/character.ts","src/Game/GameModel.ts","src/Game/GamePlay.ts","src/index.ts"],"names":["module","exports","showCollisionShapes"],"mappings":"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","file":"src.d172c63e.js","sourceRoot":"..","sourcesContent":["import Vec2 from '../Math/Vec2';\r\nimport { Texture } from '../Graphics/Texture';\r\nimport SpriteSheet from '../Graphics/SpriteSheet';\r\nimport Rectangle from '../Geometry/Rectangle';\r\n\r\ntype Point = { x: number; y: number };\r\n\r\n/**\r\n * Renders things to a 2D HTML Canvas\r\n */\r\nexport class CanvasRenderer {\r\n    private context: CanvasRenderingContext2D;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.context = canvas.getContext('2d');\r\n    }\r\n\r\n    public get middleX() {\r\n        return this.width / 2;\r\n    }\r\n\r\n    public get width() {\r\n        return this.context.canvas.width;\r\n    }\r\n\r\n    public clear() {\r\n        const { width, height } = this.context.canvas;\r\n\r\n        this.context.clearRect(0, 0, width, height + 100);\r\n    }\r\n\r\n    public drawRectangle(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        rotation: number,\r\n        fillStyle: string | CanvasGradient,\r\n        strokeStyle?: string,\r\n    ) {\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.lineWidth = 5;\r\n\r\n        if (strokeStyle) {\r\n            this.context.strokeStyle = strokeStyle;\r\n        }\r\n\r\n        this.context.save();\r\n        this.context.translate(x, y);\r\n        this.context.rotate(rotation);\r\n        this.context.translate(-x, -y);\r\n\r\n        if (strokeStyle) {\r\n            this.context.stroke();\r\n        }\r\n\r\n        this.context.fillRect(x, y, width, height);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawText(\r\n        pos: Vec2,\r\n        text: string,\r\n        rotation: number = 0,\r\n        center: boolean = false,\r\n        fillStyle: string = '#000',\r\n        font: string = '64px arial',\r\n    ) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const width = this.context.measureText(text).width;\r\n        this.context.restore();\r\n\r\n        this.context.save();\r\n        this.context.font = font;\r\n        let height = this.context.measureText('m').width;\r\n        this.context.restore();\r\n\r\n        this.context.save();\r\n        this.context.font = font;\r\n\r\n        this.context.fillStyle = fillStyle;\r\n\r\n        const x = center ? pos.x - width / 2 : pos.x;\r\n        const y = center ? pos.y - width / 2 : pos.y;\r\n\r\n        this.context.textBaseline = 'top';\r\n        this.context.translate(x + width / 2, y + height / 2);\r\n        this.context.rotate(rotation);\r\n        this.context.translate(-(x + width / 2), -(y + height / 2));\r\n\r\n        this.context.fillText(text, x, pos.y);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawPoints(\r\n        points: Point[],\r\n        strokeStyle: string,\r\n        fillStyle: string,\r\n        closePath: boolean = false,\r\n    ) {\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = strokeStyle;\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.lineWidth = 3;\r\n\r\n        this.context.moveTo(points[0].x, points[0].y);\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n            this.context.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        if (closePath) {\r\n            this.context.closePath();\r\n        }\r\n        this.context.fill();\r\n        this.context.stroke();\r\n    }\r\n\r\n    public getTextWidth(text: string, font: string) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const width = this.context.measureText(text).width;\r\n        this.context.restore();\r\n        return width;\r\n    }\r\n\r\n    public getFontHeight(font: string) {\r\n        this.context.save();\r\n        this.context.font = font;\r\n        const height = this.context.measureText('m').width;\r\n        this.context.restore();\r\n        return height;\r\n    }\r\n\r\n    public drawTexture(texture: Texture) {\r\n        if (texture.ready) {\r\n            this.context.save();\r\n            this.context.translate(texture.center.x, texture.center.y);\r\n            this.context.rotate(texture.rotation);\r\n            this.context.translate(-texture.center.x, -texture.center.y);\r\n            this.context.drawImage(\r\n                texture.image,\r\n                texture.center.x - texture.width / 2,\r\n                texture.center.y - texture.height / 2,\r\n                texture.width,\r\n                texture.height,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the texure from the bounds stored in the key.\r\n     * @param spriteSheet Sprite sheet to pull dat from\r\n     * @param key Key to get bounds\r\n     * @param center Center of the texture\r\n     * @param centered Is the texured centered on x & y?\r\n     * @param centered Is the\r\n     */\r\n    public drawSubTexture(\r\n        spriteSheet: SpriteSheet,\r\n        key: string,\r\n        center: Vec2,\r\n        rotation: number,\r\n        centered: boolean = false,\r\n    ) {\r\n        if (spriteSheet.ready) {\r\n            const bounds = spriteSheet.getBounds(key);\r\n\r\n            const x = centered ? center.x - bounds.w / 2 : center.x;\r\n            const y = centered ? center.y - bounds.h / 2 : center.y;\r\n\r\n            this.context.save();\r\n            this.context.translate(center.x, center.y);\r\n            this.context.rotate(rotation);\r\n            this.context.translate(-center.x, -center.y);\r\n            this.context.drawImage(\r\n                spriteSheet.image,\r\n                bounds.x,\r\n                bounds.y,\r\n                bounds.w,\r\n                bounds.h,\r\n                x,\r\n                y,\r\n                bounds.w + 0.5,\r\n                bounds.h + 0.5,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the texure in the clipping area\r\n     * @param spriteSheet Sprite sheet to pull dat from\r\n     * @param key Key to get bounds\r\n     * @param center Center of the texture\r\n     * @param centered Is the texured centered on x & y?\r\n     * @param clippingArea Area to clip\r\n     */\r\n    public drawSubTextureInClip(\r\n        spriteSheet: SpriteSheet,\r\n        key: string,\r\n        center: Vec2,\r\n        centered: boolean = false,\r\n        clippingArea: Rectangle,\r\n    ) {\r\n        if (spriteSheet.ready) {\r\n            const bounds = spriteSheet.getBounds(key);\r\n\r\n            const x = centered ? center.x - bounds.w / 2 : center.x;\r\n            const y = centered ? center.y - bounds.h / 2 : center.y;\r\n\r\n            this.context.save();\r\n\r\n            this.context.rect(\r\n                clippingArea.x,\r\n                clippingArea.y,\r\n                clippingArea.w,\r\n                clippingArea.h,\r\n            );\r\n            this.context.clip();\r\n\r\n            this.context.drawImage(\r\n                spriteSheet.image,\r\n                bounds.x,\r\n                bounds.y,\r\n                bounds.w,\r\n                bounds.h,\r\n                x,\r\n                y,\r\n                bounds.w + 0.5,\r\n                bounds.h + 0.5,\r\n            );\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    public createGradient(pt1: Vec2, pt2: Vec2) {\r\n        return this.context.createLinearGradient(pt1.x, pt1.y, pt2.x, pt2.y);\r\n    }\r\n\r\n    public drawStrokeRect(\r\n        x: number,\r\n        y: number,\r\n        w: number,\r\n        h: number,\r\n        style: string,\r\n    ) {\r\n        this.context.strokeStyle = style;\r\n        this.context.lineWidth = 3;\r\n\r\n        this.context.save();\r\n\r\n        this.context.strokeRect(x, y, w, h);\r\n\r\n        this.context.restore();\r\n    }\r\n\r\n    public drawCircle(\r\n        x: number,\r\n        y: number,\r\n        radius: number,\r\n        fillStyle = '#000',\r\n        strokeStyle = '#fff',\r\n    ) {\r\n        this.context.save();\r\n        this.context.beginPath();\r\n        this.context.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n        this.context.fillStyle = fillStyle;\r\n        this.context.fill();\r\n        this.context.lineWidth = 5;\r\n        this.context.strokeStyle = strokeStyle;\r\n        this.context.stroke();\r\n        this.context.restore();\r\n    }\r\n}\r\n","export default class GameSettings {\r\n    private static _width: number = 1024;\r\n    private static _height: number = 1024;\r\n\r\n    public static updateWithCanvas(canvas: HTMLCanvasElement) {\r\n        GameSettings._width = canvas.width;\r\n        GameSettings._height = canvas.height;\r\n    }\r\n\r\n    static get width() {\r\n        return this._width;\r\n    }\r\n\r\n    static get height() {\r\n        return this._height;\r\n    }\r\n}\r\n","import Dictionary from '../Interfaces/Dictionary';\r\nimport GameSettings from '../Settings/GameSettings';\r\n\r\n/**\r\n * Mouse event for the game. Holds the native event, along with the positing of it in the HTML element.\r\n */\r\nexport type GameMouseEvent = { ev: MouseEvent; pos: Vec2 };\r\ntype Command = (gameMouseEvent: GameMouseEvent) => void;\r\ntype Vec2 = { x: number; y: number };\r\ntype SupportedEventTypes = 'click' | 'mousemove';\r\n\r\nexport default class Mouse {\r\n    private _handlers: Dictionary<Command[]> = {};\r\n    private _inputBuffer: Dictionary<MouseEvent> = {};\r\n\r\n    constructor(private htmlElement: HTMLElement) {\r\n        this._addEventListeners();\r\n    }\r\n\r\n    public destroy(): void {\r\n        this._removeEventListeners();\r\n\r\n        this._handlers = {};\r\n    }\r\n\r\n    public resetHandlers(): void {\r\n        this._handlers = {};\r\n    }\r\n\r\n    public clearInputBuffer(): void {\r\n        this._inputBuffer = {};\r\n    }\r\n\r\n    public register(eventName: SupportedEventTypes, handler: Command) {\r\n        if (!this._handlers[eventName]) {\r\n            this._handlers[eventName] = [];\r\n        }\r\n        this._handlers[eventName].push(handler);\r\n    }\r\n\r\n    public process = () => {\r\n        for (const key in this._inputBuffer) {\r\n            if (this._inputBuffer.hasOwnProperty(key)) {\r\n                for (\r\n                    let i = 0;\r\n                    this._handlers[key] && i < this._handlers[key].length;\r\n                    i++\r\n                ) {\r\n                    const ev = this._inputBuffer[key];\r\n                    this._handlers[key][i]({\r\n                        ev,\r\n                        pos: this.getPos(ev),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this._inputBuffer = {};\r\n    };\r\n\r\n    private _addEventListeners = () => {\r\n        this.htmlElement.addEventListener('click', this._handleInput);\r\n        this.htmlElement.addEventListener('mousemove', this._handleInput);\r\n    };\r\n\r\n    private _removeEventListeners = () => {\r\n        this.htmlElement.removeEventListener('click', this._handleInput);\r\n        this.htmlElement.removeEventListener('mousemove', this._handleInput);\r\n    };\r\n\r\n    private _handleInput = (ev: MouseEvent) => {\r\n        if (ev.type === 'click' || ev.type === 'mousemove') {\r\n            this._inputBuffer[ev.type] = ev;\r\n        }\r\n    };\r\n\r\n    private getPos(event: MouseEvent): Vec2 {\r\n        const rect = this.htmlElement.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        const ratioX = GameSettings.width / rect.width;\r\n        const ratioY = GameSettings.height / rect.height;\r\n        return { x: x * ratioX, y: y * ratioY };\r\n    }\r\n}\r\n","export class GameAudio {\r\n    private elapsedTime: number = 0;\r\n\r\n    private audioEl: HTMLAudioElement;\r\n\r\n    constructor(\r\n        private source: string,\r\n        private delay: number = 0,\r\n        private loop: boolean = false,\r\n        private volume: number = 1,\r\n        private callback: () => void,\r\n    ) {}\r\n\r\n    public update = (elapsedTime: number) => {\r\n        if (this.audioEl) {\r\n            return;\r\n        }\r\n\r\n        this.elapsedTime += elapsedTime;\r\n        if (this.elapsedTime >= this.delay) {\r\n            this.audioEl = new Audio(this.source);\r\n            this.audioEl.volume = this.volume;\r\n            if (this.loop) {\r\n                this.audioEl.addEventListener(\r\n                    'ended',\r\n                    function() {\r\n                        this.currentTime = 0;\r\n                        this.play();\r\n                    },\r\n                    false,\r\n                );\r\n            }\r\n            this.audioEl.play().then(this.callback);\r\n        }\r\n    };\r\n\r\n    public pause = () => {\r\n        if (this.audioEl) {\r\n            this.audioEl.pause();\r\n        }\r\n    };\r\n\r\n    public play = () => {\r\n        if (this.audioEl) {\r\n            this.audioEl.play();\r\n        }\r\n    };\r\n\r\n    get done() {\r\n        return this.audioEl && this.audioEl.played && !this.loop;\r\n    }\r\n\r\n    public destory = () => {\r\n        this.audioEl.pause();\r\n    };\r\n}\r\n","import { IUpdateable } from '../Interfaces/IUpdateable';\r\nimport { GameAudio } from '../Audio/Audio';\r\n\r\nexport class AudioSystem implements IUpdateable {\r\n    private audio: GameAudio[] = [];\r\n    public addAudio = (\r\n        source: string,\r\n        delay: number = 0,\r\n        loop: boolean = false,\r\n        volume: number = 1,\r\n        callback?: () => void,\r\n    ) => {\r\n        this.audio.push(new GameAudio(source, delay, loop, volume, callback));\r\n    };\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = this.audio.length - 1; i >= 0; i--) {\r\n            this.audio[i].update(elapsedTime);\r\n\r\n            if (this.audio[i].done) {\r\n                this.audio.splice(i, 1);\r\n                continue;\r\n            }\r\n            this.audio[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public clearAllSounds = () => {\r\n        for (let i = 0; i < this.audio.length; i++) {\r\n            this.audio[i].pause();\r\n        }\r\n        this.audio.length = 0;\r\n    };\r\n\r\n    public destroy = () => {\r\n        for (let i = 0; i < this.audio.length; i++) {\r\n            this.audio[i].destory();\r\n        }\r\n        this.audio.length = 0;\r\n    };\r\n}\r\n","/**\r\n * Base class for a game loop.\r\n */\r\nexport default class GameLoop<RendererType> {\r\n    private previousTimeStamp: number = 0;\r\n    private cr: RendererType;\r\n    protected isGameOver: boolean = false;\r\n\r\n    /**\r\n     * Will be called every game loop. You should put mouse or keyboard processes here.\r\n     */\r\n    protected internalProcessInput: (elapsedTime: number) => void;\r\n    /**\r\n     * Will be called every game loop. Should set this to what you need.\r\n     */\r\n    protected internalUpdate: (elapsedTime: number) => void;\r\n    /**\r\n     * Will be called every game loop. Depending on the templated RenderType you will need to use that.\r\n     */\r\n    protected internalRender: (cr: RendererType) => void;\r\n\r\n    constructor(\r\n        canvas: HTMLCanvasElement,\r\n        RenderCreator: new (...args: any[]) => RendererType,\r\n    ) {\r\n        this.cr = new RenderCreator(canvas);\r\n    }\r\n\r\n    /**\r\n     * Starts the game loop.\r\n     */\r\n    protected start = () => {\r\n        this.previousTimeStamp = performance.now();\r\n        requestAnimationFrame(this.gameLoop);\r\n    };\r\n\r\n    /**\r\n     * Clears the internals for process input, update, and render.\r\n     */\r\n    protected clearBaseInternals = () => {\r\n        this.internalProcessInput = () => {};\r\n        this.internalRender = () => {};\r\n        this.internalUpdate = () => {};\r\n    };\r\n\r\n    private gameLoop = (timeStamp: number) => {\r\n        const elapsedTime = timeStamp - this.previousTimeStamp;\r\n        this.previousTimeStamp = timeStamp;\r\n\r\n        this.processInput(elapsedTime);\r\n        this.update(elapsedTime);\r\n        this.render();\r\n\r\n        if (!this.isGameOver) {\r\n            requestAnimationFrame(this.gameLoop);\r\n        }\r\n    };\r\n\r\n    private processInput = (elapsedTime: number) => {\r\n        this.internalProcessInput(elapsedTime);\r\n    };\r\n\r\n    private update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n    };\r\n\r\n    private render = () => {\r\n        this.internalRender(this.cr);\r\n    };\r\n}\r\n","import Vec2 from '../Math/Vec2';\r\n\r\nexport default class Rectangle {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public w: number,\r\n        public h: number,\r\n    ) {}\r\n\r\n    public inBounds(pos: Vec2) {\r\n        return (\r\n            pos.x >= this.x &&\r\n            pos.x <= this.x + this.w &&\r\n            pos.y >= this.y &&\r\n            pos.y <= this.y + this.h\r\n        );\r\n    }\r\n}\r\n\r\nexport function copy(a: Rectangle) {\r\n    return new Rectangle(a.x, a.y, a.w, a.h);\r\n}\r\n","import Button from '../UI/Button';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nconst ButtonRenderer = (button: Button) => (cr: CanvasRenderer) => {\r\n    const { x, y, w, h } = button.bounds;\r\n\r\n    cr.drawRectangle(x, y, w, h, 0, button.style?.fill ?? '#000');\r\n\r\n    const { content, font } = button.text;\r\n\r\n    // Center text withing the rectangle.\r\n    const textWidth = cr.getTextWidth(content, font);\r\n    const textHeight = cr.getFontHeight(font);\r\n\r\n    const textXOff = (textWidth - w) / 2;\r\n    const textYOff = (textHeight - h) / 2;\r\n\r\n    cr.drawText(\r\n        { x: x - textXOff, y: y - textYOff },\r\n        content,\r\n        0,\r\n        false,\r\n        button.text.fill ?? '#fff',\r\n        font,\r\n    );\r\n};\r\n\r\nexport default ButtonRenderer;\r\n","import { GameMouseEvent } from '../../Engine/Input/Mouse';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport ButtonRenderer from '../Renderers/ButtonRenderer';\r\nimport Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport Button from '../UI/Button';\r\n\r\nexport default class BaseScreen {\r\n    private internalMouseMove: (gev: GameMouseEvent) => void;\r\n    protected internalMouseClick: (gev: GameMouseEvent) => void;\r\n    protected internalRender: (cr: CanvasRenderer) => void;\r\n\r\n    public refresh?: () => void;\r\n\r\n    protected buttons: Button[] = [];\r\n    protected readonly buttonW = 400;\r\n    protected readonly buttonX = (1024 - this.buttonW) / 2;\r\n\r\n    protected renderers: ((cr: CanvasRenderer) => void)[] = [];\r\n\r\n    constructor(public readonly title: string) {\r\n        this.internalMouseClick = this.findMouseClickOnButtons;\r\n        this.internalRender = this.renderButtons;\r\n    }\r\n\r\n    protected createRenderersFromButtons = () => {\r\n        for (let i = 0; i < this.buttons.length; i++) {\r\n            this.renderers.push(ButtonRenderer(this.buttons[i]));\r\n        }\r\n    };\r\n\r\n    protected clearRenderers = () => {\r\n        console.log('hello!');\r\n        this.renderers = [];\r\n    };\r\n\r\n    private findMouseClickOnButtons = (gev: GameMouseEvent) => {\r\n        for (let i = 0; i < this.buttons.length; i++) {\r\n            const oldBounds = this.buttons[i].bounds;\r\n            if (\r\n                new Rectangle(\r\n                    oldBounds.x,\r\n                    oldBounds.y,\r\n                    oldBounds.w,\r\n                    oldBounds.h,\r\n                ).inBounds(gev.pos)\r\n            ) {\r\n                this.buttons[i].onSelect();\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    protected resetMouseClick = () => {\r\n        this.internalMouseClick = this.findMouseClickOnButtons;\r\n    };\r\n\r\n    public mouseClick = (gev: GameMouseEvent) => {\r\n        this.internalMouseClick(gev);\r\n    };\r\n\r\n    protected renderButtons = (cr: CanvasRenderer) => {\r\n        cr.drawText({ x: cr.middleX, y: 100 }, this.title, 0, true);\r\n        for (let i = 0; i < this.renderers.length; i++) {\r\n            this.renderers[i](cr);\r\n        }\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        cr.clear();\r\n        this.internalRender(cr);\r\n    };\r\n\r\n    /**\r\n     * Gets the x position for a centered thing\r\n     */\r\n    protected getXFromW = (w: number) => {\r\n        return (1024 - w) / 2;\r\n    };\r\n\r\n    protected getXAndW = (startingW: number) => {\r\n        return { x: this.getXAndW(startingW), w: startingW };\r\n    };\r\n\r\n    protected createBackButton = (curY: number, onSelect: () => void) => {\r\n        const backW = this.buttonW + 50;\r\n        const backX = this.getXFromW(backW);\r\n\r\n        this.buttons.push({\r\n            bounds: new Rectangle(backX, (curY += 200), backW, 100),\r\n            text: { content: 'Back To Menu', font: '64px arial' },\r\n            onSelect: onSelect,\r\n        });\r\n    };\r\n}\r\n","import Text from '../Graphics/Text';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nconst TextRenderer = (text: Text) => (cr: CanvasRenderer) => {\r\n    cr.drawText(\r\n        text.pos,\r\n        text.content,\r\n        text.rotation ?? 0,\r\n        text.centered ?? false,\r\n        text.fill ?? '#000',\r\n        text.font ?? '64px arial',\r\n    );\r\n};\r\n\r\nexport default TextRenderer;\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport TextRenderer from '../../Engine/Renderers/TextRenderer';\r\n\r\nexport default class Credits extends BaseScreen {\r\n    constructor(onBack: () => void) {\r\n        super('Credits');\r\n\r\n        let curY = 200;\r\n\r\n        const creditsText = [\r\n            'This work was done by Matt Bishop.',\r\n            'I was him who did it.',\r\n            'Frogger would be fun they said... wait who?',\r\n            'Less is more they say.',\r\n        ];\r\n\r\n        for (let i = 0; i < creditsText.length; i++) {\r\n            this.renderers.push(\r\n                TextRenderer({\r\n                    content: `${creditsText[i]}`,\r\n                    pos: { x: 150, y: curY += 50 },\r\n                    font: '32px arial',\r\n                }),\r\n            );\r\n        }\r\n\r\n        this.createBackButton(curY, onBack);\r\n\r\n        this.createRenderersFromButtons();\r\n    }\r\n}\r\n","import IHighScore from '../Interfaces/IHighScore';\r\n\r\nexport default class HighScoreManager {\r\n    private static storageKey: string = '@frogger-high-scores';\r\n\r\n    public static clear = () => {\r\n        localStorage.removeItem(HighScoreManager.storageKey);\r\n    };\r\n\r\n    public static getHighScores = () => {\r\n        const highScores = localStorage[HighScoreManager.storageKey];\r\n        if (!highScores) {\r\n            return [];\r\n        } else {\r\n            return JSON.parse(highScores) as IHighScore[];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sends a username and a score to be added to the high scores.\r\n     *\r\n     * Returns true if it was added, false if it wasn't.\r\n     */\r\n    public static addScore = (username: string, score: number) => {\r\n        let highScores = HighScoreManager.getHighScores();\r\n\r\n        highScores.push({ username, score: parseInt(score.toFixed(0)) });\r\n        highScores.sort((a: IHighScore, b: IHighScore) => {\r\n            if (a.score < b.score) {\r\n                return -1;\r\n            } else if (a.score === b.score) {\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        });\r\n\r\n        if (highScores.length > 5) {\r\n            const removedItem = highScores.splice(0, 1)[0];\r\n            if (\r\n                removedItem.score === score &&\r\n                removedItem.username === username\r\n            ) {\r\n                // The object wasn't added, it was removed immediately.\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localStorage[HighScoreManager.storageKey] = JSON.stringify(highScores);\r\n\r\n        return true;\r\n    };\r\n\r\n    public static isHighScore = (score: number) => {\r\n        let highScores = HighScoreManager.getHighScores();\r\n\r\n        if (highScores.length < 5) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < highScores.length; i++) {\r\n            if (highScores[i].score < score) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport HighScoreManager from '../../Engine/Managers/HighScoreManager';\r\nimport TextRenderer from '../../Engine/Renderers/TextRenderer';\r\nimport Text from '../../Engine/Graphics/Text';\r\n\r\nexport default class HighScores extends BaseScreen {\r\n    private highScoreTextPairs: { username: Text; score: Text }[] = [];\r\n\r\n    constructor(private onBack: () => void) {\r\n        super('High Scores');\r\n        this.createScreen();\r\n    }\r\n\r\n    private createScreen = () => {\r\n        this.renderers.length = 0;\r\n        this.buttons.length = 0;\r\n\r\n        let curY = 250;\r\n\r\n        const usernameX = 175;\r\n        const scoreX = 700;\r\n\r\n        const highScores = HighScoreManager.getHighScores().reverse();\r\n\r\n        for (let i = 0; i < highScores.length; i++) {\r\n            const { username, score } = highScores[i];\r\n            const usernameText: Text = {\r\n                content: username.toString(),\r\n                pos: { x: usernameX, y: curY },\r\n            };\r\n            this.renderers.push(TextRenderer(usernameText));\r\n\r\n            const scoreText: Text = {\r\n                content: score.toString(),\r\n                pos: { x: scoreX, y: curY },\r\n            };\r\n            this.renderers.push(TextRenderer(scoreText));\r\n\r\n            this.highScoreTextPairs.push({\r\n                username: usernameText,\r\n                score: scoreText,\r\n            });\r\n\r\n            curY += 100;\r\n        }\r\n\r\n        this.createBackButton(curY - 100, this.onBack);\r\n\r\n        this.createRenderersFromButtons();\r\n    };\r\n\r\n    public refresh = () => {\r\n        this.createScreen();\r\n    };\r\n}\r\n","// type Controls = { moveLeft: string; moveRight: string; shoot: string };\r\n\r\nexport default class ControlsManager {\r\n    private static storageKey: string = '@frogger-controls';\r\n\r\n    private static defaultControls: string[] = [\r\n        'ArrowLeft',\r\n        'ArrowRight',\r\n        'ArrowUp',\r\n        'ArrowDown',\r\n    ];\r\n\r\n    public static clear() {\r\n        localStorage.removeItem(ControlsManager.storageKey);\r\n    }\r\n\r\n    public static getControls(): string[] {\r\n        const controls = localStorage[ControlsManager.storageKey];\r\n\r\n        return controls ? JSON.parse(controls) : [...this.defaultControls];\r\n    }\r\n\r\n    private static setControls(newControls: string[]) {\r\n        localStorage[ControlsManager.storageKey] = JSON.stringify(newControls);\r\n    }\r\n\r\n    public static updateControl(index: number, newKey: string) {\r\n        const controls = localStorage[ControlsManager.storageKey];\r\n\r\n        let newControls = [...this.defaultControls];\r\n        if (controls) {\r\n            newControls = JSON.parse(controls);\r\n        }\r\n\r\n        if (index < 0 || index >= newControls.length) {\r\n            return;\r\n        }\r\n        newControls[index] = newKey;\r\n\r\n        ControlsManager.setControls(newControls);\r\n    }\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport ControlsManager from '../../Engine/Managers/ControlsManager';\r\nimport Button from '../UI/Button';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\n\r\nexport default class Controls extends BaseScreen {\r\n    private controlsText: string[] = [];\r\n\r\n    private inSelection: boolean = false;\r\n    private selectedControlOptionIndex: number;\r\n\r\n    constructor(private onBack: () => void) {\r\n        super('Controls');\r\n\r\n        let curY = 200;\r\n\r\n        this.initializeControlsText();\r\n        const controls = ControlsManager.getControls();\r\n\r\n        const textW = this.buttonW + 300;\r\n        const textX = this.getXFromW(textW);\r\n\r\n        for (let i = 0; i < this.controlsText.length; i++) {\r\n            const button = {\r\n                bounds: new Rectangle(textX, (curY += 100), textW, 100),\r\n                text: {\r\n                    content: this.createTextContent(\r\n                        this.controlsText[i],\r\n                        controls[i],\r\n                    ),\r\n                    font: '64px arial',\r\n                    fill: '#00aaff',\r\n                },\r\n                onSelect: () => {\r\n                    if (!this.inSelection) {\r\n                        button.text.content = this.createTextContent(\r\n                            this.controlsText[i],\r\n                            'Press a key...',\r\n                        );\r\n                        this.getKeyAndUpdateIndex(i);\r\n                    }\r\n                },\r\n                style: { fill: '#fff' },\r\n            } as Button;\r\n            this.buttons.push(button);\r\n        }\r\n\r\n        this.createBackButton(curY, this.handleOnBack);\r\n\r\n        this.createRenderersFromButtons();\r\n\r\n        this.internalRender = (cr: CanvasRenderer) => {\r\n            cr.drawText({ x: cr.middleX, y: 100 }, this.title, 0, true);\r\n            cr.drawText(\r\n                { x: cr.middleX, y: 200 },\r\n                'Click on an option and press a key to set the control.',\r\n                0,\r\n                true,\r\n                '#000',\r\n                '32px arial',\r\n            );\r\n            for (let i = 0; i < this.renderers.length; i++) {\r\n                this.renderers[i](cr);\r\n            }\r\n        };\r\n    }\r\n\r\n    private initializeControlsText = () => {\r\n        this.controlsText = ['Move Left', 'Move Right', 'Move Up', 'Move Down'];\r\n    };\r\n\r\n    private resetControlsText = () => {\r\n        const controls = ControlsManager.getControls();\r\n        this.initializeControlsText();\r\n        for (let i = 0; i < this.controlsText.length; i++) {\r\n            this.buttons[i].text.content = this.createTextContent(\r\n                this.controlsText[i],\r\n                controls[i].toString(),\r\n            );\r\n        }\r\n    };\r\n\r\n    private handleOnBack = () => {\r\n        this.stopListeningForKey();\r\n        this.resetControlsText();\r\n        this.onBack();\r\n    };\r\n\r\n    private createTextContent = (base: string, left: string) => {\r\n        return `${base}: ${left !== ' ' ? left : 'Space'}`;\r\n    };\r\n\r\n    private getKeyAndUpdateIndex = (index: number) => {\r\n        if (!this.inSelection) {\r\n            this.startListeningForKey();\r\n            this.selectedControlOptionIndex = index;\r\n        }\r\n    };\r\n\r\n    private getNextKey = (ev: KeyboardEvent) => {\r\n        this.stopListeningForKey();\r\n        ControlsManager.updateControl(this.selectedControlOptionIndex, ev.key);\r\n\r\n        this.resetControlsText();\r\n    };\r\n\r\n    private startListeningForKey = () => {\r\n        this.inSelection = true;\r\n        window.addEventListener('keydown', this.getNextKey);\r\n    };\r\n\r\n    private stopListeningForKey = () => {\r\n        this.inSelection = false;\r\n        window.removeEventListener('keydown', this.getNextKey);\r\n    };\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport BaseScreen from './BaseScreen';\r\nimport Credits from './Credits';\r\nimport HighScores from './HighScores';\r\nimport Controls from './Controls';\r\n\r\nexport default class Menu extends BaseScreen {\r\n    private screens: BaseScreen[] = [];\r\n\r\n    constructor(onNewGame: () => void) {\r\n        super('Frogger');\r\n\r\n        let curY = 200;\r\n\r\n        this.buttons.push({\r\n            bounds: new Rectangle(this.buttonX, curY, this.buttonW, 100),\r\n            text: { content: 'New Game', font: '64px arial' },\r\n            onSelect: onNewGame,\r\n        });\r\n\r\n        const screenTypes = [HighScores, Credits, Controls];\r\n\r\n        for (let i = 0; i < screenTypes.length; i++) {\r\n            const screen = new screenTypes[i](this.returnToMenu);\r\n            this.screens.push(screen);\r\n            this.buttons.push({\r\n                bounds: new Rectangle(\r\n                    this.buttonX,\r\n                    (curY += 200),\r\n                    this.buttonW,\r\n                    100,\r\n                ),\r\n                text: { content: screen.title, font: '64px arial' },\r\n                onSelect: () => this.transitionToScreen(i),\r\n            });\r\n        }\r\n\r\n        this.createRenderersFromButtons();\r\n    }\r\n\r\n    private transitionToScreen = (index: number) => {\r\n        if (this.screens[index].refresh) {\r\n            this.screens[index].refresh();\r\n        }\r\n\r\n        this.internalRender = this.screens[index].render;\r\n        this.internalMouseClick = this.screens[index].mouseClick;\r\n    };\r\n\r\n    private returnToMenu = () => {\r\n        this.internalRender = this.renderButtons;\r\n        this.resetMouseClick();\r\n    };\r\n}\r\n","export default class Event {\r\n    private timeSinceLastEvent: number = 0;\r\n\r\n    /**\r\n     * An event structure to a number of things after a time.\r\n     * @param interval Time (ms) between event firings\r\n     * @param numTimes Number of times event will fire\r\n     * @param callback Callback for when the event fires\r\n     */\r\n    constructor(\r\n        private interval: number,\r\n        private numTimes: number,\r\n        private callback?: () => void,\r\n    ) {}\r\n\r\n    public update(elapsedTime: number) {\r\n        this.timeSinceLastEvent += elapsedTime;\r\n\r\n        if (this.timeSinceLastEvent > this.interval) {\r\n            this.timeSinceLastEvent -= this.interval;\r\n            this.numTimes--;\r\n            if (this.callback) {\r\n                this.callback();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get timesLeft(): number {\r\n        return this.numTimes;\r\n    }\r\n}\r\n","import { IUpdateable } from '../Interfaces/IUpdateable';\r\nimport Event from '../Events/Event';\r\n\r\nexport default class EventSystem implements IUpdateable {\r\n    private events: Event[] = [];\r\n    public addEvent = (\r\n        interval: number,\r\n        numTimes: number,\r\n        callback?: () => void,\r\n    ) => {\r\n        this.events.push(new Event(interval, numTimes, callback));\r\n    };\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = 0; i < this.events.length; i++) {\r\n            if (this.events[i].timesLeft <= 0) {\r\n                this.events.splice(i, 1);\r\n                i--;\r\n                continue;\r\n            }\r\n            this.events[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public destroy = () => {\r\n        this.events.length = 0;\r\n    };\r\n\r\n    public clear = () => {\r\n        this.events.length = 0;\r\n    };\r\n}\r\n","export default class Vec2 {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function distSqrd(a: Vec2, b: Vec2) {\r\n    return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);\r\n}\r\n\r\nexport function dist(a: Vec2, b: Vec2) {\r\n    return Math.sqrt(distSqrd(a, b));\r\n}\r\n\r\nexport function diff(a: Vec2, b: Vec2) {\r\n    return { x: b.x - a.x, y: b.y - a.y };\r\n}\r\n\r\nexport function magSqrd(a: Vec2) {\r\n    return Math.pow(a.x, 2) + Math.pow(a.y, 2);\r\n}\r\n\r\nexport function mag(a: Vec2) {\r\n    return Math.sqrt(magSqrd(a));\r\n}\r\n\r\nexport function expand(a: Vec2) {\r\n    return { x: a.x, y: a.y };\r\n}\r\n","import Vec2, { distSqrd, dist, diff } from '../../Engine/Math/Vec2';\r\n\r\n/**\r\n * Represents a path of points\r\n */\r\nexport default class Path {\r\n    private points: Vec2[] = [];\r\n    private curPointIndex: number = 0;\r\n    private curDistanceTraveled: number = 0;\r\n\r\n    // getting percent done? For knowing when to fire stuff?\r\n    // could just use the elapsed time\r\n\r\n    /**\r\n     * Creates a new path\r\n     * @param onEndPath Gets called when the path is finished\r\n     */\r\n    constructor(\r\n        private loop: boolean = false,\r\n        private onEndPath?: () => void,\r\n        private wrap: boolean = false,\r\n    ) {}\r\n\r\n    public addPoint = (point: Vec2) => {\r\n        this.points.push(point);\r\n    };\r\n\r\n    /**\r\n     * Travel a certain distance on the path\r\n     * @param distance Distance to travel\r\n     * @returns The current point on a path\r\n     */\r\n    public travel(distance: number): Vec2 {\r\n        let nextIndex = this.curPointIndex + 1;\r\n\r\n        if (this.curPointIndex >= this.points.length - 1) {\r\n            if (this.loop) {\r\n                this.curPointIndex = this.points.length - 1;\r\n                nextIndex = 0;\r\n            } else if (this.wrap) {\r\n                this.curPointIndex = 0;\r\n                this.curDistanceTraveled = 0;\r\n                nextIndex = 1;\r\n            } else {\r\n                // console.log('Ending');\r\n                // call onEnded?\r\n                if (this.onEndPath) {\r\n                    this.onEndPath();\r\n                }\r\n                return this.points[this.points.length - 1];\r\n            }\r\n        }\r\n\r\n        let distBetweenPoints = dist(\r\n            this.points[this.curPointIndex],\r\n            this.points[nextIndex],\r\n        );\r\n\r\n        this.curDistanceTraveled += distance;\r\n\r\n        // skip over points until we land between two of them\r\n        // or we reach the end\r\n        while (this.curDistanceTraveled >= distBetweenPoints) {\r\n            this.curDistanceTraveled -= distBetweenPoints;\r\n\r\n            if (this.loop) {\r\n                this.curPointIndex =\r\n                    (this.curPointIndex + 1) % this.points.length;\r\n\r\n                nextIndex =\r\n                    this.curPointIndex === 0 ? 1 : this.curPointIndex + 1;\r\n            } else {\r\n                this.curPointIndex++;\r\n                nextIndex = this.curPointIndex + 1;\r\n            }\r\n\r\n            if (this.curPointIndex >= this.points.length - 1) {\r\n                if (this.loop) {\r\n                    nextIndex = 0;\r\n                } else if (this.wrap) {\r\n                    this.curPointIndex = 0;\r\n                    this.curDistanceTraveled = 0;\r\n                    nextIndex = 1;\r\n                } else {\r\n                    // console.log('Ending 2');\r\n                    // call onEnded?\r\n                    if (this.onEndPath) {\r\n                        this.onEndPath();\r\n                    }\r\n                    return this.points[this.points.length - 1];\r\n                }\r\n            }\r\n        }\r\n\r\n        const a = this.points[this.curPointIndex];\r\n        const b = this.points[nextIndex];\r\n\r\n        distBetweenPoints = dist(a, b);\r\n\r\n        const diffBetweenPoints = diff(a, b);\r\n\r\n        const traveledRatio = this.curDistanceTraveled / distBetweenPoints;\r\n\r\n        return {\r\n            x: a.x + diffBetweenPoints.x * traveledRatio,\r\n            y: a.y + diffBetweenPoints.y * traveledRatio,\r\n        };\r\n    }\r\n\r\n    get lengthSquared() {\r\n        let length = 0;\r\n\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            const nextIndex = i + 1;\r\n            if (nextIndex >= this.points.length) {\r\n                return length;\r\n            }\r\n            length += distSqrd(this.points[i], this.points[nextIndex]);\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    get length() {\r\n        return Math.sqrt(this.lengthSquared);\r\n    }\r\n\r\n    get numberOfPoints() {\r\n        return this.points.length;\r\n    }\r\n\r\n    public clear = () => {\r\n        this.points.length = 0;\r\n        this.curDistanceTraveled = 0;\r\n        this.curPointIndex = 0;\r\n    };\r\n}\r\n","export default class Animation {\r\n    private _elapsedTime = 0;\r\n    private _curFrame = 1;\r\n    private _timePerFrame = 0;\r\n\r\n    constructor(\r\n        private frames: string[],\r\n        animTime: number,\r\n        private loop: boolean = false,\r\n    ) {\r\n        this._timePerFrame = animTime / (frames.length + 1);\r\n    }\r\n\r\n    public readonly reset = () => {\r\n        this._elapsedTime = 0;\r\n        this._curFrame = 1;\r\n    };\r\n\r\n    public readonly watch = (elapsedTime: number) => {\r\n        this._elapsedTime += elapsedTime;\r\n\r\n        if (this._elapsedTime >= this._timePerFrame * this._curFrame) {\r\n            if (this.loop) {\r\n                if (this._curFrame >= this.frames.length) {\r\n                    this._elapsedTime = 0;\r\n                    this._curFrame = 1;\r\n                } else {\r\n                    this._curFrame += 1;\r\n                }\r\n            } else {\r\n                this._curFrame +=\r\n                    this._curFrame < this.frames.length\r\n                        ? 1\r\n                        : this.frames.length;\r\n            }\r\n        }\r\n\r\n        return this.frames[this._curFrame - 1];\r\n    };\r\n\r\n    get timePerFrame() {\r\n        return this._timePerFrame;\r\n    }\r\n\r\n    get currentFrame() {\r\n        return this.frames[this._curFrame - 1];\r\n    }\r\n}\r\n","module.exports = {\r\n    showCollisionShapes: false,\r\n};\r\n","import Vec2, { expand } from '../../Engine/Math/Vec2';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport { Circle } from '../../Engine/Math/circle';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport Path from './Path';\r\nimport Animation from '../../Engine/Animation/Animation';\r\nimport settings from '../../../settings';\r\nimport { AudioSystem } from '../../Engine/Systems/AudioSystem';\r\n\r\ninterface Props {\r\n    center: Vec2;\r\n    collisionRadius: number;\r\n    width: number;\r\n    spriteSheet: SpriteSheet;\r\n    /**\r\n     * Number to increase a x or y value by when moving\r\n     */\r\n    delta: number;\r\n}\r\n\r\nexport default class Player {\r\n    private _center: Vec2;\r\n    private _inMove: boolean = false;\r\n    private _animPath: Path;\r\n    private _rotation: number = Math.PI;\r\n\r\n    /**\r\n     * Change in x when on a log or turtle\r\n     */\r\n    private _speedX = 0;\r\n\r\n    private pixels: number = 100;\r\n    /**\r\n     * Time in milliseconds for player travel/animations\r\n     */\r\n    private readonly milli: number = 500;\r\n    private speed: number = this.pixels / this.milli;\r\n\r\n    private _currentFrame: string = 'frogger-idle';\r\n    private _anim = new Animation(\r\n        [\r\n            'frogger-1',\r\n            'frogger-2',\r\n            'frogger-3',\r\n            'frogger-4',\r\n            'frogger-3',\r\n            'frogger-2',\r\n            'frogger-1',\r\n            'frogger-idle',\r\n        ],\r\n        this.milli,\r\n    );\r\n\r\n    private internalUpdate: (elapsedTime: number) => void;\r\n\r\n    constructor(private props: Props, private audioSystem: AudioSystem) {\r\n        this._center = props.center;\r\n        this.internalUpdate = this.handleBeingMoved;\r\n        this._animPath = new Path(false, this.handleAnimationDone);\r\n    }\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n    };\r\n\r\n    public readonly render = (cr: CanvasRenderer) => {\r\n        const { x, y } = this._center;\r\n\r\n        cr.drawSubTexture(\r\n            this.props.spriteSheet,\r\n            this._currentFrame,\r\n            // -60 will line up the sprite in the center vertically. This is because\r\n            // we're drawing a sprite bigger than it actually is.\r\n            { x, y },\r\n            this._rotation,\r\n            true,\r\n        );\r\n\r\n        // draw circle showing center of frogger\r\n        if (settings.showCollisionShapes) {\r\n            cr.drawCircle(x, y, 10);\r\n        }\r\n\r\n        // draw larger circle showing collision radius\r\n    };\r\n\r\n    public moveLeft = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        if (this._center.x <= 1024 * (1 / 13)) {\r\n            return;\r\n        }\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(Math.PI / 2, (a: Vec2) => {\r\n            return { x: a.x - this.props.delta, y: a.y };\r\n        });\r\n    };\r\n\r\n    public moveRight = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        if (this._center.x >= 1024 * (12 / 13)) {\r\n            return;\r\n        }\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(-Math.PI / 2, (a: Vec2) => {\r\n            return { x: a.x + this.props.delta, y: a.y };\r\n        });\r\n    };\r\n\r\n    public moveUp = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        this._speedX = 0;\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(Math.PI, (a: Vec2) => {\r\n            return { x: a.x, y: a.y - this.props.delta };\r\n        });\r\n    };\r\n\r\n    public moveDown = () => {\r\n        if (this._inMove) {\r\n            return;\r\n        }\r\n\r\n        if (this._center.y > (1024 * 12) / 13) {\r\n            return;\r\n        }\r\n\r\n        this._speedX = 0;\r\n\r\n        this.audioSystem.addAudio('audio/sound-frogger-hop.mp3', 0, false, 0.5);\r\n        this.initializeMove(0, (a: Vec2) => {\r\n            return { x: a.x, y: a.y + this.props.delta };\r\n        });\r\n    };\r\n\r\n    public get collisionShape(): Circle {\r\n        return {\r\n            center: this._center,\r\n            radius: this.props.collisionRadius,\r\n        };\r\n    }\r\n\r\n    public get center() {\r\n        return this._center;\r\n    }\r\n\r\n    private initializeMove = (rotation: number, modify: (a: Vec2) => Vec2) => {\r\n        this._inMove = true;\r\n        this._rotation = rotation;\r\n        this._anim.reset();\r\n\r\n        this._animPath.clear();\r\n\r\n        this._animPath.addPoint(expand(this._center));\r\n        this._animPath.addPoint(modify(this._center));\r\n\r\n        this.internalUpdate = this.handleTravelStep;\r\n    };\r\n\r\n    private handleAnimationDone = () => {\r\n        this._currentFrame = 'frogger-1';\r\n        this._inMove = false;\r\n        this.internalUpdate = this.handleBeingMoved;\r\n    };\r\n\r\n    private handleTravelStep = (elapsedTime: number) => {\r\n        if (!this._inMove) {\r\n            return;\r\n        }\r\n\r\n        const newPoint = this._animPath.travel(this.speed * elapsedTime);\r\n        this._center.x = newPoint.x;\r\n        this.handleBeingMoved(elapsedTime);\r\n        this._center.y = newPoint.y;\r\n\r\n        this._currentFrame = this._anim.watch(elapsedTime);\r\n    };\r\n\r\n    get idle() {\r\n        return this._currentFrame === 'frogger-idle' && !this._inMove;\r\n    }\r\n\r\n    set speedX(newDeltaX: number) {\r\n        this._speedX = newDeltaX;\r\n    }\r\n\r\n    private handleBeingMoved = (elapsedTime: number) => {\r\n        this._center.x += this._speedX * elapsedTime;\r\n    };\r\n}\r\n","import Dictionary from '../Interfaces/Dictionary';\r\nimport Rectangle from '../Geometry/Rectangle';\r\n\r\nexport default class SpriteSheet {\r\n    private _ready: boolean = false;\r\n    private _image: HTMLImageElement = new Image();\r\n\r\n    constructor(source: string, private bounds: Dictionary<Rectangle>) {\r\n        this._image.onload = () => {\r\n            this._ready = true;\r\n            console.log('loaded image');\r\n        };\r\n\r\n        this._image.src = source;\r\n    }\r\n\r\n    public getBounds(key: string) {\r\n        if (key === undefined) {\r\n            console.error('Passed in key is undefined');\r\n        }\r\n        return this.bounds[key];\r\n    }\r\n\r\n    public get image() {\r\n        return this._image;\r\n    }\r\n\r\n    public get ready() {\r\n        return this._ready;\r\n    }\r\n}\r\n","import Path from './Path';\r\nimport Vec2 from '../../Engine/Math/Vec2';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport Rectangle, { copy } from '../../Engine/Geometry/Rectangle';\r\nimport settings from '../../../settings';\r\nimport Animation from '../../Engine/Animation/Animation';\r\n\r\nexport interface Props {\r\n    readonly speed: number;\r\n    readonly type: 'car' | 'log' | 'tur';\r\n    readonly center: Vec2;\r\n    readonly ss: SpriteSheet;\r\n    readonly goingLeft: boolean;\r\n    readonly asset: string;\r\n}\r\n\r\ninterface AnimProps {\r\n    readonly frames: string[];\r\n    readonly loopTime: number;\r\n}\r\n\r\ninterface State {\r\n    speed: number;\r\n    path: Path;\r\n    center: Vec2;\r\n    bounds: Rectangle;\r\n}\r\n\r\nexport default class PathedObject {\r\n    protected readonly state: State;\r\n    protected anim?: Animation;\r\n    protected curFrame: string;\r\n    protected rotation: number;\r\n    protected _canStand: boolean = false;\r\n\r\n    constructor(protected readonly props: Props, animProps?: AnimProps) {\r\n        this.state = {\r\n            speed: props.speed,\r\n            path: new Path(false, undefined, true),\r\n            center: props.center,\r\n            bounds: copy(this.props.ss.getBounds(this.props.asset)),\r\n        };\r\n\r\n        if (animProps) {\r\n            this.anim = new Animation(\r\n                animProps.frames,\r\n                animProps.loopTime,\r\n                true,\r\n            );\r\n            this.curFrame = animProps.frames[0];\r\n        } else {\r\n            this.curFrame = this.props.asset;\r\n        }\r\n\r\n        this.rotation = props.goingLeft ? Math.PI : 0;\r\n\r\n        const { w } = this.props.ss.getBounds(this.props.asset);\r\n\r\n        const halfWidth = w / 2;\r\n        if (!props.goingLeft) {\r\n            this.state.path.addPoint({ x: -halfWidth, y: props.center.y });\r\n            this.state.path.addPoint({\r\n                x: 1024 + halfWidth,\r\n                y: props.center.y,\r\n            });\r\n        } else {\r\n            this.state.path.addPoint({\r\n                x: 1024 + halfWidth,\r\n                y: props.center.y,\r\n            });\r\n            this.state.path.addPoint({ x: -halfWidth, y: props.center.y });\r\n        }\r\n\r\n        this.state.path.travel(props.center.x);\r\n    }\r\n\r\n    get speed() {\r\n        return this.state.speed;\r\n    }\r\n\r\n    get goingLeft() {\r\n        return this.props.goingLeft;\r\n    }\r\n\r\n    set speed(newSpeed: number) {\r\n        this.state.speed = newSpeed;\r\n    }\r\n\r\n    get type() {\r\n        return this.anim ? 'alligator' : this.props.type;\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        const newPoint = this.state.path.travel(this.state.speed * elapsedTime);\r\n\r\n        this.state.center = newPoint;\r\n        this.state.bounds.x = newPoint.x - this.state.bounds.w / 2;\r\n        this.state.bounds.y = newPoint.y - this.state.bounds.h / 2;\r\n\r\n        if (this.anim) {\r\n            this.curFrame = this.anim.watch(elapsedTime);\r\n            if (/chomp/.test(this.curFrame)) {\r\n                this.rotation = -Math.PI / 2;\r\n                this._canStand = false;\r\n            } else {\r\n                this.rotation = 0;\r\n                this._canStand = true;\r\n            }\r\n        }\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        cr.drawSubTexture(\r\n            this.props.ss,\r\n            this.curFrame,\r\n            this.state.center,\r\n            this.rotation,\r\n            true,\r\n        );\r\n\r\n        // // center\r\n        if (settings.showCollisionShapes) {\r\n            cr.drawCircle(\r\n                this.state.center.x,\r\n                this.state.center.y,\r\n                10,\r\n                '#fff',\r\n                '#f00',\r\n            );\r\n\r\n            // collision box\r\n            cr.drawRectangle(\r\n                this.state.bounds.x,\r\n                this.state.bounds.y,\r\n                this.state.bounds.w,\r\n                this.state.bounds.h,\r\n                0,\r\n                'rgba(00, 104, 255, 0.5)',\r\n            );\r\n        }\r\n    };\r\n\r\n    public testPoint = (a: Vec2) => {\r\n        // const { x, y } = this.state.center;\r\n        // const { w, h } = this.state.bounds;\r\n\r\n        // const collisionBox = new Rectangle(x - w / 2, y - h / 2, 2, h)\r\n\r\n        return this.state.bounds.inBounds(a);\r\n    };\r\n\r\n    get canStandOn() {\r\n        return this._canStand;\r\n    }\r\n}\r\n","import PathedObject, { Props } from './PathedObject';\r\nimport Animation from '../../Engine/Animation/Animation';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport settings from '../../../settings';\r\n\r\nexport default class AnimatedAnimal extends PathedObject {\r\n    private _anim: Animation;\r\n\r\n    constructor(frames: string[], duration: number, props: Props) {\r\n        super(props);\r\n\r\n        this._anim = new Animation(frames, duration, true);\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        const newPoint = this.state.path.travel(this.state.speed * elapsedTime);\r\n\r\n        this.state.center = newPoint;\r\n        this.state.bounds.x = newPoint.x - this.state.bounds.w / 2;\r\n        this.state.bounds.y = newPoint.y - this.state.bounds.h / 2;\r\n\r\n        this._anim.watch(elapsedTime);\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        cr.drawSubTexture(\r\n            this.props.ss,\r\n            this._anim.currentFrame,\r\n            {\r\n                x: this.state.center.x,\r\n                y: this.state.center.y,\r\n            },\r\n            this.props.goingLeft ? Math.PI : 0,\r\n            true,\r\n        );\r\n\r\n        // // center\r\n        if (settings.showCollisionShapes) {\r\n            cr.drawCircle(\r\n                this.state.center.x,\r\n                this.state.center.y,\r\n                10,\r\n                '#fff',\r\n                '#f00',\r\n            );\r\n            // collision box\r\n            cr.drawRectangle(\r\n                this.state.bounds.x,\r\n                this.state.bounds.y,\r\n                this.state.bounds.w,\r\n                this.state.bounds.h,\r\n                0,\r\n                'rgba(00, 104, 255, 0.5)',\r\n            );\r\n        }\r\n    };\r\n\r\n    get canStandOn() {\r\n        // add case for turtle and aligator\r\n        return !/\\w+-dive-4/.test(this._anim.currentFrame);\r\n    }\r\n}\r\n","import PathedObject from '../Objects/PathedObject';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport AnimatedAnimal from '../Objects/AnimatedAnimal';\r\nimport GameSettings from '../../Engine/Settings/GameSettings';\r\n\r\nexport default class PathedObjectSystem {\r\n    private _objs: PathedObject[] = [];\r\n\r\n    private readonly rows: {\r\n        num: number;\r\n        speed: number;\r\n        type: 'log' | 'tur' | 'car';\r\n        asset: string;\r\n    }[] = [\r\n        { num: 0, speed: 0, type: 'car', asset: '' },\r\n        { num: 3, speed: 80 / 1000, type: 'log', asset: 'med-log' },\r\n        { num: 3, speed: 70 / 1000, type: 'tur', asset: 'turtle-1' },\r\n        { num: 2, speed: 80 / 1000, type: 'log', asset: 'big-log' },\r\n        { num: 3, speed: 50 / 1000, type: 'log', asset: 'sml-log' },\r\n        { num: 3, speed: 80 / 1000, type: 'tur', asset: 'turtle-1' },\r\n        { num: 0, speed: 0, type: 'car', asset: '' },\r\n        { num: 1, speed: 100 / 1000, type: 'car', asset: 'semi-truck' },\r\n        { num: 3, speed: 130 / 1000, type: 'car', asset: 'blue-car' },\r\n        { num: 2, speed: 130 / 1000, type: 'car', asset: 'fire-truck' },\r\n        { num: 3, speed: 120 / 1000, type: 'car', asset: 'green-car' },\r\n        { num: 3, speed: 100 / 1000, type: 'car', asset: 'yellow-car' },\r\n        { num: 0, speed: 0, type: 'car', asset: '' },\r\n    ];\r\n\r\n    get objects() {\r\n        return this._objs;\r\n    }\r\n\r\n    public initializeObjects = (\r\n        numCols: number,\r\n        height: number,\r\n        ss: SpriteSheet,\r\n    ) => {\r\n        this._objs.length = 0;\r\n\r\n        for (let row = 0; row < this.rows.length; row++) {\r\n            const newY = height * row;\r\n\r\n            const newX = GameSettings.width / this.rows[row].num;\r\n\r\n            if (this.rows[row].type === 'tur') {\r\n                const turtleFrames = [1, 2, 3, 4, 5, 6, 7].map(\r\n                    x => `turtle-${x}`,\r\n                );\r\n\r\n                const divingFrames = [1, 2, 3, 4, 3, 2, 1].map(\r\n                    x => `turtle-dive-${x}`,\r\n                );\r\n                // create 3 turtles\r\n                for (let i = 0; i < this.rows[row].num; i++) {\r\n                    const curFrames =\r\n                        i === 0\r\n                            ? [...turtleFrames, ...divingFrames]\r\n                            : [...turtleFrames];\r\n                    const { w } = ss.getBounds(this.rows[row].asset);\r\n                    const numAnimals = row === 2 ? 2 : 3;\r\n                    for (let j = 1; j <= numAnimals; j++) {\r\n                        this._objs.push(\r\n                            new AnimatedAnimal(\r\n                                curFrames,\r\n                                i === 0 ? 6000 : 2000,\r\n                                {\r\n                                    speed: this.rows[row].speed,\r\n                                    type: this.rows[row].type,\r\n                                    center: {\r\n                                        x: newX * i + w * j,\r\n                                        y: newY + height / 2,\r\n                                    },\r\n                                    ss,\r\n                                    goingLeft: row % 2 === 0,\r\n                                    asset: this.rows[row].asset,\r\n                                },\r\n                            ),\r\n                        );\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < this.rows[row].num; i++) {\r\n                    if (i === 0 && row === 1) {\r\n                        this._objs.push(\r\n                            new PathedObject(\r\n                                {\r\n                                    speed: this.rows[row].speed,\r\n                                    type: this.rows[row].type,\r\n                                    center: {\r\n                                        x: newX + newX * i,\r\n                                        y: newY + height / 2,\r\n                                    },\r\n                                    ss,\r\n                                    goingLeft: row % 2 === 0,\r\n                                    asset: this.rows[row].asset,\r\n                                },\r\n                                {\r\n                                    frames: ['aligator-idle', 'aligator-chomp'],\r\n                                    loopTime: 4000,\r\n                                },\r\n                            ),\r\n                        );\r\n                        continue;\r\n                    }\r\n                    this._objs.push(\r\n                        new PathedObject({\r\n                            speed: this.rows[row].speed,\r\n                            type: this.rows[row].type,\r\n                            center: {\r\n                                x: newX + newX * i,\r\n                                y: newY + height / 2,\r\n                            },\r\n                            ss,\r\n                            goingLeft: row % 2 === 0,\r\n                            asset: this.rows[row].asset,\r\n                        }),\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3 cars\r\n\r\n        // 3 cars\r\n\r\n        // 3 cars\r\n\r\n        // 1 car\r\n\r\n        // 2 cars\r\n    };\r\n\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = 0; i < this._objs.length; i++) {\r\n            this._objs[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public render = (cr: CanvasRenderer) => {\r\n        for (let i = 0; i < this._objs.length; i++) {\r\n            this._objs[i].render(cr);\r\n        }\r\n    };\r\n}\r\n","import Rectangle from '../../Engine/Geometry/Rectangle';\r\nimport Vec2 from '../../Engine/Math/Vec2';\r\nimport Path from './Path';\r\n\r\nexport default class HomePad {\r\n    private readonly _bounds: Rectangle;\r\n    public hasFrog: boolean = false;\r\n    public hasFly: boolean = false;\r\n    public hasAligator: boolean = false;\r\n    public path: Path;\r\n    public speed: number = 0;\r\n    private _curPos: Vec2;\r\n\r\n    private readonly timeSpan: number = 3000;\r\n    private elapsedTime: number = 0;\r\n\r\n    constructor(x: number, y: number, w: number, h: number) {\r\n        this._bounds = new Rectangle(x - w / 2, y - h / 2, w, h);\r\n    }\r\n\r\n    public inBounds(a: Vec2) {\r\n        return this._bounds.inBounds(a);\r\n    }\r\n\r\n    get bounds() {\r\n        return this._bounds;\r\n    }\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        // if has fly, keep it there for 2 seconds\r\n        if (this.hasFly) {\r\n            this.elapsedTime += elapsedTime;\r\n\r\n            if (this.elapsedTime >= this.timeSpan) {\r\n                this.elapsedTime = 0;\r\n                this.hasFly = false;\r\n            }\r\n        }\r\n\r\n        // if there is a aligator, update it\r\n        if (this.hasAligator) {\r\n            this._curPos = this.path.travel(this.speed * elapsedTime);\r\n        }\r\n    };\r\n\r\n    public readonly putFly = () => {\r\n        console.log('FLY');\r\n        this.hasFly = true;\r\n        this.elapsedTime = 0;\r\n    };\r\n\r\n    public readonly putAligator = () => {\r\n        console.log('ALIGATOR');\r\n        this.hasAligator = true;\r\n        this.elapsedTime = 0;\r\n        this.path = new Path(false, () => {\r\n            this.hasAligator = false;\r\n        });\r\n        const y = this._bounds.y + 30;\r\n        this.path.addPoint({ x: this._bounds.x - 10, y });\r\n        this.path.addPoint({\r\n            x: this._bounds.x + this._bounds.w / 2 - 10,\r\n            y,\r\n        });\r\n        this.path.addPoint({ x: this._bounds.x - 10, y });\r\n        this.speed = this.path.length / this.timeSpan;\r\n    };\r\n\r\n    get aligatorPos() {\r\n        return this._curPos;\r\n    }\r\n}\r\n","import HomePad from '../Objects/HomePad';\r\nimport { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport settings from '../../../settings';\r\nimport { copy } from '../../Engine/Geometry/Rectangle';\r\n\r\nconst HomePadRenderer = (homePad: HomePad) => (\r\n    cr: CanvasRenderer,\r\n    ss: SpriteSheet,\r\n) => {\r\n    const { x, y, w, h } = homePad.bounds;\r\n\r\n    cr.drawSubTexture(ss, 'pad-tile', { x, y }, 0);\r\n\r\n    if (homePad.hasFrog) {\r\n        cr.drawSubTexture(ss, 'frogger-idle', { x: x + 13, y }, 0);\r\n    }\r\n\r\n    if (homePad.hasFly) {\r\n        cr.drawSubTexture(ss, 'fly', { x: x + 20, y: y + 20 }, 0);\r\n    }\r\n\r\n    if (homePad.hasAligator) {\r\n        const newBounds = copy(homePad.bounds);\r\n        newBounds.x += 15;\r\n        cr.drawSubTexture(ss, 'aligator-head', homePad.aligatorPos, 0);\r\n        // cr.drawSubTextureInClip(\r\n        //     ss,\r\n        //     'aligator-head',\r\n        //     homePad.aligatorPos,\r\n        //     true,\r\n        //     newBounds,\r\n        // );\r\n    }\r\n\r\n    // debug shapd\r\n    if (settings.showCollisionShapes) {\r\n        cr.drawRectangle(x, y, w, h, 0, 'rgba(0, 170, 255, 0.5');\r\n    }\r\n};\r\n\r\nexport default HomePadRenderer;\r\n","// This is used to give a small performance optimization\r\n\r\nimport Vec2 from './Vec2';\r\n\r\n// in generating gaussian random numbers.\r\nlet usePrevious: boolean = false;\r\nlet y2: number = 0;\r\n\r\nexport namespace random {\r\n    export function nextGaussian(mean: number, stdDev: number) {\r\n        let x1 = 0;\r\n        let x2 = 0;\r\n        let y1 = 0;\r\n        let z = 0;\r\n\r\n        if (usePrevious) {\r\n            usePrevious = false;\r\n            return mean + y2 * stdDev;\r\n        }\r\n\r\n        usePrevious = true;\r\n\r\n        do {\r\n            x1 = 2 * Math.random() - 1;\r\n            x2 = 2 * Math.random() - 1;\r\n            z = x1 * x1 + x2 * x2;\r\n        } while (z >= 1);\r\n\r\n        z = Math.sqrt((-2 * Math.log(z)) / z);\r\n        y1 = x1 * z;\r\n        y2 = x2 * z;\r\n\r\n        return mean + y1 * stdDev;\r\n    }\r\n\r\n    export function nextRange(min: number, max: number) {\r\n        let range = max - min;\r\n        return Math.floor(Math.random() * range + min);\r\n    }\r\n\r\n    export function nextCircleVector(): Vec2 {\r\n        let angle = Math.random() * 2 * Math.PI;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    export function nextAngleVector(maxAngle: number = 2 * Math.PI): Vec2 {\r\n        let angle = Math.random() * maxAngle;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    export function nextAngleInCone(\r\n        centerAngle: number,\r\n        angleOfCone: number = Math.PI / 2,\r\n    ): Vec2 {\r\n        const generatingMean = angleOfCone / 2;\r\n        const particleAngle =\r\n            nextGaussian(generatingMean, angleOfCone / 4) + angleOfCone;\r\n        const angle = centerAngle - generatingMean + particleAngle;\r\n        return {\r\n            x: Math.cos(angle),\r\n            y: Math.sin(angle),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns true or false, 50% chance\r\n     * @returns {boolean} True or false\r\n     */\r\n    export function coinFlip(): boolean {\r\n        return Math.random() >= 0.5;\r\n    }\r\n}\r\n","import { CanvasRenderer } from '../../Engine/Renderers/CanvasRenderer';\r\nimport SpriteSheet from '../../Engine/Graphics/SpriteSheet';\r\nimport HomePad from '../Objects/HomePad';\r\nimport HomePadRenderer from '../Renderers/HomePadRenderer';\r\nimport { random } from '../../Engine/Math/random';\r\nimport GameSettings from '../../Engine/Settings/GameSettings';\r\n\r\nexport default class HomePadSystem {\r\n    private homePads: HomePad[] = [];\r\n    private renderers: ((cr: CanvasRenderer, ss: SpriteSheet) => void)[] = [];\r\n\r\n    private readonly timeSpacing: number = 13000;\r\n    /**\r\n     * Time in between special events like putting a fly or aligator.\r\n     */\r\n    private timeSinceLastSpecial: number = 0;\r\n\r\n    constructor(\r\n        private ss: SpriteSheet,\r\n        private tileWidth: number,\r\n        private tileHeight: number,\r\n    ) {\r\n        this.homePads.length = 0;\r\n        this.renderers.length = 0;\r\n\r\n        const numPads = 5;\r\n        const padding = 100;\r\n        const padSpacing = (GameSettings.width - padding * 2) / (numPads - 1);\r\n\r\n        for (let i = 0; i < numPads; i++) {\r\n            const x = padding + i * padSpacing;\r\n            const pad = new HomePad(\r\n                x,\r\n                this.tileHeight / 2,\r\n                this.tileWidth,\r\n                this.tileHeight,\r\n            );\r\n\r\n            this.homePads.push(pad);\r\n            this.renderers.push(HomePadRenderer(pad));\r\n        }\r\n    }\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        this.timeSinceLastSpecial += elapsedTime;\r\n\r\n        if (this.timeSinceLastSpecial >= this.timeSpacing) {\r\n            this.timeSinceLastSpecial -= this.timeSpacing;\r\n\r\n            const available = this.homePads.filter(x => !x.hasFrog);\r\n\r\n            if (available.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const chosenIndex = random.nextRange(0, available.length);\r\n\r\n            if (random.coinFlip()) {\r\n                // fly\r\n                available[chosenIndex].putFly();\r\n            } else {\r\n                // aligator\r\n                available[chosenIndex].putAligator();\r\n            }\r\n            // this.homePads[available.length - 1].putAligator();\r\n        }\r\n\r\n        for (let i = 0; i < this.homePads.length; i++) {\r\n            this.homePads[i].update(elapsedTime);\r\n        }\r\n    };\r\n\r\n    public readonly render = (cr: CanvasRenderer) => {\r\n        for (let i = 0; i < this.renderers.length; i++) {\r\n            this.renderers[i](cr, this.ss);\r\n        }\r\n    };\r\n\r\n    get pads() {\r\n        return this.homePads;\r\n    }\r\n}\r\n","import Particle from '../Graphics/Particle';\r\n\r\nexport default abstract class BaseParticleSystem {\r\n    protected _particles: Particle[] = [];\r\n\r\n    abstract update: (elapsedTime: number) => void;\r\n\r\n    protected removeDeadParticles = (elapsedTime: number) => {\r\n        for (let i = this._particles.length - 1; i >= 0; i--) {\r\n            this._particles[i].update(elapsedTime);\r\n\r\n            if (!this._particles[i].alive) {\r\n                this._particles.splice(i, 1);\r\n                continue;\r\n            }\r\n        }\r\n    };\r\n\r\n    get particles(): Particle[] {\r\n        return this._particles;\r\n    }\r\n\r\n    public clear() {\r\n        this._particles.length = 0;\r\n    }\r\n}\r\n","import Vec2 from '../Math/Vec2';\r\nimport Color, { createColorTransition, Colors } from './Color';\r\n\r\nexport interface Props {\r\n    /**\r\n     * Lifespan in ms of the particle\r\n     */\r\n    readonly lifetime: number;\r\n    center: Vec2;\r\n    /**\r\n     * Initial angle for the particle to spin\r\n     */\r\n    rotation: number;\r\n    readonly speed: number;\r\n    readonly direction: Vec2;\r\n    /**\r\n     * Width and height of the particle\r\n     */\r\n    readonly size: Vec2;\r\n    /**\r\n     * Initial particle color\r\n     */\r\n    readonly fromColor: Color;\r\n    // /**\r\n    //  * Color to transition to throught the particles lifetime\r\n    //  */\r\n    // readonly toColor: Color;\r\n    // readonly fadeTransition: number;\r\n}\r\n\r\nexport default class Particle {\r\n    /**\r\n     * Elapsed time since particle creation\r\n     */\r\n    protected elapsedTime: number = 0;\r\n    private color: Color;\r\n    private colorTransition: Color;\r\n    private fading: boolean = false;\r\n\r\n    constructor(protected props: Props) {\r\n        this.color = props.fromColor;\r\n        // this.colorTransition = createColorTransition(\r\n        //     props.fromColor,\r\n        //     props.toColor,\r\n        //     props.lifetime,\r\n        // );\r\n    }\r\n    get alive() {\r\n        return this.elapsedTime <= this.props.lifetime;\r\n    }\r\n\r\n    get center() {\r\n        return this.props.center;\r\n    }\r\n\r\n    get rotation() {\r\n        return this.props.rotation;\r\n    }\r\n\r\n    get fill() {\r\n        return `rgb(${this.color.r},${this.color.g},${this.color.b})`;\r\n    }\r\n\r\n    get size() {\r\n        return this.props.size;\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        const { speed, direction } = this.props;\r\n        this.center.x += speed * direction.x * elapsedTime;\r\n        this.center.y += speed * direction.y * elapsedTime;\r\n        this.elapsedTime += elapsedTime;\r\n\r\n        // this.updateColor(elapsedTime);\r\n\r\n        // this.props.rotation += speed * 0.5;\r\n    };\r\n\r\n    // private updateColor = (elapsedTime: number) => {\r\n    //     if (\r\n    //         !this.fading &&\r\n    //         this.elapsedTime >= this.props.lifetime - this.props.fadeTransition\r\n    //     ) {\r\n    //         this.fading = true;\r\n    //         this.colorTransition = createColorTransition(\r\n    //             this.color,\r\n    //             { r: this.color.r, g: this.color.g, b: this.color.b, a: 0 },\r\n    //             this.props.fadeTransition,\r\n    //         );\r\n    //     }\r\n\r\n    //     this.color.r -= this.colorTransition.r * elapsedTime;\r\n    //     this.color.g -= this.colorTransition.g * elapsedTime;\r\n    //     this.color.b -= this.colorTransition.b * elapsedTime;\r\n    //     this.color.a -= this.colorTransition.a * elapsedTime;\r\n    // };\r\n}\r\n","import Particle, { Props } from '../../Engine/Graphics/Particle';\r\nimport Path from './Path';\r\n\r\nexport default class PathedParticle extends Particle {\r\n    private pathSpeed: number = 0;\r\n\r\n    constructor(private path: Path, baseProps: Props) {\r\n        super(baseProps);\r\n        // need to go distance of path in props.lifetime\r\n        this.pathSpeed = path.length / baseProps.lifetime;\r\n    }\r\n\r\n    public update = (elapsedTime: number) => {\r\n        this.elapsedTime += elapsedTime;\r\n\r\n        const newPos = this.path.travel(this.pathSpeed * elapsedTime);\r\n        // // console.log(newPos);\r\n\r\n        // // const { speed, direction } = this.props;\r\n        this.center.x = newPos.x + this.pathSpeed * elapsedTime;\r\n        this.center.y = newPos.y + this.pathSpeed * elapsedTime;\r\n\r\n        // const { speed, direction } = this.props;\r\n        // this.center.x += speed * direction.x * elapsedTime;\r\n        // this.center.y += speed * direction.y * elapsedTime;\r\n    };\r\n}\r\n","import BaseParticleSystem from '../../Engine/Systems/BaseParticleSystem';\r\nimport Vec2, { expand } from '../../Engine/Math/Vec2';\r\nimport Distribution from '../../Engine/Math/distribution';\r\nimport Color from '../../Engine/Graphics/Color';\r\nimport { random } from '../../Engine/Math/random';\r\nimport Particle from '../../Engine/Graphics/Particle';\r\nimport PathedParticle from '../Objects/PathedParticle';\r\nimport Path from '../Objects/Path';\r\nimport Rectangle from '../../Engine/Geometry/Rectangle';\r\n\r\nexport interface RandomParams {\r\n    size: Distribution;\r\n    speed: Distribution;\r\n    lifetime: Distribution;\r\n    fromColor: Color;\r\n    // toColor: Color;\r\n}\r\n\r\nexport default class ParticleSystem extends BaseParticleSystem {\r\n    public update = (elapsedTime: number) => {\r\n        for (let i = this._particles.length - 1; i >= 0; i--) {\r\n            this._particles[i].update(elapsedTime);\r\n\r\n            if (!this._particles[i].alive) {\r\n                this._particles.splice(i, 1);\r\n                continue;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generates new particles in a cone\r\n     * @param center Center to generate particles\r\n     * @param direction Center in degrees\r\n     */\r\n    public carCrash(center: Vec2, direction: number, props: RandomParams) {\r\n        // add flying chunks\r\n        for (let particle = 0; particle < 50; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const path = new Path();\r\n\r\n            path.addPoint(expand(center));\r\n\r\n            const vec2Dir = random.nextAngleInCone(direction);\r\n            path.addPoint({\r\n                x: center.x + vec2Dir.x * 100,\r\n                y: center.y + vec2Dir.y * 100,\r\n            });\r\n\r\n            const p = new PathedParticle(path, {\r\n                center: { x: center.x, y: center.y },\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: vec2Dir,\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: {\r\n                    r: props.fromColor.r,\r\n                    g: props.fromColor.g,\r\n                    b: props.fromColor.b,\r\n                    a: props.fromColor.a,\r\n                },\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n\r\n        // add some stationary chunks\r\n\r\n        // add some chunks to the car\r\n    }\r\n\r\n    public showerSparks(padBounds: Rectangle, props: RandomParams) {\r\n        const startingY = padBounds.y + 18;\r\n        const startingX = padBounds.x + 11;\r\n        const innerWidth = 54;\r\n        // left & right wall\r\n        [startingX, startingX + innerWidth].map(x => {\r\n            for (let y = startingY; y < padBounds.h; y += 1) {\r\n                const center = { x, y };\r\n                for (let particle = 0; particle < 5; particle++) {\r\n                    const size = Math.abs(\r\n                        random.nextGaussian(props.size.mean, props.size.stdev),\r\n                    );\r\n\r\n                    const speed = Math.abs(\r\n                        random.nextGaussian(\r\n                            props.speed.mean,\r\n                            props.speed.stdev,\r\n                        ),\r\n                    );\r\n\r\n                    const color = random.coinFlip()\r\n                        ? {\r\n                              r: props.fromColor.r,\r\n                              g: props.fromColor.g,\r\n                              b: props.fromColor.b,\r\n                              a: props.fromColor.a,\r\n                          }\r\n                        : {\r\n                              r: 239,\r\n                              g: 242,\r\n                              b: 191,\r\n                              a: props.fromColor.a,\r\n                          };\r\n\r\n                    const p = new Particle({\r\n                        center: center,\r\n                        size: { x: size, y: size },\r\n                        rotation: 0,\r\n                        speed,\r\n                        direction: random.nextAngleInCone(Math.PI),\r\n                        lifetime: random.nextGaussian(\r\n                            props.lifetime.mean,\r\n                            props.lifetime.stdev,\r\n                        ),\r\n                        fromColor: color,\r\n                    });\r\n                    this._particles.push(p);\r\n                }\r\n            }\r\n        });\r\n\r\n        // top & bottom\r\n        [startingY].map(y => {\r\n            for (let x = startingX; x < innerWidth + startingX; x += 1) {\r\n                const center = { x, y };\r\n                for (let particle = 0; particle < 5; particle++) {\r\n                    const size = Math.abs(\r\n                        random.nextGaussian(props.size.mean, props.size.stdev),\r\n                    );\r\n\r\n                    const speed = Math.abs(\r\n                        random.nextGaussian(\r\n                            props.speed.mean,\r\n                            props.speed.stdev,\r\n                        ),\r\n                    );\r\n\r\n                    const color = random.coinFlip()\r\n                        ? {\r\n                              r: props.fromColor.r,\r\n                              g: props.fromColor.g,\r\n                              b: props.fromColor.b,\r\n                              a: props.fromColor.a,\r\n                          }\r\n                        : {\r\n                              r: 239,\r\n                              g: 242,\r\n                              b: 191,\r\n                              a: props.fromColor.a,\r\n                          };\r\n\r\n                    const p = new Particle({\r\n                        center: center,\r\n                        size: { x: size, y: size },\r\n                        rotation: 0,\r\n                        speed,\r\n                        direction: random.nextAngleInCone(Math.PI),\r\n                        lifetime: random.nextGaussian(\r\n                            props.lifetime.mean,\r\n                            props.lifetime.stdev,\r\n                        ),\r\n                        fromColor: color,\r\n                    });\r\n                    this._particles.push(p);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public froggerBlood(deathCenter: Vec2, props: RandomParams) {\r\n        console.log('hello');\r\n        for (let particle = 0; particle < 500; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const color = random.coinFlip()\r\n                ? {\r\n                      r: props.fromColor.r,\r\n                      g: props.fromColor.g,\r\n                      b: props.fromColor.b,\r\n                      a: props.fromColor.a,\r\n                  }\r\n                : { r: 51, g: 204, b: 51, a: 1 };\r\n\r\n            const p = new Particle({\r\n                center: expand(deathCenter),\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: random.nextCircleVector(),\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: color,\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n    }\r\n\r\n    public splash(center: Vec2, props: RandomParams) {\r\n        for (let particle = 0; particle < 1000; particle++) {\r\n            const size = Math.abs(\r\n                random.nextGaussian(props.size.mean, props.size.stdev),\r\n            );\r\n\r\n            const speed = Math.abs(\r\n                random.nextGaussian(props.speed.mean, props.speed.stdev),\r\n            );\r\n\r\n            const p = new Particle({\r\n                center: expand(center),\r\n                size: { x: size, y: size },\r\n                rotation: 0,\r\n                speed,\r\n                direction: random.nextCircleVector(),\r\n                lifetime: random.nextGaussian(\r\n                    props.lifetime.mean,\r\n                    props.lifetime.stdev,\r\n                ),\r\n                fromColor: props.fromColor,\r\n            });\r\n            this._particles.push(p);\r\n        }\r\n    }\r\n}\r\n","import BaseParticleSystem from '../Systems/BaseParticleSystem';\r\nimport { CanvasRenderer } from './CanvasRenderer';\r\n\r\nconst ParticleSystemRenderer = (particleSystem: BaseParticleSystem) => (\r\n    cr: CanvasRenderer,\r\n) => {\r\n    const { particles } = particleSystem;\r\n\r\n    for (let i = particles.length - 1; i >= 0; i--) {\r\n        const { center, rotation, size, fill } = particles[i];\r\n        cr.drawRectangle(\r\n            center.x,\r\n            center.y,\r\n            size.x,\r\n            size.y,\r\n            rotation,\r\n            fill,\r\n            '#ff3300',\r\n        );\r\n    }\r\n};\r\n\r\nexport default ParticleSystemRenderer;\r\n","export default class ScoringSystem {\r\n    private _visitedArray: boolean[] = [];\r\n\r\n    private _currentRow: number = 0;\r\n\r\n    private _score: number = 0;\r\n\r\n    constructor(private numRows: number = 13) {\r\n        this.resetForNewFrog();\r\n    }\r\n\r\n    public gotFly() {\r\n        this._score += 200;\r\n    }\r\n\r\n    public landOnPad() {\r\n        this._score += 50;\r\n    }\r\n\r\n    public beatLevel() {\r\n        this._score += 1000;\r\n    }\r\n\r\n    public moveUp() {\r\n        this._currentRow++;\r\n\r\n        if (!this._visitedArray[this._currentRow]) {\r\n            this._visitedArray[this._currentRow] = true;\r\n            this._score += 10;\r\n        }\r\n    }\r\n\r\n    public moveDown() {\r\n        this._currentRow--;\r\n    }\r\n\r\n    public resetForNewFrog() {\r\n        for (let i = 0; i < this.numRows; i++) {\r\n            this._visitedArray[i] = false;\r\n        }\r\n        this._currentRow = 0;\r\n    }\r\n\r\n    /**\r\n     * Scores left over time\r\n     * @param time Time in ms\r\n     */\r\n    public accountForTime(time: number) {\r\n        const scoreTime = Math.round(time / 100);\r\n        this._score += scoreTime;\r\n    }\r\n\r\n    get score() {\r\n        return this._score;\r\n    }\r\n\r\n    public resetScore() {\r\n        this._score = 0;\r\n    }\r\n}\r\n","import Dictionary from '../Interfaces/Dictionary';\r\n\r\ntype Command = (time: number) => void;\r\n\r\nexport default class Keyboard {\r\n    private inputBuffer: Dictionary<string> = {};\r\n    private handlers: Dictionary<Command[]> = {};\r\n\r\n    constructor(private clearBuffer: boolean = false) {\r\n        window.addEventListener('keydown', this.addToInputBuffer);\r\n        window.addEventListener('keyup', this.removeKey);\r\n    }\r\n\r\n    public destroy(): void {\r\n        window.removeEventListener('keydown', this.addToInputBuffer);\r\n        window.removeEventListener('keyup', this.removeKey);\r\n\r\n        this.inputBuffer = {};\r\n        this.handlers = {};\r\n    }\r\n\r\n    /**\r\n     * Process elapsed time and pass it into any commands that depends on time\r\n     * @param elapsedTime Time elapsed since the last update\r\n     */\r\n    public process(elapsedTime: number): void {\r\n        for (const key in this.inputBuffer) {\r\n            if (this.inputBuffer.hasOwnProperty(key)) {\r\n                for (\r\n                    let i = 0;\r\n                    this.handlers[key] && i < this.handlers[key].length;\r\n                    i++\r\n                ) {\r\n                    this.handlers[key][i](elapsedTime);\r\n                }\r\n            }\r\n        }\r\n        if (this.clearBuffer) {\r\n            this.inputBuffer = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Assigns a handler to fire when a key is pressed\r\n     * @param key The key to register\r\n     * @param handler Command to execute when key is pressed\r\n     */\r\n    public register = (key: string, handler: Command) => {\r\n        if (!this.handlers[key]) {\r\n            this.handlers[key] = [];\r\n        }\r\n        this.handlers[key].push(handler);\r\n    };\r\n\r\n    /**\r\n     * Assigns multiple keys to the same handler.\r\n     * @param keys Array of keys to assign the handler to\r\n     * @param handler A command to call when the passed in key is pressed\r\n     */\r\n    public registerMultiple(keys: string[], handler: Command) {\r\n        for (let i = 0; i < keys.length; i++) {\r\n            this.register(keys[i], handler);\r\n        }\r\n    }\r\n\r\n    private addToInputBuffer = (event: KeyboardEvent) => {\r\n        this.inputBuffer[event.key] = event.key;\r\n    };\r\n\r\n    private removeKey = (event: KeyboardEvent) => {\r\n        delete this.inputBuffer[event.key];\r\n    };\r\n\r\n    // TODO: Add remove with handler\r\n}\r\n","// https://stackoverflow.com/a/24597663\r\nexport function genCharArray(charA: string, charZ: string) {\r\n    var a = [],\r\n        i = charA.charCodeAt(0),\r\n        j = charZ.charCodeAt(0);\r\n    for (; i <= j; ++i) {\r\n        a.push(String.fromCharCode(i));\r\n    }\r\n    return a;\r\n}\r\n","import { CanvasRenderer } from '../Engine/Renderers/CanvasRenderer';\r\nimport EventSystem from '../Engine/Systems/EventSystem';\r\nimport { AudioSystem } from '../Engine/Systems/AudioSystem';\r\nimport HighScoreManager from '../Engine/Managers/HighScoreManager';\r\nimport Player from './Objects/Player';\r\nimport SpriteSheet from '../Engine/Graphics/SpriteSheet';\r\nimport Rectangle from '../Engine/Geometry/Rectangle';\r\nimport PathedObjectSystem from './Systems/PathedObjectSystem';\r\nimport PathedObject from './Objects/PathedObject';\r\nimport HomePadSystem from './Systems/HomePadSystem';\r\nimport ParticleSystem from './Systems/ParticleSystem';\r\nimport ParticleSystemRenderer from '../Engine/Renderers/ParticleSystemRenderer';\r\nimport HomePad from './Objects/HomePad';\r\nimport ScoringManager from './Systems/ScoringSystem';\r\nimport Button from './UI/Button';\r\nimport { GameMouseEvent } from '../Engine/Input/Mouse';\r\nimport ButtonRenderer from './Renderers/ButtonRenderer';\r\nimport GameSettings from '../Engine/Settings/GameSettings';\r\nimport Keyboard from '../Engine/Input/Keyboard';\r\nimport { genCharArray } from './Helpers/character';\r\n\r\ntype TimeFunc = (elapsedTime: number) => void;\r\ntype RenderFunc = (cr: CanvasRenderer) => void;\r\n\r\nexport default class GameModel {\r\n    private scoreManager: ScoringManager = new ScoringManager();\r\n    /**\r\n     * The player has 30 seconds to guide the frog to its home.\r\n     *\r\n     * This resets on every death or reset.\r\n     */\r\n    private time: number = 30000;\r\n\r\n    private lives: number = 7;\r\n\r\n    private readonly rowImages: string[] = [\r\n        'bush-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'water-tile',\r\n        'grass-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'street-tile',\r\n        'grass-tile',\r\n    ];\r\n\r\n    private readonly requiredOnHomePads = 5;\r\n    private currentOnHomePad = 0;\r\n    private countDownTime: boolean = false;\r\n\r\n    private readonly numRows: number = this.rowImages.length;\r\n    private readonly tileHeight = GameSettings.width / this.numRows;\r\n    private readonly tileWidth = GameSettings.width / this.numRows;\r\n\r\n    private internalUpdate: TimeFunc;\r\n    private internalRender: RenderFunc;\r\n    private internalMoveLeft: () => void;\r\n    private internalMoveRight: () => void;\r\n    private internalMoveUp: () => void;\r\n    private internalMoveDown: () => void;\r\n    private internalPlayerRender: (cr: CanvasRenderer) => void;\r\n    private internalDetectCollisions: () => void;\r\n    private internalMouseClick: (ev: GameMouseEvent) => void = () => {};\r\n\r\n    private readonly eventSystem: EventSystem = new EventSystem();\r\n    private audioSystem: AudioSystem = new AudioSystem();\r\n    private pathedObjectSystem: PathedObjectSystem = new PathedObjectSystem();\r\n    private homePadSystem: HomePadSystem;\r\n    private particleSystem: ParticleSystem = new ParticleSystem();\r\n    private particleSystemRenderer: (cr: CanvasRenderer) => void;\r\n\r\n    private crashParticleParams = {\r\n        size: { mean: 5, stdev: 2 },\r\n        speed: { mean: 20 / 1000, stdev: 9 / 1000 },\r\n        lifetime: { mean: 2000, stdev: 500 },\r\n        fromColor: { r: 51, g: 204, b: 51, a: 1 },\r\n    };\r\n\r\n    private sparkParams = {\r\n        size: { mean: 2, stdev: 0 },\r\n        speed: { mean: 4 / 1000, stdev: 1 / 1000 },\r\n        lifetime: { mean: 2000, stdev: 200 },\r\n        fromColor: { r: 235, g: 247, b: 4, a: 1 },\r\n    };\r\n\r\n    private aligatorDeathParams = {\r\n        size: { mean: 2, stdev: 1 },\r\n        speed: { mean: 25 / 1000, stdev: 25 / 1000 },\r\n        lifetime: { mean: 250, stdev: 200 },\r\n        fromColor: { r: 234, g: 25, b: 25, a: 1 },\r\n    };\r\n\r\n    private splashParams = {\r\n        size: { mean: 1, stdev: 1 },\r\n        speed: { mean: 20 / 1000, stdev: 20 / 1000 },\r\n        lifetime: { mean: 250, stdev: 200 },\r\n        fromColor: { r: 0, g: 153, b: 115, a: 1 },\r\n    };\r\n\r\n    private explosionParams = {\r\n        size: { mean: 1, stdev: 1 },\r\n        speed: { mean: 20 / 1000, stdev: 20 / 1000 },\r\n        lifetime: { mean: 250, stdev: 200 },\r\n        fromColor: { r: 51, g: 204, b: 51, a: 1 },\r\n    };\r\n\r\n    private _spriteSheet = new SpriteSheet(\r\n        'graphics/frogger-game-sprites.png',\r\n        {\r\n            // Frogger\r\n            'frogger-idle': new Rectangle(0, 2, 51, 73),\r\n            'frogger-1': new Rectangle(54, 2, 57, 73),\r\n            'frogger-2': new Rectangle(114, 2, 56, 73),\r\n            'frogger-3': new Rectangle(173, 2, 53, 73),\r\n            'frogger-4': new Rectangle(230, 2, 54, 73),\r\n            // Tiles\r\n            'grass-tile': new Rectangle(135, 158, 82, 82),\r\n            'water-tile': new Rectangle(226, 158, 82, 82),\r\n            'street-tile': new Rectangle(316, 158, 82, 82),\r\n            'bush-tile': new Rectangle(407, 158, 82, 82),\r\n            'pad-tile': new Rectangle(497, 158, 82, 82),\r\n            // Cars\r\n            'yellow-car': new Rectangle(305, 482, 134, 71),\r\n            'green-car': new Rectangle(155, 483, 135, 71),\r\n            'blue-car': new Rectangle(12, 483, 127, 69),\r\n            'fire-truck': new Rectangle(9, 407, 178, 66),\r\n            'semi-truck': new Rectangle(203, 406, 285, 66),\r\n            // Logs\r\n            'big-log': new Rectangle(13, 258, 353, 59),\r\n            'med-log': new Rectangle(14, 328, 273, 59),\r\n            'sml-log': new Rectangle(387, 258, 185, 59),\r\n            // Other\r\n            fly: new Rectangle(84, 171, 43, 48),\r\n            // Turtle\r\n            'turtle-1': new Rectangle(403, 11, 71, 57),\r\n            'turtle-2': new Rectangle(480, 9, 70, 61),\r\n            'turtle-3': new Rectangle(7, 83, 71, 67),\r\n            'turtle-4': new Rectangle(80, 82, 71, 68),\r\n            'turtle-5': new Rectangle(154, 84, 70, 66),\r\n            'turtle-6': new Rectangle(229, 89, 71, 56),\r\n            'turtle-7': new Rectangle(301, 88, 71, 57),\r\n            // Turtle Diving\r\n            'turtle-dive-1': new Rectangle(377, 92, 60, 50),\r\n            'turtle-dive-2': new Rectangle(453, 98, 49, 39),\r\n            'turtle-dive-3': new Rectangle(517, 102, 36, 28),\r\n            'turtle-dive-4': new Rectangle(570, 104, 20, 20),\r\n            // Aligator\r\n            'aligator-idle': new Rectangle(299, 317, 180, 61),\r\n            'aligator-chomp': new Rectangle(520, 345, 61, 180),\r\n            'aligator-head': new Rectangle(455, 499, 37, 43),\r\n        },\r\n    );\r\n    private player: Player;\r\n\r\n    constructor(private readonly onGameOver: () => void) {\r\n        this.particleSystemRenderer = ParticleSystemRenderer(\r\n            this.particleSystem,\r\n        );\r\n    }\r\n\r\n    public readonly start = () => {\r\n        console.log('Starting Game');\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-background.mp3',\r\n            0,\r\n            true,\r\n            0.5,\r\n        );\r\n\r\n        this.eventSystem.clear();\r\n\r\n        this.homePadSystem = new HomePadSystem(\r\n            this._spriteSheet,\r\n            this.tileWidth,\r\n            this.tileHeight,\r\n        );\r\n\r\n        this.initializePlayer();\r\n\r\n        this.pathedObjectSystem.initializeObjects(\r\n            this.numRows,\r\n            this.tileHeight,\r\n            this._spriteSheet,\r\n        );\r\n\r\n        this.particleSystem.clear();\r\n\r\n        this.internalUpdate = this.gameUpdate;\r\n        this.internalRender = this.gameRender;\r\n        this.internalDetectCollisions = this.gameDetectCollisions;\r\n\r\n        this.time = 30000;\r\n        this.lives = 7;\r\n        this.countDownTime = true;\r\n        this.scoreManager.resetScore();\r\n    };\r\n\r\n    public readonly update = (elapsedTime: number) => {\r\n        this.internalUpdate(elapsedTime);\r\n    };\r\n\r\n    public readonly render = (cr: CanvasRenderer) => {\r\n        this.internalRender(cr);\r\n    };\r\n\r\n    public readonly destroy = () => {\r\n        this.eventSystem.destroy();\r\n        this.audioSystem.destroy();\r\n    };\r\n\r\n    public readonly reset = () => {\r\n        this.audioSystem.clearAllSounds();\r\n        this.particleSystem.clear();\r\n\r\n        this.clearPlayerInternals();\r\n\r\n        this.currentOnHomePad = 0;\r\n    };\r\n\r\n    public readonly moveLeft = () => {\r\n        this.internalMoveLeft();\r\n    };\r\n\r\n    public readonly moveRight = () => {\r\n        this.internalMoveRight();\r\n    };\r\n\r\n    public readonly moveUp = () => {\r\n        this.internalMoveUp();\r\n    };\r\n\r\n    public readonly moveDown = () => {\r\n        this.internalMoveDown();\r\n    };\r\n\r\n    private readonly initializePlayer = () => {\r\n        this.player = new Player(\r\n            {\r\n                center: {\r\n                    x: GameSettings.width / 2,\r\n                    y: GameSettings.width - this.tileHeight / 2,\r\n                },\r\n                collisionRadius: 20,\r\n                width: this.tileWidth,\r\n                spriteSheet: this._spriteSheet,\r\n                delta: this.tileWidth,\r\n            },\r\n            this.audioSystem,\r\n        );\r\n\r\n        this.setPlayerInternals();\r\n    };\r\n\r\n    private readonly setPlayerInternals = () => {\r\n        this.internalMoveLeft = this.player.moveLeft;\r\n        this.internalMoveRight = this.player.moveRight;\r\n        this.internalMoveUp = () => {\r\n            this.scoreManager.moveUp();\r\n            this.player.moveUp();\r\n        };\r\n        this.internalMoveDown = () => {\r\n            this.scoreManager.moveDown();\r\n            this.player.moveDown();\r\n        };\r\n        this.internalPlayerRender = this.player.render;\r\n    };\r\n\r\n    private readonly clearPlayerInternals = () => {\r\n        this.internalMoveLeft = () => {};\r\n        this.internalMoveRight = () => {};\r\n        this.internalMoveUp = () => {};\r\n        this.internalMoveDown = () => {};\r\n        this.internalPlayerRender = () => {};\r\n    };\r\n\r\n    private readonly gameRender = (cr: CanvasRenderer) => {\r\n        cr.clear();\r\n\r\n        this.drawBackground(cr);\r\n        this.homePadSystem.render(cr);\r\n\r\n        this.pathedObjectSystem.render(cr);\r\n\r\n        this.drawGameStatus(cr);\r\n\r\n        this.internalPlayerRender(cr);\r\n\r\n        this.particleSystemRenderer(cr);\r\n    };\r\n\r\n    private readonly drawBackground = (cr: CanvasRenderer) => {\r\n        cr.drawRectangle(0, 0, 1024, 1024, 0, '#000');\r\n\r\n        for (let row = 0; row < this.numRows; row++) {\r\n            const newY = this.tileHeight * row;\r\n            for (let col = 0; col < this.numRows; col++) {\r\n                const newX = this.tileWidth * col;\r\n                cr.drawSubTexture(\r\n                    this._spriteSheet,\r\n                    this.rowImages[row],\r\n                    {\r\n                        x: newX + this.tileWidth / 2,\r\n                        y: newY + this.tileWidth / 2,\r\n                    },\r\n                    0,\r\n                    true,\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    private drawGameStatus(cr: CanvasRenderer) {\r\n        cr.drawRectangle(\r\n            0,\r\n            GameSettings.width,\r\n            GameSettings.width,\r\n            GameSettings.width + 100,\r\n            0,\r\n            '#000',\r\n        );\r\n\r\n        this.drawTime(cr);\r\n        this.drawScore(cr);\r\n        this.drawLifes(cr);\r\n    }\r\n\r\n    private drawTime(cr: CanvasRenderer) {\r\n        const width = 800;\r\n        const padding = 10;\r\n        const height = 50 - padding;\r\n\r\n        cr.drawText(\r\n            { x: padding / 2, y: GameSettings.width + 50 + padding },\r\n            'TIME',\r\n            0,\r\n            false,\r\n            '#fff',\r\n            '32px arial',\r\n        );\r\n\r\n        const x = 100;\r\n        const y = GameSettings.width + 50 + padding / 2;\r\n        for (let i = 0; i < this.time / 1000; i++) {\r\n            cr.drawRectangle(\r\n                x + i * (width / 30),\r\n                y,\r\n                width / 30 + 1,\r\n                height,\r\n                0,\r\n                '#00ffcc',\r\n            );\r\n        }\r\n    }\r\n\r\n    private drawScore(cr: CanvasRenderer) {\r\n        cr.drawText(\r\n            { x: GameSettings.width / 2, y: GameSettings.width + 5 },\r\n            `Score: ${this.scoreManager.score}`,\r\n            0,\r\n            true,\r\n            '#fff',\r\n            '32px arial',\r\n        );\r\n    }\r\n\r\n    private drawLifes(cr: CanvasRenderer) {\r\n        for (let i = 0; i < this.lives - 1; i++) {\r\n            cr.drawSubTexture(\r\n                this._spriteSheet,\r\n                'frogger-idle',\r\n                { x: i * 50, y: GameSettings.width - 20 },\r\n                0,\r\n            );\r\n        }\r\n    }\r\n\r\n    private readonly gameUpdate = (elapsedTime: number) => {\r\n        this.audioSystem.update(elapsedTime);\r\n\r\n        this.eventSystem.update(elapsedTime);\r\n\r\n        this.particleSystem.update(elapsedTime);\r\n\r\n        this.pathedObjectSystem.update(elapsedTime);\r\n\r\n        this.homePadSystem.update(elapsedTime);\r\n\r\n        this.player.update(elapsedTime);\r\n\r\n        this.updateTime(elapsedTime);\r\n\r\n        this.detectCollisions();\r\n    };\r\n\r\n    private updateTime(elapsedTime: number) {\r\n        if (!this.countDownTime) {\r\n            return;\r\n        }\r\n        this.time -= elapsedTime;\r\n        if (this.time <= 0) {\r\n            this.playerExplosionAndMoveOn();\r\n            this.countDownTime = false;\r\n        }\r\n    }\r\n\r\n    private playerExplosionAndMoveOn = () => {\r\n        this.internalDetectCollisions = () => {};\r\n\r\n        this.particleSystem.splash(this.player.center, this.explosionParams);\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-plunk.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        this.internalPlayerRender = () => {};\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private readonly detectCollisions = () => {\r\n        this.internalDetectCollisions();\r\n    };\r\n\r\n    private readonly gameDetectCollisions = () => {\r\n        // It looked like collision happened when the player was idle\r\n        // 1:28 in the video\r\n        if (!this.player.idle) {\r\n            return;\r\n        }\r\n\r\n        if (this.player.center.y < this.tileHeight * 2) {\r\n            const { pads } = this.homePadSystem;\r\n            for (let i = 0; i < pads.length; i++) {\r\n                if (pads[i].inBounds(this.player.center)) {\r\n                    this.handleLandedOnHomePad(pads[i]);\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        const objs = this.pathedObjectSystem.objects;\r\n        for (let i = 0; i < objs.length; i++) {\r\n            if (objs[i].testPoint(this.player.center)) {\r\n                switch (objs[i].type) {\r\n                    case 'car':\r\n                        this.handleCollisionWithCar(objs[i].goingLeft);\r\n                        break;\r\n                    case 'log':\r\n                        this.handleOnLog(objs[i]);\r\n                        break;\r\n                    case 'tur':\r\n                        this.handleOnTurtle(objs[i]);\r\n                        break;\r\n                    case 'alligator':\r\n                        this.handleAlligator(objs[i]);\r\n                        break;\r\n                    default:\r\n                        console.error('NOT IMPLEMENT YET FOR', objs[i].type);\r\n                        break;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.player.center.y < GameSettings.width / 2) {\r\n            // console.log('Water');\r\n            this.handleDrown();\r\n        }\r\n        //  else {\r\n        //     console.log('Land');\r\n        // }\r\n    };\r\n\r\n    private readonly handleLandedOnHomePad = (homePad: HomePad) => {\r\n        this.internalDetectCollisions = () => {};\r\n\r\n        console.log('LANDED ON HOME PAD');\r\n\r\n        // handle if there is an aligator\r\n        if (homePad.hasAligator) {\r\n            homePad.hasAligator = false;\r\n            this.handleAlligator();\r\n            return;\r\n        }\r\n\r\n        // handle if there is already a frog there.\r\n        if (homePad.hasFrog) {\r\n            this.handleDrown();\r\n            return;\r\n        }\r\n\r\n        this.internalPlayerRender = () => {};\r\n        homePad.hasFrog = true;\r\n\r\n        this.particleSystem.showerSparks(homePad.bounds, this.sparkParams);\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-coin-in.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        // update score\r\n        this.scoreManager.landOnPad();\r\n\r\n        // handle if there is a fly\r\n        if (homePad.hasFly) {\r\n            homePad.hasFly = false;\r\n            this.scoreManager.gotFly();\r\n        }\r\n\r\n        this.currentOnHomePad++;\r\n        if (this.currentOnHomePad >= this.requiredOnHomePads) {\r\n            this.handleBeatLevel();\r\n        } else {\r\n            this.startTimedTransition(this.resetWithNewFrog);\r\n        }\r\n    };\r\n\r\n    private handleBeatLevel = () => {\r\n        this.countDownTime = false;\r\n\r\n        // player gets 1000 points\r\n        this.scoreManager.beatLevel();\r\n        this.scoreManager.accountForTime(this.time);\r\n\r\n        // show score screen,\r\n        this.beatGameScreen();\r\n    };\r\n\r\n    private resetWithNewFrog = () => {\r\n        this.scoreManager.resetForNewFrog();\r\n        this.resetPlayer();\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-background.mp3',\r\n            0,\r\n            true,\r\n            0.5,\r\n        );\r\n\r\n        this.scoreManager.accountForTime(this.time);\r\n        this.countDownTime = true;\r\n        this.time = 30000;\r\n    };\r\n\r\n    private readonly handleOnLog = (pathedObject: PathedObject) => {\r\n        this.player.speedX =\r\n            pathedObject.speed * (pathedObject.goingLeft ? -1 : 1);\r\n    };\r\n\r\n    private readonly handleOnTurtle = (pathedObject: PathedObject) => {\r\n        // if the turtle is not diving, keep up with it\r\n        if (pathedObject.canStandOn) {\r\n            this.player.speedX =\r\n                pathedObject.speed * (pathedObject.goingLeft ? -1 : 1);\r\n        } else {\r\n            this.handleDrown();\r\n        }\r\n    };\r\n\r\n    private readonly handleCollisionWithCar = (goingLeft: boolean) => {\r\n        this.internalDetectCollisions = () => {};\r\n        console.log('Crashed!');\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-squash.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n        this.particleSystem.carCrash(\r\n            this.player.center,\r\n            goingLeft ? Math.PI / 2 : -Math.PI / 2,\r\n            this.crashParticleParams,\r\n        );\r\n        this.internalPlayerRender = () => {};\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private readonly handleDrown = () => {\r\n        this.internalDetectCollisions = () => {};\r\n        console.log('Drown');\r\n\r\n        this.particleSystem.splash(this.player.center, this.splashParams);\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-plunk.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        this.internalPlayerRender = () => {};\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private readonly handleAlligator = (pathedObject?: PathedObject) => {\r\n        if (pathedObject && pathedObject.canStandOn) {\r\n            this.player.speedX =\r\n                pathedObject.speed * (pathedObject.goingLeft ? -1 : 1);\r\n            return;\r\n        }\r\n        this.internalDetectCollisions = () => {};\r\n\r\n        this.audioSystem.clearAllSounds();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-plunk.mp3',\r\n            0,\r\n            false,\r\n            0.5,\r\n        );\r\n\r\n        this.internalPlayerRender = () => {};\r\n        this.particleSystem.froggerBlood(\r\n            this.player.center,\r\n            this.aligatorDeathParams,\r\n        );\r\n        this.startTimedTransition(this.loseALifeAndReset);\r\n    };\r\n\r\n    private startTimedTransition = (\r\n        callback: () => void,\r\n        duration: number = 2000,\r\n    ) => {\r\n        this.eventSystem.addEvent(duration, 1, callback);\r\n    };\r\n\r\n    private loseALifeAndReset = () => {\r\n        this.lives--;\r\n\r\n        if (this.lives <= 0) {\r\n            this.lostGameScreen();\r\n            return;\r\n        }\r\n\r\n        this.time = 30000;\r\n        this.countDownTime = true;\r\n        this.resetPlayer();\r\n        this.audioSystem.addAudio(\r\n            'audio/sound-frogger-background.mp3',\r\n            0,\r\n            true,\r\n            0.5,\r\n        );\r\n    };\r\n\r\n    public readonly mouseClick = (ev: GameMouseEvent) => {\r\n        this.internalMouseClick(ev);\r\n    };\r\n\r\n    private readonly endGame = (userName: string, topFiveScore: boolean) => {\r\n        // Add score to high score manager\r\n        if (topFiveScore) {\r\n            HighScoreManager.addScore(\r\n                userName === '' ? 'Default_User' : userName,\r\n                this.scoreManager.score,\r\n            );\r\n        }\r\n\r\n        this.reset();\r\n        this.onGameOver();\r\n    };\r\n\r\n    private readonly beatGameScreen = () => {\r\n        this.internalDetectCollisions = () => {};\r\n        this.clearPlayerInternals();\r\n\r\n        const topFiveScore = HighScoreManager.isHighScore(\r\n            this.scoreManager.score,\r\n        );\r\n\r\n        let userName = '';\r\n\r\n        if (topFiveScore) {\r\n            const typingKeyboard: Keyboard = new Keyboard(true);\r\n            const registerLetter = (letter: string) => {\r\n                typingKeyboard.register(letter, () => {\r\n                    if (userName.length < 20) {\r\n                        userName += letter;\r\n                    }\r\n                });\r\n            };\r\n\r\n            genCharArray('a', 'z').forEach(registerLetter);\r\n            genCharArray('A', 'Z').forEach(registerLetter);\r\n\r\n            typingKeyboard.register('Backspace', () => {\r\n                if (userName.length > 0) {\r\n                    userName = userName.slice(0, userName.length - 1);\r\n                } else {\r\n                    userName = '';\r\n                }\r\n            });\r\n\r\n            this.internalUpdate = (elapsedTime: number) => {\r\n                typingKeyboard.process(elapsedTime);\r\n                this.gameUpdate(elapsedTime);\r\n            };\r\n        }\r\n\r\n        const buttonW = 350;\r\n        const buttonH = 100;\r\n        const bounds = new Rectangle(\r\n            (GameSettings.width - buttonW) / 2,\r\n            (GameSettings.width - buttonH) / 2 + 100,\r\n            buttonW,\r\n            buttonH,\r\n        );\r\n\r\n        this.internalMouseClick = (ev: GameMouseEvent) => {\r\n            if (bounds.inBounds(ev.pos)) {\r\n                this.endGame(userName, topFiveScore);\r\n            }\r\n        };\r\n\r\n        const bgWidth = 550;\r\n        const bgHeight = 500;\r\n\r\n        this.internalRender = (cr: CanvasRenderer) => {\r\n            this.gameRender(cr);\r\n            cr.drawRectangle(\r\n                (GameSettings.width - bgWidth) / 2,\r\n                (GameSettings.width - bgHeight) / 2,\r\n                bgWidth,\r\n                bgHeight,\r\n                0,\r\n                '#fff',\r\n            );\r\n            cr.drawText(\r\n                { x: 512, y: (GameSettings.width - bgHeight) / 2 + 40 },\r\n                'Game Over, You Won! :)',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n\r\n            cr.drawText(\r\n                { x: 512, y: (GameSettings.width - bgHeight) / 2 + 100 },\r\n                `Your Score: ${this.scoreManager.score}`,\r\n                0,\r\n                true,\r\n                '#000',\r\n                '40px arial',\r\n            );\r\n\r\n            if (topFiveScore) {\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 160 },\r\n                    `Enter Username:`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 200 },\r\n                    `${userName}`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n            } else {\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 160 },\r\n                    `You didn't get a top 5 score.`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n                cr.drawText(\r\n                    { x: 512, y: (GameSettings.width - bgHeight) / 2 + 200 },\r\n                    `Better luck next time!`,\r\n                    0,\r\n                    true,\r\n                    '#000',\r\n                    '40px arial',\r\n                );\r\n            }\r\n\r\n            cr.drawRectangle(bounds.x, bounds.y, bounds.w, bounds.h, 0, '#000');\r\n\r\n            cr.drawText(\r\n                { x: 512, y: bounds.y + 30 },\r\n                'Back To Menu',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n        };\r\n    };\r\n\r\n    private readonly lostGameScreen = () => {\r\n        this.countDownTime = false;\r\n        this.internalDetectCollisions = () => {};\r\n        this.clearPlayerInternals();\r\n\r\n        const buttonW = 350;\r\n        const buttonH = 100;\r\n        const bounds = new Rectangle(\r\n            (GameSettings.width - buttonW) / 2,\r\n            (GameSettings.width - buttonH) / 2,\r\n            buttonW,\r\n            buttonH,\r\n        );\r\n\r\n        this.internalMouseClick = (ev: GameMouseEvent) => {\r\n            if (bounds.inBounds(ev.pos)) {\r\n                this.reset();\r\n                this.onGameOver();\r\n            }\r\n        };\r\n\r\n        const bgWidth = 550;\r\n        const bgHeight = 500;\r\n\r\n        this.internalRender = (cr: CanvasRenderer) => {\r\n            this.gameRender(cr);\r\n            cr.drawRectangle(\r\n                (GameSettings.width - bgWidth) / 2,\r\n                (GameSettings.width - bgHeight) / 2,\r\n                bgWidth,\r\n                bgHeight,\r\n                0,\r\n                '#fff',\r\n            );\r\n            cr.drawText(\r\n                { x: 512, y: (GameSettings.width - bgHeight) / 2 + 40 },\r\n                'Game Over, You Lost :(',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n\r\n            cr.drawRectangle(bounds.x, bounds.y, bounds.w, bounds.h, 0, '#000');\r\n\r\n            cr.drawText(\r\n                { x: 512, y: bounds.y + 30 },\r\n                'Back To Menu',\r\n                0,\r\n                true,\r\n                '#ffaa00',\r\n                '48px arial',\r\n            );\r\n        };\r\n    };\r\n\r\n    private resetPlayer = () => {\r\n        this.initializePlayer();\r\n        this.internalDetectCollisions = this.gameDetectCollisions;\r\n    };\r\n}\r\n","import { CanvasRenderer } from '../Engine/Renderers/CanvasRenderer';\r\nimport Mouse, { GameMouseEvent } from '../Engine/Input/Mouse';\r\nimport { AudioSystem } from '../Engine/Systems/AudioSystem';\r\nimport GameLoop from '../Engine/BaseComponents/GameLoop';\r\nimport Menu from './Screens/Menu';\r\nimport GameModel from './GameModel';\r\nimport Keyboard from '../Engine/Input/Keyboard';\r\nimport ControlsManager from '../Engine/Managers/ControlsManager';\r\nimport GameSettings from '../Engine/Settings/GameSettings';\r\n\r\nexport default class GamePlay extends GameLoop<CanvasRenderer> {\r\n    private mouse: Mouse;\r\n    private playerKeyboard: Keyboard;\r\n    private internalMouseClick: (gev: GameMouseEvent) => void;\r\n    private internalMouseMove: (gev: GameMouseEvent) => void;\r\n\r\n    private menu: Menu;\r\n    private gameModel: GameModel;\r\n\r\n    private readonly audioSystem: AudioSystem = new AudioSystem();\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas, CanvasRenderer);\r\n\r\n        GameSettings.updateWithCanvas(canvas);\r\n\r\n        this.menu = new Menu(this.setupNewGame);\r\n        this.gameModel = new GameModel(this.handleGameEscape);\r\n\r\n        this.mouse = new Mouse(canvas);\r\n        this.addMouseHandlers();\r\n    }\r\n\r\n    public play(): void {\r\n        this.setupMenu();\r\n        this.start();\r\n    }\r\n\r\n    private setupMenu = () => {\r\n        this.clearAllInternals();\r\n        this.mouse.clearInputBuffer();\r\n\r\n        this.internalProcessInput = () => {\r\n            this.mouse.process();\r\n        };\r\n\r\n        this.internalMouseClick = this.menu.mouseClick;\r\n        this.internalRender = this.menu.render;\r\n    };\r\n\r\n    private setupNewGame = () => {\r\n        this.clearAllInternals();\r\n        this.mouse.clearInputBuffer();\r\n\r\n        this.internalRender = this.gameModel.render;\r\n        this.internalUpdate = this.gameModel.update;\r\n        this.internalMouseClick = this.gameModel.mouseClick;\r\n\r\n        this.initializeKeyboard();\r\n        this.internalProcessInput = (et: number) => {\r\n            this.playerKeyboard.process(et);\r\n            this.mouse.process();\r\n        };\r\n\r\n        // Should this be here? Attaching methods should be enough?\r\n        // How would the game model know it is a new game?\r\n        this.gameModel.start();\r\n    };\r\n\r\n    private initializeKeyboard = () => {\r\n        this.playerKeyboard = new Keyboard(true);\r\n\r\n        const controls = ControlsManager.getControls();\r\n\r\n        const { register } = this.playerKeyboard;\r\n\r\n        register(controls[0], this.gameModel.moveLeft);\r\n        register(controls[1], this.gameModel.moveRight);\r\n        register(controls[2], this.gameModel.moveUp);\r\n        register(controls[3], this.gameModel.moveDown);\r\n        register('Escape', this.handleGameEscape);\r\n    };\r\n\r\n    private handleGameEscape = () => {\r\n        this.gameModel.reset();\r\n        this.setupMenu();\r\n    };\r\n\r\n    private clearAllInternals = () => {\r\n        this.clearBaseInternals();\r\n        this.internalMouseClick = () => {};\r\n        this.internalMouseMove = () => {};\r\n    };\r\n\r\n    private addMouseHandlers = () => {\r\n        this.mouse.register('click', (gev: GameMouseEvent) => {\r\n            this.internalMouseClick(gev);\r\n        });\r\n\r\n        this.mouse.register('mousemove', (gev: GameMouseEvent) => {\r\n            this.internalMouseMove(gev);\r\n        });\r\n    };\r\n\r\n    public destroy = () => {\r\n        this.mouse.destroy();\r\n        this.audioSystem.destroy();\r\n    };\r\n}\r\n","import GamePlay from './Game/GamePlay';\r\n\r\nconst canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\r\n\r\nconst gamePlay = new GamePlay(canvas);\r\ngamePlay.play();\r\n\r\nconst handleResize = (ev: any) => {\r\n    const { innerWidth, innerHeight } = ev.target as Window;\r\n\r\n    const minSize = (Math.min(innerWidth, innerHeight) - 16).toString();\r\n    canvas.style.width = minSize;\r\n    canvas.style.height = minSize;\r\n};\r\n\r\nwindow.addEventListener('resize', handleResize);\r\nhandleResize({ target: window });\r\n"]}